Code Dump for Project: C:\Users\prabe\Documents\Class\3rd Year\Modern Programming Language - 2\Music-App-Project\MusicAppFrontend 
Date: 05/31/2025 17:57:08
---


# ==================================================================================================
# FILE: Services/AuthService.cs
# ==================================================================================================
using Microsoft.JSInterop;
using MusicApp.ViewModels;
using System.Text.Json;
using System.Collections.Generic;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;

namespace MusicApp.Services
{    public class AuthService
    {
        private readonly ApiService _apiService;
        private readonly IJSRuntime _jsRuntime;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly ILogger<AuthService> _logger;
        private static bool _isServerSideRendering;

        public AuthService(ApiService apiService, IJSRuntime jsRuntime, IHttpContextAccessor httpContextAccessor, ILogger<AuthService> logger)
        {            _apiService = apiService;
            _jsRuntime = jsRuntime;
            _httpContextAccessor = httpContextAccessor;
            _logger = logger;
            
            // Check if we're in a server-side rendering context
            _isServerSideRendering = jsRuntime is IJSInProcessRuntime == false;
        }

        private async Task<bool> SetLocalStorageAsync(string key, string value)
        {
            if (_isServerSideRendering)
                return false;
                
            try
            {
                await _jsRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        private async Task<string> GetLocalStorageAsync(string key)
        {
            if (_isServerSideRendering)
                return null;
                
            try
            {
                return await _jsRuntime.InvokeAsync<string>("localStorage.getItem", key);
            }
            catch
            {
                return null;
            }
        }
        
        private async Task RemoveLocalStorageAsync(string key)
        {
            if (_isServerSideRendering)
                return;
                
            try
            {
                await _jsRuntime.InvokeVoidAsync("localStorage.removeItem", key);
            }
            catch
            {
                // Ignore errors during removal
            }
        }

        public async Task<bool> LoginAsync(string identifier, string password, bool rememberMe)
        {
            try
            {
                var response = await _apiService.PostAsync<LoginResponse>(
                    "api/Auth/login", 
                    new { identifier, password, rememberMe });
                
                if (response != null && response.User != null)
                {
                    // Store tokens in local storage for API requests
                    await SetLocalStorageAsync("jwt_token", response.Token);
                    await SetLocalStorageAsync("refresh_token", response.RefreshToken);
                    await SetLocalStorageAsync("user_info", JsonSerializer.Serialize(response.User));
                    
                    // Also set up cookie authentication for server-side validation
                    var user = response.User;
                    var claims = new List<Claim>
                    {
                        new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                        new Claim(ClaimTypes.Name, user.Username),
                        new Claim(ClaimTypes.Email, user.Email),
                        new Claim("jwt_token", response.Token)  // Store JWT token in claims
                    };
                    
                    // Add roles as claims
                    if (user.Roles != null)
                    {
                        foreach (var role in user.Roles)
                        {
                            claims.Add(new Claim(ClaimTypes.Role, role));
                        }
                    }
                    
                    var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    var authProperties = new AuthenticationProperties
                    {
                        IsPersistent = rememberMe,
                        ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7), // Set cookie expiration
                        AllowRefresh = true
                    };
                    
                    // Make sure we have a valid HttpContext
                    if (_httpContextAccessor.HttpContext != null)
                    {
                        // Sign in using cookie authentication
                        await _httpContextAccessor.HttpContext.SignInAsync(
                            CookieAuthenticationDefaults.AuthenticationScheme,
                            new ClaimsPrincipal(claimsIdentity),
                            authProperties
                        );
                    }
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during login");
                return false;
            }
        }

        public async Task<bool> RegisterAsync(RegisterViewModel model)
        {
            try
            {
                var response = await _apiService.PostAsync<LoginResponse>("api/Auth/register", model);
                
                if (response != null && response.User != null)
                {
                    // Store tokens in local storage for API requests
                    await SetLocalStorageAsync("jwt_token", response.Token);
                    await SetLocalStorageAsync("refresh_token", response.RefreshToken);
                    await SetLocalStorageAsync("user_info", JsonSerializer.Serialize(response.User));
                    
                    // Also set up cookie authentication for server-side validation
                    var user = response.User;
                    var claims = new List<Claim>
                    {
                        new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                        new Claim(ClaimTypes.Name, user.Username),
                        new Claim(ClaimTypes.Email, user.Email),
                        new Claim("jwt_token", response.Token)  // Store JWT token in claims
                    };
                    
                    // Add roles as claims
                    if (user.Roles != null)
                    {
                        foreach (var role in user.Roles)
                        {
                            claims.Add(new Claim(ClaimTypes.Role, role));
                        }
                    }
                    
                    var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    var authProperties = new AuthenticationProperties
                    {
                        IsPersistent = true, // Remember me by default for new registrations
                        ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7) // Set cookie expiration
                    };
                    
                    // Sign in using cookie authentication
                    // Make sure we have a valid HttpContext
                    if (_httpContextAccessor.HttpContext != null)
                    {
                        await _httpContextAccessor.HttpContext.SignInAsync(
                            CookieAuthenticationDefaults.AuthenticationScheme,
                            new ClaimsPrincipal(claimsIdentity),
                            authProperties);
                              _logger.LogInformation("User registered and authenticated via cookies: {IsAuthenticated}", 
                            _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated);
                    }
                    else
                    {
                        _logger.LogWarning("HttpContext is null during registration");
                    }
                    
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Registration error: {ErrorMessage}", ex.Message);
                return false;
            }
        }

        public async Task LogoutAsync()
        {
            // Call logout endpoint to invalidate token
            try
            {
                var refreshToken = await GetLocalStorageAsync("refresh_token");
                if (!string.IsNullOrEmpty(refreshToken))
                {
                    await _apiService.PostAsync<object>("api/Auth/revoke-token", new { token = refreshToken });
                }
            }
            catch { /* Ignore errors during logout */ }
            
            // Clear tokens in browser
            await RemoveLocalStorageAsync("jwt_token");
            await RemoveLocalStorageAsync("refresh_token");
            await RemoveLocalStorageAsync("user_info");
            
            // Sign out from cookie authentication
            await _httpContextAccessor.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }
        
        public bool IsAuthenticated()
        {
            if (_httpContextAccessor.HttpContext == null)
            {
                _logger.LogWarning("HttpContext is null when checking authentication");
                return false;
            }
            
            var isAuthenticated = _httpContextAccessor.HttpContext.User?.Identity?.IsAuthenticated ?? false;
            _logger.LogInformation("IsAuthenticated check: {IsAuthenticated}", isAuthenticated);
            
            // Double check if we have the necessary claims
            if (isAuthenticated)
            {
                var nameIdentifier = _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(nameIdentifier))
                {
                    _logger.LogWarning("User appears authenticated but missing NameIdentifier claim");
                    return false;
                }
            }
            
            return isAuthenticated;
        }
        
        public async Task<bool> IsAuthenticatedAsync()
        {
            // Check cookie authentication first
            if (IsAuthenticated())
            {
                return true;
            }
            
            // Fallback to JWT token check
            var token = await GetLocalStorageAsync("jwt_token");
            return !string.IsNullOrEmpty(token);
        }
        
        public async Task<AuthUserDto> GetCurrentUserAsync()
        {
            // Try to get from HttpContext claims
            if (IsAuthenticated())
            {
                try
                {
                    var user = _httpContextAccessor.HttpContext.User;
                    var id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    var username = user.FindFirst(ClaimTypes.Name)?.Value;
                    var email = user.FindFirst(ClaimTypes.Email)?.Value;
                    
                    if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(username))
                    {
                        // Get full user profile from API
                        try
                        {
                            var userProfile = await _apiService.GetAsync<AuthUserDto>("api/Users/profile");
                            if (userProfile != null)
                            {
                                return userProfile;
                            }
                        }
                        catch
                        {
                            // If API call fails, return basic user info from claims
                            return new AuthUserDto
                            {
                                Id = int.Parse(id),
                                Username = username,
                                Email = email,
                                Roles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList()
                            };
                        }
                    }
                }
                catch 
                {
                    // Continue to try from local storage if any error occurs
                }
            }
            
            // Fallback to local storage
            var userJson = await GetLocalStorageAsync("user_info");
            
            if (string.IsNullOrEmpty(userJson))
                return null;
                
            try
            {
                return JsonSerializer.Deserialize<AuthUserDto>(userJson, new JsonSerializerOptions 
                { 
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
            }
            catch
            {
                return null;
            }
        }

        // Fix CS8602: Dereference of a possibly null reference at line 283
        private string? GetUserEmail()
        {
            return _httpContextAccessor.HttpContext?.User?.Identity?.Name;
        }

        // Fix CS8601: Possible null reference assignment at line 306
        private async Task<string?> GetTokenAsync()
        {
            var token = await GetLocalStorageAsync("authToken");
            return token ?? null;
        }

        // Fix CS8603: Possible null reference return at lines 322, 326, 334
        public async Task<string?> GetAuthTokenAsync()
        {
            var token = await GetLocalStorageAsync("authToken");
            return token ?? null;
        }
        public async Task<string?> GetRefreshTokenAsync()
        {
            var token = await GetLocalStorageAsync("refreshToken");
            return token ?? null;
        }
        public async Task<string?> GetUserIdAsync()
        {
            var userId = await GetLocalStorageAsync("userId");
            return userId ?? null;
        }
    }    public class LoginResponse
    {
        public string Token { get; set; }
        public string RefreshToken { get; set; }
        public AuthUserDto User { get; set; }
        // Removed Success and Message properties to match backend TokenResponseDTO
    }

    public class AuthUserDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string ProfileImageUrl { get; set; }
        public List<string> Roles { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

# ==================================================================================================
# FILE: Services/ApiService.cs
# ==================================================================================================
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using Microsoft.JSInterop;
using Microsoft.AspNetCore.Http;

namespace MusicApp.Services
{    public class ApiService
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IJSRuntime _jsRuntime;
        private readonly IConfiguration _configuration;
        private readonly string _baseUrl;
        private static bool _isServerSideRendering;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly ILogger<ApiService> _logger;

        public ApiService(
            IHttpClientFactory httpClientFactory, 
            IJSRuntime jsRuntime,            IConfiguration configuration,
            IHttpContextAccessor httpContextAccessor = null,
            ILogger<ApiService> logger = null)
        {
            _httpClientFactory = httpClientFactory;
            _jsRuntime = jsRuntime;
            _configuration = configuration;
            _httpContextAccessor = httpContextAccessor ?? new HttpContextAccessor();
            _logger = logger;
            _baseUrl = _configuration["ApiSettings:BaseUrl"] ?? "http://localhost:5117";
            
            // Check if we're in a server-side rendering context
            _isServerSideRendering = jsRuntime is IJSInProcessRuntime == false;}

        private async Task<string?> GetTokenAsync()
        {
            // First try to get from localStorage (primary method for JWT)
            if (!_isServerSideRendering)
            {
                try
                {
                    var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "jwt_token");
                    if (!string.IsNullOrEmpty(token))
                    {
                        _logger?.LogInformation("Using token from localStorage");
                        return token;
                    }
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "Error getting token from localStorage: {ErrorMessage}", ex.Message);
                }
            }
            
            // Fallback: check if we're authenticated via cookies and can get the token from HttpContext
            if (_httpContextAccessor?.HttpContext?.User?.Identity?.IsAuthenticated == true)
            {
                var tokenClaim = _httpContextAccessor.HttpContext.User.FindFirst("jwt_token");
                if (tokenClaim != null && !string.IsNullOrEmpty(tokenClaim.Value))
                {
                    _logger?.LogInformation("Using token from HttpContext claims");
                    return tokenClaim.Value;
                }
            }
            
            return null;
        }

        public async Task<HttpClient> GetHttpClientAsync()
        {
            var client = _httpClientFactory.CreateClient("MusicApi");
            client.BaseAddress = new Uri(_baseUrl);
            
            // Add headers for cross-origin requests
            client.DefaultRequestHeaders.Add("Accept", "application/json");
            client.DefaultRequestHeaders.Add("Origin", "http://localhost:5085");

            var token = await GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            return client;
        }        public async Task<T> GetAsync<T>(string endpoint)
        {
            try
            {
                var client = await GetHttpClientAsync();
                var response = await client.GetAsync(endpoint);
                
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // Handle token refresh or redirect to login
                    await HandleUnauthorized();
                    return default;
                }

                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger?.LogError("GET request failed for {Endpoint} with status {StatusCode}: {Content}", 
                        endpoint, response.StatusCode, errorContent);
                    
                    // Try to parse error response
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, 
                            new JsonSerializerOptions 
                            { 
                                PropertyNameCaseInsensitive = true,
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });
                        
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            throw new HttpRequestException($"API request failed: {errorResponse.Message}", null, response.StatusCode);
                        }
                    }
                    catch (JsonException) { /* Continue with default handling */ }
                    
                    throw new HttpRequestException($"API request failed with status code {response.StatusCode}", null, response.StatusCode);
                }
                
                var content = await response.Content.ReadAsStringAsync();
                
                // Handle empty responses gracefully
                if (string.IsNullOrWhiteSpace(content))
                {
                    _logger?.LogWarning("Empty response received from {Endpoint}", endpoint);
                    return default;
                }
                
                // Try to deserialize the response
                try
                {
                    var result = JsonSerializer.Deserialize<T>(content, new JsonSerializerOptions 
                    { 
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
                    
                    // Handle false success status in response objects that have Success property
                    if (result != null && HasSuccessProperty(result) && !GetSuccessValue(result))
                    {
                        _logger?.LogWarning("API returned success=false for {Endpoint}", endpoint);
                        var message = GetMessageValue(result);
                        if (!string.IsNullOrEmpty(message))
                        {
                            throw new InvalidOperationException($"API operation failed: {message}");
                        }
                        throw new InvalidOperationException("API operation returned success=false without specific message");
                    }
                    
                    return result;
                }
                catch (JsonException ex)
                {
                    _logger?.LogError(ex, "JSON deserialization error for {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                    _logger?.LogError("Response content: {ResponseContent}", content);
                    throw new InvalidOperationException($"Invalid JSON response from API: {ex.Message}", ex);
                }
            }
            catch (HttpRequestException)
            {
                throw; // Re-throw HTTP exceptions as-is
            }
            catch (InvalidOperationException)
            {
                throw; // Re-throw operation exceptions as-is
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Unexpected error in GetAsync for {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                throw new InvalidOperationException($"Unexpected error occurred while calling API: {ex.Message}", ex);
            }
        }        public async Task<T> PostAsync<T>(string endpoint, object data)
        {
            try
            {
                var client = await GetHttpClientAsync();
                var json = JsonSerializer.Serialize(data);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                  _logger?.LogInformation("Making POST request to {Endpoint}", endpoint);
                _logger?.LogInformation("Request data: {Json}", json);
                
                var response = await client.PostAsync(endpoint, content);
                var responseContent = await response.Content.ReadAsStringAsync();
                  _logger?.LogInformation("Response status: {StatusCode}", response.StatusCode);
                _logger?.LogInformation("Response content: {ResponseContent}", responseContent);
                
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {                    // Try to deserialize error message
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, 
                            new JsonSerializerOptions 
                            { 
                                PropertyNameCaseInsensitive = true,
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });
                        
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            throw new HttpRequestException($"401 Unauthorized: {errorResponse.Message}", null, System.Net.HttpStatusCode.Unauthorized);
                        }
                    }
                    catch (JsonException) { /* Continue with default handling */ }
                    
                    await HandleUnauthorized();
                    throw new HttpRequestException("Authentication failed", null, System.Net.HttpStatusCode.Unauthorized);
                }
                
                if (!response.IsSuccessStatusCode)
                {                    // Try to deserialize error message
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(responseContent, 
                            new JsonSerializerOptions 
                            { 
                                PropertyNameCaseInsensitive = true,
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });
                        
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            throw new HttpRequestException($"API request failed: {errorResponse.Message}", null, response.StatusCode);
                        }
                    }
                    catch (JsonException) { /* Continue with default error message */ }
                    
                    throw new HttpRequestException($"API request failed with status code {response.StatusCode}: {responseContent}", null, response.StatusCode);
                }
                
                // Handle empty responses gracefully
                if (string.IsNullOrWhiteSpace(responseContent))
                {
                    _logger?.LogWarning("Empty response received from POST to {Endpoint}", endpoint);
                    return default;
                }
                
                try
                {
                    var result = JsonSerializer.Deserialize<T>(responseContent, new JsonSerializerOptions 
                    { 
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
                    
                    // Handle false success status in response objects that have Success property
                    if (result != null && HasSuccessProperty(result) && !GetSuccessValue(result))
                    {
                        _logger?.LogWarning("POST API returned success=false for {Endpoint}", endpoint);
                        var message = GetMessageValue(result);
                        if (!string.IsNullOrEmpty(message))
                        {
                            throw new InvalidOperationException($"API operation failed: {message}");
                        }
                        throw new InvalidOperationException("API operation returned success=false without specific message");
                    }
                    
                    return result;
                }
                catch (JsonException ex)
                {                    _logger?.LogError(ex, "JSON deserialization error for POST {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                    _logger?.LogError("Response content: {ResponseContent}", responseContent);
                    throw new InvalidOperationException($"Invalid JSON response from API: {ex.Message}", ex);
                }
            }
            catch (HttpRequestException)
            {
                throw; // Re-throw HTTP exceptions as-is
            }
            catch (InvalidOperationException)
            {
                throw; // Re-throw operation exceptions as-is
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Unexpected error in PostAsync for {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                throw new InvalidOperationException($"Unexpected error occurred while calling API: {ex.Message}", ex);
            }
        }
          public async Task<T> PutAsync<T>(string endpoint, object data)
        {
            try
            {
                var client = await GetHttpClientAsync();
                var json = JsonSerializer.Serialize(data);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                
                // Log the Authorization header
                _logger?.LogInformation("Authorization Header: {AuthHeader}", client.DefaultRequestHeaders.Authorization);

                var response = await client.PutAsync(endpoint, content);
                
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await HandleUnauthorized();
                    return default;
                }

                // Handle 204 No Content response
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    return default; // Return default value for T when no content is expected
                }

                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger?.LogError("PUT request failed for {Endpoint} with status {StatusCode}: {Content}", 
                        endpoint, response.StatusCode, errorContent);
                    
                    // Try to parse error response
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, 
                            new JsonSerializerOptions 
                            { 
                                PropertyNameCaseInsensitive = true,
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });
                        
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            throw new HttpRequestException($"API request failed: {errorResponse.Message}", null, response.StatusCode);
                        }
                    }
                    catch (JsonException) { /* Continue with default handling */ }
                    
                    throw new HttpRequestException($"API request failed with status code {response.StatusCode}", null, response.StatusCode);
                }
                
                var responseContent = await response.Content.ReadAsStringAsync();
                
                // Handle empty responses gracefully
                if (string.IsNullOrWhiteSpace(responseContent))
                {
                    _logger?.LogWarning("Empty response received from PUT to {Endpoint}", endpoint);
                    return default;
                }
                
                try
                {
                    var result = JsonSerializer.Deserialize<T>(responseContent, new JsonSerializerOptions 
                    { 
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
                    
                    // Handle false success status in response objects that have Success property
                    if (result != null && HasSuccessProperty(result) && !GetSuccessValue(result))
                    {
                        _logger?.LogWarning("PUT API returned success=false for {Endpoint}", endpoint);
                        var message = GetMessageValue(result);
                        if (!string.IsNullOrEmpty(message))
                        {
                            throw new InvalidOperationException($"API operation failed: {message}");
                        }
                        throw new InvalidOperationException("API operation returned success=false without specific message");
                    }
                    
                    return result;
                }
                catch (JsonException ex)
                {
                    _logger?.LogError(ex, "JSON deserialization error for PUT {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                    _logger?.LogError("Response content: {ResponseContent}", responseContent);
                    throw new InvalidOperationException($"Invalid JSON response from API: {ex.Message}", ex);
                }
            }
            catch (HttpRequestException)
            {
                throw; // Re-throw HTTP exceptions as-is
            }
            catch (InvalidOperationException)
            {
                throw; // Re-throw operation exceptions as-is
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Unexpected error in PutAsync for {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                throw new InvalidOperationException($"Unexpected error occurred while calling API: {ex.Message}", ex);
            }
        }
          public async Task DeleteAsync(string endpoint)
        {
            try
            {
                var client = await GetHttpClientAsync();
                var response = await client.DeleteAsync(endpoint);
                
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await HandleUnauthorized();
                    return;
                }
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger?.LogError("DELETE request failed for {Endpoint} with status {StatusCode}: {Content}", 
                        endpoint, response.StatusCode, errorContent);
                    
                    // Try to parse error response
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, 
                            new JsonSerializerOptions 
                            { 
                                PropertyNameCaseInsensitive = true,
                                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                            });
                        
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
                        {
                            throw new HttpRequestException($"Delete operation failed: {errorResponse.Message}", null, response.StatusCode);
                        }
                    }
                    catch (JsonException) { /* Continue with default handling */ }
                    
                    throw new HttpRequestException($"Delete operation failed with status code {response.StatusCode}", null, response.StatusCode);
                }
            }
            catch (HttpRequestException)
            {
                throw; // Re-throw HTTP exceptions as-is
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Unexpected error in DeleteAsync for {Endpoint}: {ErrorMessage}", endpoint, ex.Message);
                throw new InvalidOperationException($"Unexpected error occurred while deleting: {ex.Message}", ex);
            }
        }
        
        public async Task<Stream?> GetStreamAsync(string endpoint)
        {
            var client = await GetHttpClientAsync();
            var response = await client.GetAsync(endpoint);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStreamAsync();
        }
        
        public async Task<string?> UploadFileAsync(string endpoint, IFormFile file, string paramName = "file")
        {
            var client = await GetHttpClientAsync();
            using var content = new MultipartFormDataContent();
            
            using var fileStream = file.OpenReadStream();
            using var streamContent = new StreamContent(fileStream);
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            
            content.Add(streamContent, paramName, file.FileName);
            
            var response = await client.PostAsync(endpoint, content);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            response.EnsureSuccessStatusCode();
              var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<FileUploadResultDto>(responseContent, 
                new JsonSerializerOptions 
                { 
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                  return result?.FilePath;
        }

        // New methods for admin file management
        public async Task<string?> UploadFileToStorageAsync(string fileType, IFormFile file, string fileName, string entityName = null)
        {
            var client = await GetHttpClientAsync();
            using var content = new MultipartFormDataContent();
            
            using var fileStream = file.OpenReadStream();
            using var streamContent = new StreamContent(fileStream);
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            
            // Determine the filename with extension
            var fileExtension = Path.GetExtension(file.FileName);
            var fullFileName = fileName + fileExtension;
            
            content.Add(streamContent, "file", fullFileName);
            content.Add(new StringContent(fileType), "fileType");
            content.Add(new StringContent(fileName), "fileName");
            if (!string.IsNullOrEmpty(entityName))
                content.Add(new StringContent(entityName), "entityName");
            
            var response = await client.PostAsync("api/FileStorage/upload", content);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<FileUploadResultDto>(responseContent, 
                    new JsonSerializerOptions 
                    { 
                        PropertyNameCaseInsensitive = true,
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    });
                    
                return result?.FilePath;
            }
            
            throw new HttpRequestException($"Upload failed with status code {response.StatusCode}");
        }

        public async Task<string?> DeleteFileFromStorageAsync(string fileType, string fileName)
        {
            var client = await GetHttpClientAsync();
            var data = new { fileType, fileName };
            var json = JsonSerializer.Serialize(data);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await client.PostAsync("api/FileStorage/delete", content);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return responseContent;
            }
            
            throw new HttpRequestException($"Delete failed with status code {response.StatusCode}");
        }

        public async Task<string?> CleanupUnusedFilesAsync()
        {
            var client = await GetHttpClientAsync();
            var response = await client.PostAsync("api/FileStorage/cleanup", null);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return responseContent;
            }
            
            throw new HttpRequestException($"Cleanup failed with status code {response.StatusCode}");
        }

        public async Task<string?> GenerateThumbnailsAsync()
        {
            var client = await GetHttpClientAsync();
            var response = await client.PostAsync("api/FileStorage/generate-thumbnails", null);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleUnauthorized();
                return null;
            }
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return responseContent;
            }
            
            throw new HttpRequestException($"Thumbnail generation failed with status code {response.StatusCode}");
        }        private async Task HandleUnauthorized()
        {
            if (_isServerSideRendering)
                return;
                
            // Try to refresh the token
            try
            {
                // Get refresh token from localStorage
                var refreshToken = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "refresh_token");
                
                if (!string.IsNullOrEmpty(refreshToken))
                {
                    try
                    {
                        // Create a new HttpClient without token requirements
                        var client = _httpClientFactory.CreateClient("MusicApi");
                        client.BaseAddress = new Uri(_baseUrl);
                        
                        var content = new StringContent(
                            JsonSerializer.Serialize(new { token = refreshToken }), 
                            Encoding.UTF8, 
                            "application/json");
                        
                        var response = await client.PostAsync("api/Auth/refresh-token", content);
                        
                        if (response.IsSuccessStatusCode)
                        {
                            var responseContent = await response.Content.ReadAsStringAsync();                            var tokenResponse = JsonSerializer.Deserialize<TokenResponseDto>(
                                responseContent, 
                                new JsonSerializerOptions 
                                { 
                                    PropertyNameCaseInsensitive = true,
                                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                                });
                            
                            if (tokenResponse != null)
                            {
                                // Store the new tokens in localStorage
                                await _jsRuntime.InvokeVoidAsync("localStorage.setItem", "jwt_token", tokenResponse.Token);
                                await _jsRuntime.InvokeVoidAsync("localStorage.setItem", "refresh_token", tokenResponse.RefreshToken);
                                
                                // Successfully refreshed token, return without redirect
                                return;
                            }
                        }
                        // If we get here, token refresh failed - proceed to logout
                    }
                    catch
                    {
                        // Ignore errors during token refresh
                    }
                }
            }
            catch
            {
                // Ignore errors during token refresh in server-side rendering
            }
            
            // Token refresh failed or wasn't attempted, log the user out
            if (!_isServerSideRendering)
            {
                // Clear tokens from localStorage
                try
                {
                    await _jsRuntime.InvokeVoidAsync("localStorage.removeItem", "jwt_token");
                    await _jsRuntime.InvokeVoidAsync("localStorage.removeItem", "refresh_token");
                    await _jsRuntime.InvokeVoidAsync("localStorage.removeItem", "user_info");
                    
                    // Use HttpContextAccessor for redirect if available (works in MVC/Razor Pages),
                    // otherwise fall back to JS redirect (for Blazor components)
                    if (_httpContextAccessor?.HttpContext != null)
                    {
                        _httpContextAccessor.HttpContext.Response.Redirect("/Home/Index?authModal=login&error=Your+session+has+expired");
                    }
                    else
                    {
                        await _jsRuntime.InvokeVoidAsync("window.location.href", "/Home/Index?authModal=login&error=Your+session+has+expired");
                    }
                }
                catch
                {
                    // Ignore errors during cleanup
                }
            }
        }        // Helper methods for checking Success property in response objects
        private bool HasSuccessProperty<T>(T obj)
        {
            if (obj == null) return false;
            var type = obj.GetType();
            var successProperty = type.GetProperty("Success");
            
            // Debug logging to understand what's happening
            _logger?.LogInformation("Checking HasSuccessProperty for type: {TypeName}", type.FullName);
            if (successProperty != null)
            {
                _logger?.LogInformation("Found Success property - Type: {PropertyType}, CanRead: {CanRead}, CanWrite: {CanWrite}", 
                    successProperty.PropertyType, successProperty.CanRead, successProperty.CanWrite);
                
                // Log all properties of the type for debugging
                var allProperties = type.GetProperties();
                _logger?.LogInformation("All properties on type {TypeName}: {Properties}", 
                    type.FullName, string.Join(", ", allProperties.Select(p => $"{p.Name} ({p.PropertyType.Name})")));
            }
            
            return successProperty != null;
        }        private bool GetSuccessValue<T>(T obj)
        {
            if (obj == null) return false;
            var type = obj.GetType();
            var property = type.GetProperty("Success");
            if (property != null && property.PropertyType == typeof(bool))
            {
                var boxedValue = property.GetValue(obj);
                if (boxedValue != null)
                {
                    var value = (bool)boxedValue;
                    _logger?.LogInformation("GetSuccessValue for {TypeName}: Success property value = {Value}", type.FullName, value);
                    return value;
                }
            }
            return true; // Default to true if no Success property
        }

        private string? GetMessageValue<T>(T obj)
        {
            if (obj == null) return null;
            var type = obj.GetType();
            var property = type.GetProperty("Message");
            if (property != null && property.PropertyType == typeof(string))
            {
                return property.GetValue(obj) as string;
            }
            return null;
        }
    }
    
    public class FileUploadResultDto
    {
        public bool Success { get; set; }
        public string FilePath { get; set; }
        public string ErrorMessage { get; set; }
    }
    
    public class TokenResponseDto
    {
        public string Token { get; set; }
        public string RefreshToken { get; set; }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
        public bool Success { get; set; }
    }
}

# ==================================================================================================
# FILE: Controllers/AccountController.cs
# ==================================================================================================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MusicApp.Models;
using MusicApp.Models.DTOs;
using MusicApp.ViewModels;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using MusicApp.Data;
using Microsoft.JSInterop;
using System.Text.Json;
using MusicApp.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;

namespace MusicApp.Controllers
{
    public class AccountController : BaseAppController
    {
        private readonly ApplicationDbContext _context;
        private readonly AuthService _authService;

        public AccountController(ApplicationDbContext context, AuthService authService, ApiService apiService, ILogger<AccountController> logger)
            : base(apiService, logger)
        {
            _context = context;
            _authService = authService;
        }

        [HttpGet]
        public IActionResult Login(string returnUrl = null)
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Dashboard");
            }
            
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null)
        {
            if (!ModelState.IsValid)
            {
                if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                {
                    return Json(new { success = false, message = "Please check your input and try again." });
                }
                return View(model);
            }

            return await SafeApiAction(async () =>
            {
                var success = await _authService.LoginAsync(model.Identifier, model.Password, model.RememberMe);

                if (success)
                {
                    if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                    {
                        var redirectUrl = !string.IsNullOrEmpty(returnUrl) && Url.IsLocalUrl(returnUrl)
                            ? returnUrl
                            : Url.Action("Index", "Home");
                        return Json(new { success = true, redirectUrl });
                    }
                    if (!string.IsNullOrEmpty(returnUrl) && Url.IsLocalUrl(returnUrl))
                        return Redirect(returnUrl);
                    return RedirectToAction("Index", "Home");
                }

                // Login failed
                var errorMessage = "Invalid username/email or password. Please try again.";
                if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                {
                    return Json(new { success = false, message = errorMessage });
                }

                ModelState.AddModelError(string.Empty, errorMessage);
                return View(model);
            },
            () => {
                if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                {
                    return Json(new { success = false, message = "An error occurred during login. Please try again." });
                }
                ModelState.AddModelError(string.Empty, "An error occurred during login");
                return View(model);
            },
            "An error occurred during login. Please try again.",
            "AccountController.Login POST");
        }

        [HttpGet]
        public IActionResult Register(string returnUrl = null)
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Dashboard");
            }
            
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(RegisterViewModel model, string returnUrl = null)
        {
            if (!ModelState.IsValid)
            {
                if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                {
                    return Json(new { success = false, message = "Please check your input and try again." });
                }
                ViewBag.ReturnUrl = returnUrl;
                ViewBag.RegisterStatus = "Please check your input and try again.";
                ViewBag.RegisterSuccess = false;
                return View(model);
            }

            try
            {
                var apiResponse = await _apiService.PostAsync<dynamic>("api/Auth/register", model);
                if (apiResponse != null && apiResponse.user != null)
                {
                    if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                    {
                        return Json(new { success = true, message = apiResponse.message ?? "Registration successful!" });
                    }
                    TempData["RegistrationSuccess"] = apiResponse.message ?? "Your account was created successfully. Please log in.";
                    return RedirectToAction("Login");
                }
                else
                {
                    string errorMsg = apiResponse?.message ?? "Registration failed. Please try again.";
                    if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                    {
                        return Json(new { success = false, message = errorMsg });
                    }
                    ModelState.AddModelError(string.Empty, errorMsg);
                    ViewBag.ReturnUrl = returnUrl;
                    ViewBag.RegisterStatus = errorMsg;
                    ViewBag.RegisterSuccess = false;
                    return View(model);
                }
            }
            catch (Exception ex)
            {
                string errorMsg = ex.Message;
                if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
                {
                    return Json(new { success = false, message = errorMsg });
                }
                ModelState.AddModelError(string.Empty, errorMsg);
                ViewBag.ReturnUrl = returnUrl;
                ViewBag.RegisterStatus = errorMsg;
                ViewBag.RegisterSuccess = false;
                return View(model);
            }
        }

        [HttpPost]
        public async Task<IActionResult> Logout()
        {
            await _authService.LogoutAsync();
            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public async Task<IActionResult> Dashboard()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", new { returnUrl = Url.Action("Dashboard") });
            }

            return await SafeApiAction(async () =>
            {
                // Try to get user profile from the API
                var userProfile = await SafeApiCall(
                    async () => await _apiService.GetAsync<UserDto>("api/Users/profile"),
                    (UserDto)null,
                    "Unable to load user profile",
                    "AccountController.Dashboard - Loading user profile"
                );
                
                // Create and populate ProfileViewModel
                var profile = new ProfileViewModel();
                
                if (userProfile != null)
                {
                    // Create a User object from UserDto
                    profile.User = new User
                    {
                        Id = userProfile.Id,
                        Username = userProfile.Username,
                        Email = userProfile.Email,
                        FirstName = userProfile.FirstName, 
                        LastName = userProfile.LastName,
                        ProfileImageUrl = userProfile.ProfileImageUrl,
                        CreatedAt = userProfile.CreatedAt
                    };
                    
                    // Get user statistics (now dynamic!)
                    var statisticsResponse = await SafeApiCall(
                        async () => await _apiService.GetAsync<object>("api/Users/statistics"),
                        (object)null,
                        "Unable to load user statistics",
                        "AccountController.Dashboard - Loading user statistics"
                    );

                    if (statisticsResponse != null)
                    {
                        // Convert to JsonElement for safe property access
                        var statsJson = JsonSerializer.Serialize(statisticsResponse);
                        var statsObj = JsonSerializer.Deserialize<JsonElement>(statsJson);
                        
                        // Set listening time
                        if (statsObj.TryGetProperty("totalListeningTimeMinutes", out JsonElement listeningTime))
                        {
                            var minutes = listeningTime.GetInt64();
                            var hours = minutes / 60;
                            var remainingMinutes = minutes % 60;
                            profile.TotalListeningTime = hours > 0 ? $"{hours}h {remainingMinutes}m" : $"{minutes}m";
                        }
                        
                        // Set top genre
                        if (statsObj.TryGetProperty("topGenre", out JsonElement topGenre))
                        {
                            profile.TopGenre = topGenre.GetString() ?? "No data";
                        }
                        
                        // Set favorite artist
                        if (statsObj.TryGetProperty("favoriteArtist", out JsonElement favoriteArtist))
                        {
                            profile.FavoriteArtist = favoriteArtist.GetString() ?? "No data";
                        }
                        
                        // Populate recently played tracks
                        if (statsObj.TryGetProperty("recentlyPlayed", out JsonElement recentlyPlayedElement) && 
                            recentlyPlayedElement.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var track in recentlyPlayedElement.EnumerateArray())
                            {
                                profile.RecentlyPlayedTracks.Add(new ProfileViewModel.RecentlyPlayedTrack
                                {
                                    Id = track.GetProperty("id").GetInt32(),
                                    SongTitle = track.GetProperty("title").GetString() ?? "Unknown",
                                    ArtistName = track.GetProperty("artist").GetString() ?? "Unknown Artist",
                                    AlbumName = "Unknown Album", // Not in current response
                                    Duration = track.TryGetProperty("duration", out var durationProp) && 
                                              durationProp.ValueKind != JsonValueKind.Null 
                                              ? TimeSpan.FromTicks(durationProp.GetInt64()).ToString(@"m\:ss") 
                                              : "--:--",
                                    CoverImageUrl = "/images/default-cover.png" // Default for now
                                });
                            }
                        }
                        
                        // Populate activity feed
                        if (statsObj.TryGetProperty("recentActivity", out JsonElement activityElement) && 
                            activityElement.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var activity in activityElement.EnumerateArray())
                            {
                                profile.ActivityFeedItems.Add(new ProfileViewModel.ActivityFeedItem
                                {
                                    Id = activity.GetProperty("id").GetInt32(),
                                    Type = "song_played",
                                    Description = $"Played \"{activity.GetProperty("songTitle").GetString()}\" by {activity.GetProperty("artistName").GetString()}",
                                    Timestamp = DateTime.Parse(activity.GetProperty("timestamp").GetString() ?? DateTime.UtcNow.ToString())
                                });
                            }
                        }
                    }
                    
                    // Get top artists (now dynamic!)
                    var topArtistsResponse = await SafeApiCall(
                        async () => await _apiService.GetAsync<object[]>("api/Users/top-artists"),
                        new object[0],
                        "Unable to load top artists",
                        "AccountController.Dashboard - Loading top artists"
                    );

                    if (topArtistsResponse != null && topArtistsResponse.Length > 0)
                    {
                        foreach (var artist in topArtistsResponse)
                        {
                            var artistJson = JsonSerializer.Serialize(artist);
                            var artistObj = JsonSerializer.Deserialize<JsonElement>(artistJson);
                            profile.TopArtists.Add(new ProfileViewModel.TopArtist
                            {
                                Id = artistObj.GetProperty("id").GetInt32(),
                                ArtistName = artistObj.GetProperty("name").GetString() ?? "Unknown Artist",
                                PlayCount = artistObj.GetProperty("playCount").GetInt32(),
                                ArtistImageUrl = artistObj.TryGetProperty("imageUrl", out JsonElement imageUrl) && 
                                               imageUrl.ValueKind != JsonValueKind.Null 
                                               ? imageUrl.GetString()
                                               : "/images/default-artist.png"
                            });
                        }
                    }
                }
                else
                {
                    // No user data found, add sample data
                    profile.AddSampleData();
                }
                
                return View(profile);
            },
            () => {
                // Return a default profile to avoid null reference
                var profile = new ProfileViewModel();
                profile.AddSampleData();
                SetErrorMessage("Unable to load dashboard data. Please try again later.");
                return View(profile);
            },
            "Unable to load dashboard data. Please try again later.",
            "AccountController.Dashboard");
        }

        [HttpGet]
        [Authorize]
        public async Task<IActionResult> Profile()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", new { returnUrl = Url.Action("Profile") });
            }

            return await SafeApiAction(async () =>
            {
                // Get user profile from the API
                var userProfile = await SafeApiCall(
                    async () => await _apiService.GetAsync<UserDto>("api/Users/profile"),
                    (UserDto)null,
                    "Unable to load user profile",
                    "AccountController.Profile - Loading user profile"
                );
                
                // Create and populate ProfileViewModel
                var profile = new ProfileViewModel();
                
                if (userProfile != null)
                {
                    // Create a User object from UserDto
                    profile.User = new User
                    {
                        Id = userProfile.Id,
                        Username = userProfile.Username,
                        Email = userProfile.Email,
                        FirstName = userProfile.FirstName, 
                        LastName = userProfile.LastName,
                        ProfileImageUrl = userProfile.ProfileImageUrl,
                        CreatedAt = userProfile.CreatedAt
                    };
                }
                else
                {
                    // No user data found, add sample data
                    profile.AddSampleData();
                }
                
                return View(profile);
            },
            () => {
                // Return a default profile to avoid null reference
                var profile = new ProfileViewModel();
                profile.AddSampleData();
                SetErrorMessage("Unable to load profile data. Please try again later.");
                return View(profile);
            },
            "Unable to load profile data. Please try again later.",
            "AccountController.Profile");
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public IActionResult AdminDashboard()
        {
            return View();
        }

        [HttpGet]
        [Authorize]
        public async Task<IActionResult> ListeningHistory(int page = 1, int pageSize = 20)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", new { returnUrl = Url.Action("ListeningHistory") });
            }

            return await SafeApiAction(async () =>
            {
                // Get listening history from API
                var historyResponse = await SafeApiCall(
                    async () => await _apiService.GetAsync<object>($"api/Users/listening-history?page={page}&pageSize={pageSize}"),
                    (object)null,
                    "Unable to load listening history at this time",
                    "AccountController.ListeningHistory - Loading history"
                );

                var viewModel = new ListeningHistoryViewModel
                {
                    CurrentPage = page,
                    PageSize = pageSize
                };

                if (historyResponse != null)
                {
                    // Convert to JsonElement for safe property access
                    var historyJson = JsonSerializer.Serialize(historyResponse);
                    var historyObj = JsonSerializer.Deserialize<JsonElement>(historyJson);

                    if (historyObj.TryGetProperty("data", out JsonElement dataElement) && 
                        dataElement.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var item in dataElement.EnumerateArray())
                        {
                            var playItem = new ListeningHistoryViewModel.ListeningHistoryItem();
                            
                            if (item.TryGetProperty("song", out JsonElement songElement))
                            {
                                playItem.Song = new ListeningHistoryViewModel.SongInfo
                                {
                                    Id = songElement.GetProperty("id").GetInt32(),
                                    Title = songElement.GetProperty("title").GetString() ?? "Unknown",
                                    Artist = songElement.GetProperty("artist").GetString() ?? "Unknown Artist",
                                    Album = songElement.TryGetProperty("album", out var albumProp) && 
                                           albumProp.ValueKind != JsonValueKind.Null 
                                           ? albumProp.GetString() : null,
                                    Genre = songElement.TryGetProperty("genre", out var genreProp) && 
                                           genreProp.ValueKind != JsonValueKind.Null 
                                           ? genreProp.GetString() : null,
                                    CoverImageUrl = songElement.TryGetProperty("coverImageUrl", out var coverProp) && 
                                                   coverProp.ValueKind != JsonValueKind.Null 
                                                   ? coverProp.GetString() : "/images/default-cover.png"
                                };

                                if (songElement.TryGetProperty("duration", out var durationProp) && 
                                    durationProp.ValueKind != JsonValueKind.Null)
                                {
                                    var durationString = durationProp.GetString();
                                    if (TimeSpan.TryParse(durationString, out var duration))
                                    {
                                        playItem.Song.Duration = duration;
                                    }
                                }
                            }

                            if (item.TryGetProperty("playedAt", out var playedAtProp))
                            {
                                playItem.PlayedAt = DateTime.Parse(playedAtProp.GetString() ?? DateTime.UtcNow.ToString());
                            }

                            if (item.TryGetProperty("listenDuration", out var listenDurationProp) && 
                                listenDurationProp.ValueKind != JsonValueKind.Null)
                            {
                                var listenDurationString = listenDurationProp.GetString();
                                if (TimeSpan.TryParse(listenDurationString, out var listenDuration))
                                {
                                    playItem.ListenDuration = listenDuration;
                                }
                            }

                            viewModel.History.Add(playItem);
                        }
                    }

                    // Set pagination info
                    if (historyObj.TryGetProperty("totalPages", out var totalPagesElement))
                    {
                        viewModel.TotalPages = totalPagesElement.GetInt32();
                    }
                    
                    if (historyObj.TryGetProperty("totalCount", out var totalCountElement))
                    {
                        viewModel.TotalCount = totalCountElement.GetInt32();
                    }
                }

                return View(viewModel);
            }, () => {
                var viewModel = new ListeningHistoryViewModel 
                { 
                    CurrentPage = page, 
                    PageSize = pageSize 
                };
                SetErrorMessage("Unable to load listening history. Please try again later.");
                return View(viewModel);
            },
            "Unable to load listening history. Please try again later.",
            "AccountController.ListeningHistory");
        }

        // Diagnostic method to test database and authentication
        [HttpGet]
        public async Task<IActionResult> Debug()
        {
            try
            {
                // Check if roles exist, create them if not
                if (!await _context.Roles.AnyAsync())
                {
                    _context.Roles.Add(new Models.Role { Id = 1, Name = "Admin", Description = "Administrator role" });
                    _context.Roles.Add(new Models.Role { Id = 2, Name = "User", Description = "Regular user role" });
                    await _context.SaveChangesAsync();
                }
                
            // Clear existing users
            var existingUsers = await _context.Users.ToListAsync();
            _context.Users.RemoveRange(existingUsers);
            await _context.SaveChangesAsync();

            // Add a test admin user directly
            var testUser = new User
            {
                Id = 999,
                FirstName = "Test",
                LastName = "Admin",
                    Username = "prabe.sh",
                    Email = "hello@prabe.sh",
                    PasswordHash = "prabesh",
                ProfileImageUrl = "https://picsum.photos/200/200?random=99",
                CreatedAt = DateTime.UtcNow
            };
            _context.Users.Add(testUser);
            await _context.SaveChangesAsync();

            // Add admin role for this user
            var userRole = new UserRole
            {
                UserId = testUser.Id,
                RoleId = 1 // Admin role
            };
            _context.UserRoles.Add(userRole);
            await _context.SaveChangesAsync();

            // Check if user was saved properly
            var allUsers = await _context.Users
                .Include(u => u.UserRoles)
                .ThenInclude(ur => ur.Role)
                .ToListAsync();

            string result = $"Total users: {allUsers.Count}\n";
            foreach (var user in allUsers)
            {
                result += $"User: {user.Username}, Email: {user.Email}, Password: {user.PasswordHash}\n";
                result += $"Roles: {string.Join(", ", user.UserRoles?.Select(ur => ur.Role?.Name ?? "Unknown") ?? new[] { "None" })}\n";
            }

                // Log in the test user automatically
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, testUser.Username),
                    new Claim(ClaimTypes.Email, testUser.Email),
                    new Claim("UserId", testUser.Id.ToString()),
                    new Claim(ClaimTypes.Role, "Admin") // Add role claim
                };

                var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var authProperties = new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddHours(24)
                };

                await HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme,
                    new ClaimsPrincipal(claimsIdentity),
                    authProperties);

                result += "\nUser automatically logged in. You can now refresh the page to see the authenticated state.";

            return Content(result, "text/plain");
            }
            catch (Exception ex)
            {
                return Content($"Error during debug: {ex.Message}\n{ex.StackTrace}", "text/plain");
            }
        }

        private IActionResult RedirectToLoginWithError()
        {
            return RedirectToAction("Login", "Account", new { error = string.Empty });
        }
    }
}

# ==================================================================================================
# FILE: ViewModels/RegisterViewModel.cs
# ==================================================================================================
using System.ComponentModel.DataAnnotations;

namespace MusicApp.ViewModels
{
    public class RegisterViewModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot be longer than 50 characters")]
        [Display(Name = "First Name")]
        public required string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot be longer than 50 characters")]
        [Display(Name = "Last Name")]
        public required string LastName { get; set; }

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username cannot be longer than 50 characters")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}

# ==================================================================================================
# FILE: ViewModels/LoginViewModel.cs
# ==================================================================================================
using System.ComponentModel.DataAnnotations;

namespace MusicApp.ViewModels
{
    public class LoginViewModel
    {
        [Required(ErrorMessage = "Username or Email is required")]
        [Display(Name = "Username or Email")]
        public string Identifier { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Display(Name = "Remember me")]
        public bool RememberMe { get; set; }
    }
}

# ==================================================================================================
# FILE: Views/Account/Register.cshtml
# ==================================================================================================
@model MusicApp.ViewModels.RegisterViewModel
@{
    ViewData["Title"] = "Create Account";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Create Account</h2>
                    
                    @if (TempData["AuthError"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @TempData["AuthError"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (ViewBag.RegisterStatus != null)
                    {
                        var status = ViewBag.RegisterStatus as string;
                        var isSuccess = ViewBag.RegisterSuccess as bool? ?? false;
                        <div class="alert @(isSuccess ? "alert-success" : "alert-danger")" role="alert">
                            @status
                        </div>
                    }

                    <form asp-action="Register" method="post">
                        <input type="hidden" name="ReturnUrl" value="@ViewBag.ReturnUrl" />
                        @Html.Partial("_RegisterFormPartial", Model)
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">Create Account</button>
                        </div>
                    </form>

                    <div class="text-center mt-3">
                        <span>Already have an account? <a href="@Url.Action("Login", "Account")" class="text-decoration-none">Sign In</a></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

# ==================================================================================================
# FILE: Views/Account/_RegisterFormPartial.cshtml
# ==================================================================================================
@model MusicApp.ViewModels.RegisterViewModel

@if (ViewBag.RegisterStatus != null)
{
    var status = ViewBag.RegisterStatus as string;
    var isSuccess = ViewBag.RegisterSuccess as bool? ?? false;
    <div class="alert @(isSuccess ? "alert-success" : "alert-danger")" role="alert">
        @status
    </div>
}

<div class="row">
    <div class="col-md-6 mb-3">
        <label asp-for="FirstName" class="form-label">First Name</label>
        <input asp-for="FirstName" class="form-control" placeholder="Enter first name" />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>
    <div class="col-md-6 mb-3">
        <label asp-for="LastName" class="form-label">Last Name</label>
        <input asp-for="LastName" class="form-control" placeholder="Enter last name" />
        <span asp-validation-for="LastName" class="text-danger"></span>
    </div>
</div>
<div class="mb-3">
    <label asp-for="Username" class="form-label">Username</label>
    <input asp-for="Username" class="form-control" placeholder="Choose a username" />
    <span asp-validation-for="Username" class="text-danger"></span>
</div>
<div class="mb-3">
    <label asp-for="Email" class="form-label">Email</label>
    <input asp-for="Email" class="form-control" placeholder="Enter your email" />
    <span asp-validation-for="Email" class="text-danger"></span>
</div>
<div class="mb-3">
    <label asp-for="Password" class="form-label">Password</label>
    <input asp-for="Password" class="form-control" placeholder="Create a password" />
    <span asp-validation-for="Password" class="text-danger"></span>
</div>
<div class="mb-3">
    <label asp-for="ConfirmPassword" class="form-label">Confirm Password</label>
    <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm your password" />
    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
</div>

# ==================================================================================================
# FILE: Views/Account/Login.cshtml
# ==================================================================================================
@model MusicApp.ViewModels.LoginViewModel
@{
    ViewData["Title"] = "Sign In";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Sign In</h2>

                    @if (TempData["RegistrationSuccess"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @TempData["RegistrationSuccess"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <div id="errorAlert" class="alert alert-danger d-none" role="alert">
                        <span id="errorMessage"></span>
                    </div>

                    <form id="loginForm" method="post" asp-action="Login" asp-controller="Account">
                        <div asp-validation-summary="ModelOnly" class="text-danger d-none"></div>
                        @Html.Partial("_LoginFormPartial", Model)
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Sign In</button>
                        </div>
                    </form>

                    <div class="mt-3 text-center">
                        <p>Don't have an account? <a href="@Url.Action("Register", "Account")">Sign Up</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function() {
            // Check if there are any errors on page load
            if ($('#errorAlert').text().trim() !== '') {
                $('#errorAlert').removeClass('d-none');
            }
            
            $('#loginForm').on('submit', function(e) {
                e.preventDefault();
                
                // Hide any previous error
                $('#errorAlert').addClass('d-none');
                
                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        console.log('Login response:', response);
                        if (response.success) {
                            window.location.href = response.redirectUrl;
                        } else {
                            // Show error message
                            $('#errorMessage').text(response.message || 'Login failed. Please try again.');
                            $('#errorAlert').removeClass('d-none');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log('Login error:', xhr, status, error);
                        let errorMessage = 'An error occurred during login. Please try again.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        $('#errorMessage').text(errorMessage);
                        $('#errorAlert').removeClass('d-none');
                    }
                });
            });
        });
    </script>
}

# ==================================================================================================
# FILE: Views/Account/_LoginFormPartial.cshtml
# ==================================================================================================
@model MusicApp.ViewModels.LoginViewModel

<div class="mb-3">
    <label asp-for="Identifier" class="form-label">Username or Email</label>
    <input asp-for="Identifier" class="form-control" id="loginIdentifier" autocomplete="off" />
    <span asp-validation-for="Identifier" class="text-danger"></span>
</div>
<div class="mb-3">
    <label asp-for="Password" class="form-label">Password</label>
    <input asp-for="Password" class="form-control" type="password" />
    <span asp-validation-for="Password" class="text-danger"></span>
</div>
<div class="mb-3 form-check">
    <input type="hidden" asp-for="RememberMe" value="false" />
    <input asp-for="RememberMe" class="form-check-input" type="checkbox" value="true" />
    <label asp-for="RememberMe" class="form-check-label">Remember me</label>
</div>


# ==================================================================================================
# FILE: Views/Shared/_Layout.cshtml
# ==================================================================================================
@* Views/Shared/_Layout.cshtml *@
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
@* Default to dark theme *@
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Music App</title>

    @* Bootstrap CSS *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    @* Bootstrap Icons *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    @* Font Awesome Icons *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    @* Tailwind CSS *@
    <script src="https://cdn.tailwindcss.com"></script>

    @* Google Font (Roboto) *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

    @* Link to your site.css (Contains all styles below) *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    @await RenderSectionAsync("Styles", required: false)

    @* Add custom styles for auth modal *@
    <style>
        /* Modal backdrop blur */
        .modal-backdrop.show {
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            background-color: rgba(0, 0, 0, 0.85);
        }

        .auth-modal .modal-dialog {
            max-width: 400px;
        }

        .auth-modal .modal-content {
            background: var(--bs-body-bg);
            border: none;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        }

        .auth-modal .modal-header {
            border-bottom: none;
            padding: 1.5rem 1.5rem 0.5rem;
        }

        .auth-modal .modal-body {
            padding: 1rem 1.5rem 1.5rem;
        }

        .auth-modal .form-control {
            background: var(--bs-body-bg);
            border: 1px solid var(--bs-border-color);
            padding: 0.75rem 1rem;
            transition: all 0.2s ease;
        }

        .auth-modal .form-control:focus {
            border-color: #ff0000;
            box-shadow: 0 0 0 0.25rem rgba(255, 0, 0, 0.15);
        }

        .auth-modal .btn-primary {
            background-color: #ff0000;
            border-color: #ff0000;
            padding: 0.75rem 1rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .auth-modal .btn-primary:hover {
            background-color: #cc0000;
            border-color: #cc0000;
        }

        .auth-modal .btn-primary:focus {
            background-color: #cc0000;
            border-color: #cc0000;
            box-shadow: 0 0 0 0.25rem rgba(255, 0, 0, 0.25);
        }

        .auth-modal .auth-switch {
            color: #ff0000;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .auth-modal .auth-switch:hover {
            color: #cc0000;
            text-decoration: underline;
        }

        .auth-modal .alert {
            margin-bottom: 1rem;
            border-color: #ff0000;
            background-color: rgba(255, 0, 0, 0.1);
            color: #ff0000;
        }

        /* Form labels */
        .auth-modal .form-label {
            color: var(--bs-body-color);
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        /* Remember me checkbox */
        .auth-modal .form-check-input:checked {
            background-color: #ff0000;
            border-color: #ff0000;
        }

        .auth-modal .form-check-input:focus {
            border-color: #ff0000;
            box-shadow: 0 0 0 0.25rem rgba(255, 0, 0, 0.25);
        }

        /* Sticky Music Player */
        .sticky-music-player {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--bs-body-bg);
            border-top: 1px solid var(--bs-border-color);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
            z-index: 1030;
        }

        .music-player-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.5rem 1rem;
        }

        .player-info {
            display: flex;
            align-items: center;
        }

        .player-album-art {
            width: 50px;
            height: 50px;
            border-radius: 5px;
            object-fit: cover;
            margin-right: 0.75rem;
        }

        .player-song-title {
            font-weight: 500;
            color: var(--bs-body-color);
        }

        .player-artist-name {
            font-size: 0.875rem;
            color: var(--bs-muted);
        }

        .player-controls {
            display: flex;
            align-items: center;
        }

        .control-buttons {
            display: flex;
            align-items: center;
            margin-right: 1rem;
        }

        .control-btn {
            background: transparent;
            border: none;
            color: var(--bs-body-color);
            font-size: 1.25rem;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .control-btn:hover {
            color: #ff0000;
        }

        .progress-container {
            display: flex;
            align-items: center;
            flex-grow: 1;
        }

        .time-display {
            font-size: 0.875rem;
            color: var(--bs-muted);
            min-width: 40px;
        }

        .progress-bar-container {
            flex-grow: 1;
            margin: 0 0.5rem;
        }

        .progress-bar {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 4px;
            border-radius: 2px;
            background: var(--bs-border-color);
            outline: none;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        .progress-bar:hover {
            opacity: 1;
        }

        /* Webkit (Chrome/Safari) styles for progress bar */
        .progress-bar::-webkit-slider-track {
            width: 100%;
            height: 4px;
            cursor: pointer;
            background: var(--bs-border-color);
            border-radius: 2px;
            border: none;
        }

        .progress-bar::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            height: 12px;
            width: 12px;
            border-radius: 50%;
            background: #ff0000;
            cursor: pointer;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }

        .progress-bar::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }

        /* Firefox styles for progress bar */
        .progress-bar::-moz-range-track {
            width: 100%;
            height: 4px;
            cursor: pointer;
            background: var(--bs-border-color);
            border-radius: 2px;
            border: none;
        }

        .progress-bar::-moz-range-thumb {
            height: 12px;
            width: 12px;
            border-radius: 50%;
            background: #ff0000;
            cursor: pointer;
            border: none;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }

        .progress-bar::-moz-range-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }

        /* Progress fill effect using gradient */
        .progress-bar {
            background: linear-gradient(to right, #ff0000 0%, #ff0000 var(--progress, 0%), var(--bs-border-color) var(--progress, 0%), var(--bs-border-color) 100%);
        }

        .volume-container {
            display: flex;
            align-items: center;
        }

        .volume-bar {
            -webkit-appearance: none;
            appearance: none;
            width: 100px;
            height: 4px;
            border-radius: 2px;
            background: var(--bs-border-color);
            outline: none;
            margin-left: 0.5rem;
        }

        /* Hide audio element */
        audio {
            display: none;
        }
    </style>

</head>
<body class="sidebar-collapsed">
    @* Start with sidebar collapsed on larger screens by default *@

    @* Top Bar: Fixed navigation header *@
    <header class="top-bar">
        @* Sidebar Toggle Buttons (Desktop and Mobile) *@
        <button id="sidebar-toggle" class="sidebar-toggle-btn d-none d-lg-block" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>
        <button id="mobile-sidebar-toggle" class="mobile-sidebar-toggle d-lg-none" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>

        @* Brand/Logo *@
        <a class="navbar-brand" href="/">
            <i class="bi bi-music-note-beamed"></i>
            <span class="d-none d-sm-inline ms-2">Music App</span>
        </a>

        @* Search Bar Container *@
        <div class="search-container">
            <form method="get" action="@Url.Action("SearchResults", "Home")">
            <div class="input-group">
                    <input type="text" name="q" class="form-control search-box" placeholder="Search" aria-label="Search">
                    <button class="btn search-btn" type="submit" aria-label="Search button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
            </form>
        </div>

        @* Profile Button *@
        <div class="nav-item">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="dropdown">
                    <a href="#" class="btn btn-link nav-link dropdown-toggle" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="@(string.IsNullOrEmpty(ViewData["UserProfileImage"] as string) ? "/assets/default-profile.png" : ViewData["UserProfileImage"] as string)" 
                             class="rounded-circle profile-image" width="32" height="32" alt="Profile"
                             onerror="this.onerror=null; this.src='/assets/default-profile.png';">
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li><a class="dropdown-item" href="@Url.Action("Dashboard", "Account")">Dashboard</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Profile", "Account")">Edit Profile</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form class="form-inline" asp-area="" asp-controller="Account" asp-action="Logout" method="post">
                                <button type="submit" class="dropdown-item">Logout</button>
                            </form>
                        </li>
                    </ul>
                </div>
            }
            else
            {
                <button type="button" class="btn btn-link nav-link" data-bs-toggle="modal" data-bs-target="#authModal" data-auth-mode="register">
                    <i class="bi bi-person-circle" style="font-size: 2rem;"></i>
                </button>
            }
        </div>
    </header>

    @* Auth Modal *@
    <div class="modal fade auth-modal" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">Create Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="authAlert" class="alert alert-danger d-none" role="alert"></div>
                    
                    @* Register Form (Now Default) *@
                    <form id="registerForm" class="auth-form">
                        <input type="hidden" name="ReturnUrl" value="@ViewBag.ReturnUrl" />
                        <div id="registerFormAlert" class="alert alert-danger d-none" role="alert"></div>
                        @await Html.PartialAsync("~/Views/Account/_RegisterFormPartial.cshtml", new MusicApp.ViewModels.RegisterViewModel { FirstName = string.Empty, LastName = string.Empty, Username = string.Empty, Email = string.Empty, Password = string.Empty, ConfirmPassword = string.Empty })
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="registerSubmitBtn">Create Account</button>
                            <button class="btn btn-primary d-none" type="button" id="registerLoadingBtn" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Creating Account...
                            </button>
                        </div>
                        <div class="text-center mt-3">
                            <span>Already have an account? <a href="#" class="auth-switch" data-auth-mode="login">Sign In</a></span>
                        </div>
                    </form>

                    @* Login Form (Now Secondary) *@
                    <form id="loginForm" class="auth-form d-none">
                        <input type="hidden" name="ReturnUrl" value="@ViewBag.ReturnUrl" />
                        <div id="loginFormAlert" class="alert alert-danger d-none" role="alert"></div>
                        @await Html.PartialAsync("~/Views/Account/_LoginFormPartial.cshtml", new MusicApp.ViewModels.LoginViewModel())
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="loginSubmitBtn">Sign In</button>
                            <button class="btn btn-primary d-none" type="button" id="loginLoadingBtn" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Signing In...
                            </button>
                        </div>
                        <div class="text-center mt-3">
                            <span>Don't have an account? <a href="#" class="auth-switch" data-auth-mode="register">Sign Up</a></span>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @* Sidebar Navigation *@
    <aside class="sidebar" id="sidebar">
        @* Scrollable Navigation Area *@
        <div class="sidebar-sticky-content">
            <ul class="nav flex-column">
                @* Navigation Links - dynamically set active state *@
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "active" : "")" href="/">
                        <i class="bi bi-house-door-fill"></i> <span class="sidebar-text">Home</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Artists" ? "active" : "")" href="/Artists">
                        <i class="bi bi-people-fill"></i> <span class="sidebar-text">Artists</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Albums" ? "active" : "")" href="/Albums">
                        <i class="bi bi-disc-fill"></i> <span class="sidebar-text">Albums</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Playlists" ? "active" : "")" href="/Playlists">
                        <i class="bi bi-music-note-list"></i> <span class="sidebar-text">Playlists</span>
                    </a>
                </li>

                @if (User.Identity?.IsAuthenticated == true)
                {
                    <li><hr class="mx-3 sidebar-divider"></li>
                    <li class="nav-item">
                        <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")" href="@Url.Action("Dashboard", "Account")">
                            <i class="bi bi-speedometer2"></i> <span class="sidebar-text">Dashboard</span>
                        </a>
                    </li>
                    @if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "AdminDashboard" ? "active" : "")" href="@Url.Action("AdminDashboard", "Account")">
                                <i class="bi bi-shield-lock"></i> <span class="sidebar-text">Admin Panel</span>
                            </a>
                        </li>
                    }
                }

                @* Divider *@
                <li><hr class="mx-3 sidebar-divider"></li>

                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "About" ? "active" : "")" href="/Home/About">
                        <i class="bi bi-info-circle-fill"></i> <span class="sidebar-text">About</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Privacy" ? "active" : "")" href="/Home/Privacy">
                        <i class="bi bi-shield-check"></i> <span class="sidebar-text">Privacy</span>
                    </a>
                </li>
            </ul>
        </div>

        @* Non-scrolling bottom part (for theme toggle) *@
        <div class="mt-auto pb-2 sidebar-bottom-section">
            <hr class="mx-3 sidebar-divider">

            @* --- Theme Toggle Area --- *@
            @* Slider Toggle (Visible when sidebar is expanded) *@
            <div class="theme-switch-wrapper" id="theme-switch-expanded">
                <label class="theme-switch" for="theme-toggle-checkbox" aria-label="Toggle theme slider">
                    <input type="checkbox" id="theme-toggle-checkbox">
                    <span class="slider round"></span>
                </label>
                <span class="sidebar-text ms-2 theme-switch-label" id="theme-switch-label">Theme</span>
            </div>

            @* Icon Button Toggle (Visible when sidebar is collapsed) *@
            <button type="button" class="btn nav-link theme-toggle-icon-btn" id="theme-toggle-collapsed" aria-label="Toggle theme">
                @* Icon (e.g., bi-sun-fill or bi-moon-fill) will be set by JavaScript *@
                <i id="theme-toggle-icon" class="bi"></i>
            </button>
            @* --- End Theme Toggle Area --- *@
        </div>
    </aside>

    @* Main Content Wrapper *@
    <div class="content-wrapper" id="content-wrapper">
        <main role="main" class="p-4">
            @* Add padding directly to main *@
            @RenderBody()
        </main>
    </div>

    @* Sticky Music Player *@
    <div id="sticky-music-player" class="sticky-music-player d-none">
        <div class="music-player-container">
            @* Song Information *@
            <div class="player-info">
                <img id="player-album-art" src="" alt="Album Art" class="player-album-art">
                <div class="player-song-details">
                    <div id="player-song-title" class="player-song-title">Song Title</div>
                    <div id="player-artist-name" class="player-artist-name">Artist Name</div>
                </div>
            </div>

            @* Player Controls *@
            <div class="player-controls">
                <div class="control-buttons">
                    <button id="player-prev" class="control-btn" title="Previous">
                        <i class="bi bi-skip-start-fill"></i>
                    </button>
                    <button id="player-play-pause" class="control-btn play-pause-btn" title="Play/Pause">
                        <i class="bi bi-play-fill"></i>
                    </button>
                    <button id="player-next" class="control-btn" title="Next">
                        <i class="bi bi-skip-end-fill"></i>
                    </button>
                </div>
                
                <div class="progress-container">
                    <span id="player-current-time" class="time-display">0:00</span>
                    <div class="progress-bar-container">
                        <input type="range" id="player-progress" class="progress-bar" min="0" max="100" value="0">
                    </div>
                    <span id="player-duration" class="time-display">0:00</span>
                </div>
            </div>

            @* Volume and Additional Controls *@
            <div class="player-extras">
                <button id="player-queue" class="control-btn" title="Queue">
                    <i class="bi bi-list-ul"></i>
                </button>
                <div class="volume-container">
                    <button id="player-volume-btn" class="control-btn" title="Volume">
                        <i class="bi bi-volume-up-fill"></i>
                    </button>
                    <input type="range" id="player-volume" class="volume-bar" min="0" max="100" value="70">
                </div>
                <button id="player-repeat" class="control-btn" title="Repeat">
                    <i class="bi bi-arrow-repeat"></i>
                </button>
                <button id="player-shuffle" class="control-btn" title="Shuffle">
                    <i class="bi bi-shuffle"></i>
                </button>
                <button id="player-minimize" class="control-btn" title="Hide Player">
                    <i class="bi bi-chevron-down"></i>
                </button>
            </div>
        </div>

        @* Hidden Audio Element *@
        <audio id="music-audio" preload="metadata"></audio>
    </div>

    @* Bootstrap JS Bundle *@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @* API Utilities *@
    <script src="~/js/api-utils.js" asp-append-version="true"></script>
    @* Music Player JS *@
    <script src="~/js/music-player.js" asp-append-version="true"></script>
    @* Site Specific JS (Contains all script logic below) *@
    <script src="~/js/site.js" asp-append-version="true"></script>

    @* Render section for page-specific scripts *@
    @await RenderSectionAsync("Scripts", required: false)

    @* Update auth modal JavaScript *@
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const authModal = document.getElementById('authModal');
            const loginForm = document.getElementById('loginForm');
            const registerForm = document.getElementById('registerForm');
            const authAlert = document.getElementById('authAlert');
            const modalTitle = document.querySelector('#authModal .modal-title');

            // Initialize with register form visible
            switchAuthMode('register');

            // Handle auth mode switching
            document.querySelectorAll('.auth-switch').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const mode = this.dataset.authMode;
                    switchAuthMode(mode);
                });
            });

            // Handle modal open with specific mode
            authModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const mode = button.dataset.authMode || 'register'; // Default to register
                switchAuthMode(mode);
            });

            function switchAuthMode(mode) {
                if (mode === 'login') {
                    loginForm.classList.remove('d-none');
                    registerForm.classList.add('d-none');
                    modalTitle.textContent = 'Sign In';
                } else {
                    loginForm.classList.add('d-none');
                    registerForm.classList.remove('d-none');
                    modalTitle.textContent = 'Create Account';
                }
                authAlert.classList.add('d-none');
                
                // Hide form-specific alerts too
                document.getElementById('loginFormAlert').classList.add('d-none');
                document.getElementById('registerFormAlert').classList.add('d-none');
            }
            
            // Helper function to show auth errors in the common alert area
            function showAuthError(message) {
                authAlert.textContent = message;
                authAlert.classList.remove('d-none');
            }

            // Handle login form submission
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                authAlert.classList.add('d-none'); // Hide the common alert
                
                // Show loading button and hide submit button
                const loginSubmitBtn = document.getElementById('loginSubmitBtn');
                const loginLoadingBtn = document.getElementById('loginLoadingBtn');
                const loginFormAlert = document.getElementById('loginFormAlert');
                
                loginSubmitBtn.classList.add('d-none');
                loginLoadingBtn.classList.remove('d-none');
                loginFormAlert.classList.add('d-none');
                
                const formData = new FormData(this);
                
                try {
                    const response = await fetch('@Url.Action("Login", "Account")', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    console.log('Login response status:', response.status);
                    console.log('Login response headers:', [...response.headers.entries()]);

                    // Get the response content as text first
                    const responseText = await response.text();
                    console.log('Login response text:', responseText);
                    
                    // Try to parse as JSON if possible
                    let data;
                    try {
                        data = responseText ? JSON.parse(responseText) : { success: false, message: 'Empty response from server' };
                        console.log('Parsed JSON data:', data);
                    } catch (jsonError) {
                        console.error('Error parsing response JSON:', jsonError, 'Response text:', responseText);
                        data = { success: false, message: 'Error processing server response' };
                    }

                    // Handle the response
                    if (response.ok && data && data.success) {
                        window.location.reload();
                    } else {
                        // Show error message
                        let errorMsg = 'Login failed. ';
                        
                        if (data && data.message) {
                            errorMsg += data.message;
                        } else if (!response.ok) {
                            errorMsg += `Server returned ${response.status} ${response.statusText}`;
                        } else {
                            errorMsg += 'Please try again.';
                        }
                        
                        loginFormAlert.textContent = errorMsg;
                        loginFormAlert.classList.remove('d-none');
                        
                        // Reset buttons
                        loginSubmitBtn.classList.remove('d-none');
                        loginLoadingBtn.classList.add('d-none');
                    }
                } catch (error) {
                    console.error('Login request error:', error);
                    
                    // Show error message
                    loginFormAlert.textContent = 'An error occurred. Please try again.';
                    loginFormAlert.classList.remove('d-none');
                    
                    // Reset buttons
                    loginSubmitBtn.classList.remove('d-none');
                    loginLoadingBtn.classList.add('d-none');
                }
            });

            // Handle register form submission
            registerForm.addEventListener('submit', async function(e) {
                e.preventDefault(); // ALWAYS prevent default first thing
                
                // Clear all previous alerts
                authAlert.classList.add('d-none');
                
                // Show loading button and hide submit button
                const registerSubmitBtn = document.getElementById('registerSubmitBtn');
                const registerLoadingBtn = document.getElementById('registerLoadingBtn');
                const registerFormAlert = document.getElementById('registerFormAlert');
                
                registerSubmitBtn.classList.add('d-none');
                registerLoadingBtn.classList.remove('d-none');
                registerFormAlert.classList.add('d-none');
                
                // Function to reset buttons - we'll call this in all cases
                function resetButtons() {
                    registerSubmitBtn.classList.remove('d-none');
                    registerLoadingBtn.classList.add('d-none');
                }
                
                try {
                    // Validate password match
                    const password = document.getElementById('registerPassword').value;
                    const confirmPassword = document.getElementById('registerConfirmPassword').value;
                    if (password !== confirmPassword) {
                        registerFormAlert.textContent = 'Passwords do not match.';
                        registerFormAlert.classList.remove('d-none', 'alert-success');
                        registerFormAlert.classList.add('alert-danger');
                        resetButtons();
                        return;
                    }
                    
                    // Validate password length (client-side)
                    if (password.length < 6) {
                        registerFormAlert.textContent = 'Password must be at least 6 characters.';
                        registerFormAlert.classList.remove('d-none', 'alert-success');
                        registerFormAlert.classList.add('alert-danger');
                        resetButtons();
                        return;
                    }
                    
                    const formData = new FormData(this);
                    
                    // Use the MVC controller endpoint, not the API endpoint
                    const response = await fetch('@Url.Action("Register", "Account")', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    const responseText = await response.text();
                    console.log('Register response text:', responseText);
                    
                    let data;
                    try {
                        data = responseText ? JSON.parse(responseText) : { success: false, message: 'Empty response from server' };
                    } catch (jsonError) {
                        console.error('Error parsing register response JSON:', jsonError);
                        data = { success: false, message: 'Error processing server response' };
                    }
                    
                    if (response.ok && data && data.success) {
                        // Registration successful: show message and switch to login form
                        registerFormAlert.textContent = data.message || 'Registration successful! You can now sign in.';
                        registerFormAlert.classList.remove('d-none', 'alert-danger');
                        registerFormAlert.classList.add('alert-success');
                        resetButtons();
                        setTimeout(() => {
                            switchAuthMode('login');
                        }, 1200);
                    } else {
                        // Show error message
                        let errorMsg = data && data.message ? data.message : 'Registration failed. Please try again.';
                        registerFormAlert.textContent = errorMsg;
                        registerFormAlert.classList.remove('d-none', 'alert-success');
                        registerFormAlert.classList.add('alert-danger');
                        resetButtons();
                    }
                } catch (error) {
                    console.error('Register request error:', error);
                    registerFormAlert.textContent = 'An error occurred. Please try again.';
                    registerFormAlert.classList.remove('d-none', 'alert-success');
                    registerFormAlert.classList.add('alert-danger');
                    resetButtons();
                }
            });
        });
    </script>
</body>
</html>


# ==================================================================================================
# FILE: Views/Shared/_AlertMessages.cshtml
# ==================================================================================================
@* Shared partial for displaying alert messages *@

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["WarningMessage"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @TempData["WarningMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>
        @TempData["InfoMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @ViewBag.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (ViewBag.SuccessMessage != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill me-2"></i>
        @ViewBag.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @ViewBag.Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


# ==================================================================================================
# FILE: Views/Shared/_ValidationScriptsPartial.cshtml
# ==================================================================================================
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


# ==================================================================================================
# FILE: wwwroot/js/api-utils.js
# ==================================================================================================
/**
 * Enhanced API response handling utilities for the Music App
 * Provides consistent error handling for empty responses and false status scenarios
 */

window.MusicAppUtils = window.MusicAppUtils || {};

/**
 * Safely handles API responses with consistent error handling
 * @param {Response} response - The fetch response object
 * @param {string} operation - The operation being performed (for error messages)
 * @returns {Promise<Object>} - The parsed response data with success flag
 */
window.MusicAppUtils.handleApiResponse = async function(response, operation = 'operation') {
    let data;
    
    try {
        const responseText = await response.text();
        
        // Handle empty responses
        if (!responseText || responseText.trim() === '') {
            console.warn(`Empty response received for ${operation}`);
            return { 
                success: false, 
                message: 'Empty response from server',
                data: null
            };
        }
        
        // Try to parse as JSON
        try {
            data = JSON.parse(responseText);
            console.log(`${operation} response data:`, data);
        } catch (jsonError) {
            console.error(`Error parsing ${operation} response JSON:`, jsonError);
            return { 
                success: false, 
                message: 'Invalid response format from server',
                data: null
            };
        }
    } catch (fetchError) {
        console.error(`Error reading ${operation} response:`, fetchError);
        return {
            success: false,
            message: 'Failed to read server response',
            data: null
        };
    }
    
    // Handle null/undefined data
    if (data === null || data === undefined) {
        return { 
            success: false, 
            message: 'Empty response from server',
            data: null
        };
    }
    
    // Check for explicit success=false in response
    if (typeof data === 'object' && data.success === false) {
        console.warn(`${operation} returned success=false:`, data.message);
        return {
            success: false,
            message: data.message || data.Message || `${operation} operation failed`,
            data: data
        };
    }
    
    // For non-ok responses, extract error message
    if (!response.ok) {
        const errorMessage = typeof data === 'string' ? data : 
                           data.message || data.Message || 
                           `${operation} failed with status ${response.status}`;
        return {
            success: false,
            message: errorMessage,
            data: data
        };
    }
    
    return {
        success: true,
        message: data.message || 'Operation completed successfully',
        data: data
    };
};

/**
 * Enhanced alert display with better error message handling
 * @param {Element} alertElement - The alert element to show message in
 * @param {string|Object} message - The message to display
 * @param {string} type - The alert type (success, danger, etc.)
 */
window.MusicAppUtils.showAlert = function(alertElement, message, type) {
    if (!alertElement) {
        console.error('Alert element not found');
        return;
    }
    
    // Extract message from object if necessary
    let displayMessage = message;
    if (typeof message === 'object' && message !== null) {
        if (message.errors) {
            // Handle validation errors format
            const errorList = [];
            Object.keys(message.errors).forEach(key => {
                if (Array.isArray(message.errors[key])) {
                    message.errors[key].forEach(error => errorList.push(error));
                } else {
                    errorList.push(message.errors[key]);
                }
            });
            displayMessage = errorList.join(', ');
        } else {
            displayMessage = message.message || message.Message || 'An error occurred';
        }
    }
    
    alertElement.className = `alert alert-${type}`;
    alertElement.textContent = displayMessage;
    alertElement.style.display = 'block';
    
    // Auto-hide success messages after 5 seconds
    if (type === 'success') {
        setTimeout(() => {
            alertElement.style.display = 'none';
        }, 5000);
    }
};

/**
 * Performs safe API call with built-in error handling and user feedback
 * @param {string} url - The API endpoint URL
 * @param {Object} options - Fetch options (method, headers, body, etc.)
 * @param {Element} alertElement - Element to show error messages in
 * @param {string} operation - Operation name for logging and error messages
 * @returns {Promise<Object>} - Result with success flag and data
 */
window.MusicAppUtils.safeApiCall = async function(url, options = {}, alertElement = null, operation = 'API call') {
    try {
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        const result = await window.MusicAppUtils.handleApiResponse(response, operation);
        
        if (!result.success && alertElement) {
            window.MusicAppUtils.showAlert(alertElement, result.message, 'danger');
        }
        
        return result;
    } catch (error) {
        console.error(`Network error in ${operation}:`, error);
        
        let errorMessage = `An error occurred during ${operation}.`;
        
        if (!navigator.onLine) {
            errorMessage = 'You appear to be offline. Please check your internet connection and try again.';
        } else if (error.name === 'TypeError' && error.message === 'Failed to fetch') {
            errorMessage = 'Cannot connect to the server. Please ensure the server is running and accessible.';
        } else if (error.message) {
            errorMessage += ' ' + error.message;
        }
        
        if (alertElement) {
            window.MusicAppUtils.showAlert(alertElement, errorMessage, 'danger');
        }
        
        return {
            success: false,
            message: errorMessage,
            data: null
        };
    }
};

/**
 * Validates that response data contains expected properties for collection operations
 * @param {Object} data - The response data to validate
 * @param {Array<string>} requiredProps - Required properties for the data
 * @returns {Object} - Validation result with success flag and message
 */
window.MusicAppUtils.validateResponseData = function(data, requiredProps = []) {
    if (!data) {
        return {
            success: false,
            message: 'No data received from server'
        };
    }
    
    // Check for required properties
    for (const prop of requiredProps) {
        if (!(prop in data)) {
            return {
                success: false,
                message: `Invalid response format: missing ${prop} property`
            };
        }
    }
    
    // For paginated responses, ensure Data is an array
    if (data.Data && !Array.isArray(data.Data)) {
        return {
            success: false,
            message: 'Invalid response format: Data should be an array'
        };
    }
    
    return {
        success: true,
        message: 'Response data is valid'
    };
};

console.log('MusicApp enhanced error handling utilities loaded');


# ==================================================================================================
# FILE: wwwroot/js/site.js
# ==================================================================================================
// --- site.js ---

document.addEventListener('DOMContentLoaded', function () {
    // --- Test API Connectivity ---
    const API_BASE_URL = 'http://localhost:5117'; // Make sure this matches your ApiSettings.BaseUrl
    
    // Debug API connectivity
    console.log('Testing API connectivity to:', API_BASE_URL);
    fetch(API_BASE_URL + '/api')
        .then(response => {
            if (response.ok) {
                console.log('API server is accessible!');
                return response.json();
            }
            throw new Error('API server returned status: ' + response.status);
        })
        .then(data => {
            console.log('API response data:', data.length, 'endpoints available');
        })
        .catch(error => {
            console.error('API connectivity test failed:', error);
            // Create a warning banner at the top of the page
            const banner = document.createElement('div');
            banner.className = 'alert alert-warning alert-dismissible fade show';
            banner.style.margin = '0';
            banner.style.borderRadius = '0';
            banner.innerHTML = `
                <strong>API Server Connection Issue:</strong> Cannot connect to the API server at ${API_BASE_URL}. 
                Registration and login functionality may not work properly.
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.insertBefore(banner, document.body.firstChild);
        });

    // --- Helper Functions ---
    
    /**
     * Safely handles API responses with consistent error handling
     * @param {Response} response - The fetch response object
     * @param {string} operation - The operation being performed (for error messages)
     * @returns {Promise<Object>} - The parsed response data
     */
    async function handleApiResponse(response, operation = 'operation') {
        let data;
        
        try {
            const responseText = await response.text();
            
            // Handle empty responses
            if (!responseText || responseText.trim() === '') {
                console.warn(`Empty response received for ${operation}`);
                return { 
                    success: false, 
                    message: 'Empty response from server' 
                };
            }
            
            // Try to parse as JSON
            data = JSON.parse(responseText);
            console.log(`${operation} response data:`, data);
        } catch (jsonError) {
            console.error(`Error parsing ${operation} response JSON:`, jsonError);
            return { 
                success: false, 
                message: 'Invalid response format from server' 
            };
        }
        
        // Handle null/undefined data
        if (!data) {
            return { 
                success: false, 
                message: 'Empty response from server' 
            };
        }
        
        // Check for explicit success=false in response
        if (typeof data === 'object' && data.success === false) {
            console.warn(`${operation} returned success=false:`, data.message);
            return {
                success: false,
                message: data.message || data.Message || `${operation} operation failed`
            };
        }
        
        // For non-ok responses, extract error message
        if (!response.ok) {
            const errorMessage = typeof data === 'string' ? data : 
                               data.message || data.Message || 
                               `${operation} failed with status ${response.status}`;
            return {
                success: false,
                message: errorMessage
            };
        }
        
        return {
            success: true,
            data: data
        };
    }

    /**
     * Shows alert message with better error message handling
     * @param {Element} alertElement - The alert element to show message in
     * @param {string|Object} message - The message to display
     * @param {string} type - The alert type (success, danger, etc.)
     */
    function showAlert(alertElement, message, type) {
        if (!alertElement) {
            console.error('Alert element not found');
            return;
        }
        
        // Extract message from object if necessary
        let displayMessage = message;
        if (typeof message === 'object') {
            displayMessage = message.message || message.Message || 'An error occurred';
        }
        
        alertElement.className = `alert alert-${type}`;
        alertElement.textContent = displayMessage;
        alertElement.style.display = 'block';
        
        // Auto-hide success messages after 5 seconds
        if (type === 'success') {
            setTimeout(() => {
                alertElement.style.display = 'none';
            }, 5000);
        }
    }

    // --- Element References ---
    const sidebar = document.getElementById('sidebar');
    const body = document.body;
    const sidebarToggle = document.getElementById('sidebar-toggle'); // Desktop toggle
    const mobileSidebarToggle = document.getElementById('mobile-sidebar-toggle'); // Mobile toggle
    const themeToggleCheckbox = document.getElementById('theme-toggle-checkbox'); // Expanded slider checkbox
    const themeToggleLabel = document.getElementById('theme-switch-label'); // Expanded slider label
    const themeToggleIconButton = document.getElementById('theme-toggle-collapsed'); // Collapsed icon button
    const themeToggleIcon = document.getElementById('theme-toggle-icon'); // Icon within the button

    const MOBILE_BREAKPOINT = 992; // Corresponds to d-lg-none/d-lg-block


    // --- Sidebar State Logic ---
    function applySidebarState(collapse) {
        if (!sidebar || !body) return; // Ensure elements exist

        const isMobile = window.innerWidth < MOBILE_BREAKPOINT;

        
        if (isMobile) {
            // Mobile: Use overlay with 'active-mobile' class
            if (collapse) {
                sidebar.classList.remove('active-mobile');
            } else {
                sidebar.classList.add('active-mobile');
            }
            // Reset desktop classes/styles
            body.classList.remove('sidebar-collapsed');
            sidebar.classList.remove('collapsed'); // Remove desktop collapsed class if present
        } else {
            // Desktop: Use push content with 'collapsed' class on sidebar and body
            if (collapse) {
                sidebar.classList.add('collapsed');
                body.classList.add('sidebar-collapsed');
                localStorage.setItem('sidebarCollapsed', 'true');
            } else {
                sidebar.classList.remove('collapsed');
                body.classList.remove('sidebar-collapsed');
                localStorage.setItem('sidebarCollapsed', 'false');
            }
            // Reset mobile class
            sidebar.classList.remove('active-mobile');
        }
    }

    function toggleDesktopSidebar() {
        if (!sidebar) return;
        const isCurrentlyCollapsed = sidebar.classList.contains('collapsed');
        applySidebarState(!isCurrentlyCollapsed); // Toggle state
    }

    function toggleMobileSidebar() {
        if (!sidebar) return;
        const isCurrentlyActive = sidebar.classList.contains('active-mobile');
        applySidebarState(isCurrentlyActive); // If active, collapse it; if inactive, expand it.
    }

    // --- Theme Toggle Logic ---
    function applyTheme(isDark) {
        const currentTheme = isDark ? 'dark' : 'light';
        // Set theme attribute on root element
        document.documentElement.setAttribute('data-bs-theme', currentTheme);
        // Save preference
        localStorage.setItem('theme', currentTheme);

        // Update slider checkbox state
        if (themeToggleCheckbox) {
            themeToggleCheckbox.checked = isDark;
        }
        // Update slider label text
        if (themeToggleLabel) {
            themeToggleLabel.textContent = isDark ? 'Dark Mode' : 'Light Mode';
        }
        // Update icon button's icon and aria-label
        if (themeToggleIcon) {
            // Show SUN icon if currently DARK (indicates click switches to light)
            // Show MOON icon if currently LIGHT (indicates click switches to dark)
            themeToggleIcon.className = isDark ? 'bi bi-sun-fill' : 'bi bi-moon-fill';
        }
        if (themeToggleIconButton) {
            themeToggleIconButton.setAttribute('aria-label', isDark ? 'Switch to light theme' : 'Switch to dark theme');
        }
    }

    // --- Initial Load Logic ---

    // 1. Apply initial theme based on localStorage or default (dark)
    const savedTheme = localStorage.getItem('theme') || 'dark';
    applyTheme(savedTheme === 'dark'); // Applies theme & updates controls

    // 2. Apply initial sidebar state based on localStorage and screen size
    let initialSidebarCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
    if (window.innerWidth < MOBILE_BREAKPOINT) {
        initialSidebarCollapsed = true; // Default to collapsed (hidden overlay) on mobile load
    }
    // Apply state without transition on initial load to prevent flicker
    if (sidebar) sidebar.style.transition = 'none';
    if (body) body.style.transition = 'none';
    applySidebarState(initialSidebarCollapsed);
    // Re-enable transitions shortly after load
    setTimeout(() => {
        if (sidebar) sidebar.style.transition = '';
        if (body) body.style.transition = '';
    }, 50);


    // --- Event Listeners ---

    // Desktop Sidebar Toggle
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', toggleDesktopSidebar);
    }

    // Mobile Sidebar Toggle
    if (mobileSidebarToggle) {
        mobileSidebarToggle.addEventListener('click', toggleMobileSidebar);
    }

    // Theme Toggle (Slider Checkbox)
    if (themeToggleCheckbox) {
        themeToggleCheckbox.addEventListener('change', function () {
            applyTheme(this.checked);
        });
        // Also allow clicking the wrapper (excluding the input itself) to toggle
        const themeWrapper = document.getElementById('theme-switch-expanded');
        if (themeWrapper) {
            themeWrapper.addEventListener('click', (event) => {
                // Only trigger if the click wasn't directly on the input/slider elements
                if (event.target.closest('.theme-switch') === null) {
                    themeToggleCheckbox.click();
                }
            });
        }
    }

    // Theme Toggle (Collapsed Icon Button)
    if (themeToggleIconButton) {
        themeToggleIconButton.addEventListener('click', function () {
            const isCurrentlyDark = document.documentElement.getAttribute('data-bs-theme') === 'dark';
            applyTheme(!isCurrentlyDark); // Apply the opposite theme
        });
    }

    // Close mobile sidebar overlay if clicking outside
    document.addEventListener('click', function (event) {
        if (window.innerWidth < MOBILE_BREAKPOINT && sidebar && sidebar.classList.contains('active-mobile')) {
            const isClickInsideSidebar = sidebar.contains(event.target);
            const isClickOnToggler = mobileSidebarToggle && mobileSidebarToggle.contains(event.target);

            // Check if click is on any part of the theme toggle components
            const isClickOnThemeCheckbox = themeToggleCheckbox && themeToggleCheckbox.contains(event.target);
            const isClickOnThemeIconBtn = themeToggleIconButton && themeToggleIconButton.contains(event.target);
            const isClickOnThemeWrapper = document.getElementById('theme-switch-expanded')?.contains(event.target);

            // If click is outside sidebar AND outside toggler AND outside theme controls
            if (!isClickInsideSidebar && !isClickOnToggler && !isClickOnThemeCheckbox && !isClickOnThemeIconBtn && !isClickOnThemeWrapper) {
                applySidebarState(true); // Collapse mobile sidebar
            }
        }
    });

    // Re-apply sidebar state on resize to switch between push/overlay correctly
    window.addEventListener('resize', () => {
        let shouldBeCollapsed;
        // Determine the *intended* state based on current window size and stored preference
        if (window.innerWidth < MOBILE_BREAKPOINT) {
            // On mobile, the overlay is considered 'collapsed' when hidden
            shouldBeCollapsed = true; // Default to hidden on resize to mobile (unless active)
            if (sidebar && sidebar.classList.contains('active-mobile')) {
                shouldBeCollapsed = false; // Keep it open if it was already active
            }
        } else {
            // On desktop, use the stored preference
            shouldBeCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
        }
        // Use timeout to debounce resize events slightly
        setTimeout(() => applySidebarState(shouldBeCollapsed), 50);
    });

    // --- Authentication Handling ---
    
    // Form elements
    const registerForm = document.getElementById('registerForm');
    const registerAlert = document.getElementById('registerFormAlert');
    const registerSubmitBtn = document.getElementById('registerSubmitBtn');
    const registerLoadingBtn = document.getElementById('registerLoadingBtn');
    
    const loginForm = document.getElementById('loginForm');
    const loginAlert = document.getElementById('loginFormAlert');
    const loginSubmitBtn = document.getElementById('loginSubmitBtn');
    const loginLoadingBtn = document.getElementById('loginLoadingBtn');
    
    // Reset forms when modal is closed
    const authModal = document.getElementById('authModal');
    if (authModal) {
        authModal.addEventListener('hidden.bs.modal', function() {
            // Reset register form
            if (registerForm) {
                registerForm.reset();
                registerAlert.classList.add('d-none');
                registerSubmitBtn.classList.remove('d-none');
                registerLoadingBtn.classList.add('d-none');
            }
            
            // Reset login form
            if (loginForm) {
                loginForm.reset();
                loginAlert.classList.add('d-none');
                loginSubmitBtn.classList.remove('d-none');
                loginLoadingBtn.classList.add('d-none');
            }
        });
    }
    
    // Register Form Handling
    if (registerForm) {
        registerForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validate passwords match
            const password = document.getElementById('registerPassword').value;
            const confirmPassword = document.getElementById('registerConfirmPassword').value;
            
            if (password !== confirmPassword) {
                showAlert(registerAlert, 'Passwords do not match', 'danger');
                return;
            }
            
            // Switch to loading state
            registerSubmitBtn.classList.add('d-none');
            registerLoadingBtn.classList.remove('d-none');
            
            // Get form data
            const formData = {
                firstName: document.getElementById('registerFirstName').value,
                lastName: document.getElementById('registerLastName').value,
                username: document.getElementById('registerUsername').value,
                email: document.getElementById('registerEmail').value,
                password: password,
                confirmPassword: confirmPassword
            };
            
            try {
                console.log('Sending registration request to:', `${API_BASE_URL}/api/Auth/register`);
                console.log('With data:', JSON.stringify(formData, null, 2));
                
                // Call the register API directly
                const response = await fetch(`${API_BASE_URL}/api/Auth/register`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('Registration response status:', response.status);
                  let data;
                try {
                    data = await response.json();
                    console.log('Registration response data:', data);
                } catch (jsonError) {
                    console.error('Error parsing registration response JSON:', jsonError);
                    data = { 
                        success: false, 
                        message: 'Empty response from server' 
                    };
                }
                
                // Handle empty or invalid response structure
                if (!data) {
                    data = { 
                        success: false, 
                        message: 'Empty response from server' 
                    };
                }
                
                if (!response.ok) {
                    // Show error message - handle both string and object responses
                    const errorMessage = typeof data === 'string' ? data : 
                                       data.message || data.Message || 
                                       `Registration failed with status ${response.status}`;
                    showAlert(registerAlert, errorMessage, 'danger');
                    
                    // Switch back to submit button
                    registerSubmitBtn.classList.remove('d-none');
                    registerLoadingBtn.classList.add('d-none');
                    return;
                }
                
                // Handle successful response with false success status
                if (data && typeof data === 'object' && data.success === false) {
                    const errorMessage = data.message || data.Message || 'Registration operation returned success=false';
                    showAlert(registerAlert, errorMessage, 'danger');
                    
                    // Switch back to submit button
                    registerSubmitBtn.classList.remove('d-none');
                    registerLoadingBtn.classList.add('d-none');
                    return;
                }
                
                // Registration successful
                showAlert(registerAlert, 'Registration successful!', 'success');
                
                // Store the token in localStorage
                if (data.token) {
                    localStorage.setItem('jwt_token', data.token);
                }
                if (data.refreshToken) {
                    localStorage.setItem('refresh_token', data.refreshToken);
                }
                if (data.user) {
                    localStorage.setItem('user_info', JSON.stringify(data.user));
                }
                
                // Redirect to dashboard after a short delay
                setTimeout(() => {
                    window.location.href = document.querySelector('input[name="ReturnUrl"]').value || '/Account/Dashboard';
                }, 1000);
                
            } catch (error) {
                console.error('Registration error:', error);
                let errorMessage = 'An error occurred during registration.';
                
                if (error.message) {
                    errorMessage += ' ' + error.message;
                    console.error('Error message:', error.message);
                }
                
                if (error.stack) {
                    console.error('Error stack:', error.stack);
                }
                
                if (!navigator.onLine) {
                    errorMessage = 'You appear to be offline. Please check your internet connection and try again.';
                }
                
                // Try to get more information if it's a network error
                if (error.name === 'TypeError' && error.message === 'Failed to fetch') {
                    errorMessage = 'Cannot connect to the server. Please ensure the API server is running and accessible.';
                    
                    // Check if API server is running by making a simple fetch request
                    fetch(`${API_BASE_URL}/api`)
                        .then(response => {
                            if (response.ok) {
                                console.log('API server is running but registration endpoint may have issues');
                            }
                        })
                        .catch(e => {
                            console.error('API server connectivity check failed:', e);
                            errorMessage = 'Cannot connect to the API server. Please ensure it is running at ' + API_BASE_URL;
                        });
                }
                
                showAlert(registerAlert, errorMessage, 'danger');
                
                // Switch back to submit button
                registerSubmitBtn.classList.remove('d-none');
                registerLoadingBtn.classList.add('d-none');
            }
        });
    }
    
    // Login Form Handling
    if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Switch to loading state
            loginSubmitBtn.classList.add('d-none');
            loginLoadingBtn.classList.remove('d-none');
            
            // Get form data
            const formData = {
                identifier: document.getElementById('loginIdentifier').value,
                password: document.getElementById('loginPassword').value,
                rememberMe: document.getElementById('loginRememberMe').checked
            };
            
            try {
                console.log('Sending login request to:', `${API_BASE_URL}/api/Auth/login`);
                console.log('With data:', JSON.stringify(formData, null, 2));
                
                // Call the login API directly
                const response = await fetch(`${API_BASE_URL}/api/Auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('Login response status:', response.status);
                  let data;
                try {
                    data = await response.json();
                    console.log('Login response data:', data);
                } catch (jsonError) {
                    console.error('Error parsing login response JSON:', jsonError);
                    data = { 
                        success: false, 
                        message: 'Empty response from server' 
                    };
                }
                
                // Handle empty or invalid response structure
                if (!data) {
                    data = { 
                        success: false, 
                        message: 'Empty response from server' 
                    };
                }
                
                if (!response.ok) {
                    // Show error message - handle both string and object responses
                    const errorMessage = typeof data === 'string' ? data : 
                                       data.message || data.Message || 
                                       `Login failed with status ${response.status}`;
                    showAlert(loginAlert, errorMessage, 'danger');
                    
                    // Switch back to submit button
                    loginSubmitBtn.classList.remove('d-none');
                    loginLoadingBtn.classList.add('d-none');
                    return;
                }
                
                // Handle successful response with false success status
                if (data && typeof data === 'object' && data.success === false) {
                    const errorMessage = data.message || data.Message || 'Login operation returned success=false';
                    showAlert(loginAlert, errorMessage, 'danger');
                    
                    // Switch back to submit button
                    loginSubmitBtn.classList.remove('d-none');
                    loginLoadingBtn.classList.add('d-none');
                    return;
                }
                
                // Login successful
                showAlert(loginAlert, 'Login successful!', 'success');
                
                // Store the token in localStorage
                if (data.token) {
                    localStorage.setItem('jwt_token', data.token);
                }
                if (data.refreshToken) {
                    localStorage.setItem('refresh_token', data.refreshToken);
                }
                if (data.user) {
                    localStorage.setItem('user_info', JSON.stringify(data.user));
                }
                
                // Redirect to dashboard after a short delay
                setTimeout(() => {
                    window.location.href = document.querySelector('#loginForm input[name="ReturnUrl"]').value || '/Account/Dashboard';
                }, 1000);
                
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'An error occurred during login.';
                
                if (error.message) {
                    errorMessage += ' ' + error.message;
                }
                
                if (!navigator.onLine) {
                    errorMessage = 'You appear to be offline. Please check your internet connection and try again.';
                }
                
                showAlert(loginAlert, errorMessage, 'danger');
                
                // Switch back to submit button
                loginSubmitBtn.classList.remove('d-none');
                loginLoadingBtn.classList.add('d-none');
            }
        });
    }
    
    // Helper function to show alerts
    function showAlert(alertElement, message, type) {
        if (alertElement) {
            // Clear previous alerts
            alertElement.innerHTML = '';
            
            // Handle different message types
            if (typeof message === 'object' && message !== null) {
                // If it's an object with errors property (common API validation response)
                if (message.errors) {
                    const errorList = document.createElement('ul');
                    errorList.className = 'mb-0 ps-3';
                    
                    // Collect all error messages
                    Object.keys(message.errors).forEach(key => {
                        message.errors[key].forEach(error => {
                            const li = document.createElement('li');
                            li.textContent = error;
                            errorList.appendChild(li);
                        });
                    });
                    
                    alertElement.className = `alert alert-${type}`;
                    alertElement.classList.remove('d-none');
                    
                    // Add title if available
                    if (message.title) {
                        const strong = document.createElement('strong');
                        strong.textContent = message.title;
                        alertElement.appendChild(strong);
                        alertElement.appendChild(document.createElement('br'));
                    }
                    
                    alertElement.appendChild(errorList);
                } else {
                    // Just use string representation or message property
                    alertElement.textContent = message.message || JSON.stringify(message);
                    alertElement.className = `alert alert-${type}`;
                    alertElement.classList.remove('d-none');
                }
            } else {
                // Simple string message
                alertElement.textContent = message;
                alertElement.className = `alert alert-${type}`;
                alertElement.classList.remove('d-none');
            }
            
            // Auto-hide success alerts after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    alertElement.classList.add('d-none');
                }, 5000);
            }
        }
    }

}); // End DOMContentLoaded


# ==================================================================================================
# FILE: Program.cs
# ==================================================================================================
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.Cookies;
using MusicApp.Data;
using MusicApp.Services;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Add in-memory database
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseInMemoryDatabase("MusicAppDb"));

// Add HttpClient for API communication
builder.Services.AddHttpClient("MusicApi");

// Add HttpContextAccessor
builder.Services.AddHttpContextAccessor();

// Register application services
builder.Services.AddScoped<ApiService>();
builder.Services.AddScoped<AuthService>();
builder.Services.AddScoped<FileUploadService>();

// Add authentication
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
        options.AccessDeniedPath = "/Account/AccessDenied";
        options.Cookie.Name = "MusicApp.Auth";
        options.Cookie.HttpOnly = true;
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always; // Use Always in production
        options.Cookie.SameSite = SameSiteMode.Lax;
        options.ExpireTimeSpan = TimeSpan.FromDays(7);
        options.SlidingExpiration = true;
        options.Cookie.IsEssential = true;
        options.Events = new CookieAuthenticationEvents
        {
            OnRedirectToLogin = context =>
            {
                if (context.Request.Path.StartsWithSegments("/api"))
                {
                    context.Response.StatusCode = 401;
                    return Task.CompletedTask;
                }
                context.Response.Redirect(context.RedirectUri);
                return Task.CompletedTask;
            }
        };
    });

// Configure API settings
builder.Services.Configure<ApiSettings>(builder.Configuration.GetSection("ApiSettings"));

var app = builder.Build();

// Seed the database
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var dbContext = services.GetRequiredService<ApplicationDbContext>();
    
    // Make sure the database is created and seeded
    dbContext.Database.EnsureCreated();
}

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

// Add proxy middleware for /uploads/* requests
app.Use(async (context, next) =>
{
    if (context.Request.Path.StartsWithSegments("/uploads"))
    {
        var httpClient = context.RequestServices.GetRequiredService<IHttpClientFactory>().CreateClient();
        var backendUrl = $"http://localhost:5117{context.Request.Path}{context.Request.QueryString}";
        
        try
        {
            var response = await httpClient.GetAsync(backendUrl);
            
            if (response.IsSuccessStatusCode)
            {
                context.Response.StatusCode = (int)response.StatusCode;
                context.Response.ContentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
                
                // Copy response headers
                foreach (var header in response.Headers)
                {
                    context.Response.Headers.TryAdd(header.Key, header.Value.ToArray());
                }
                
                // Copy content headers
                foreach (var header in response.Content.Headers)
                {
                    if (header.Key != "Content-Type") // Already set above
                    {
                        context.Response.Headers.TryAdd(header.Key, header.Value.ToArray());
                    }
                }
                
                // Stream the content
                await response.Content.CopyToAsync(context.Response.Body);
                return;
            }
            else
            {
                context.Response.StatusCode = (int)response.StatusCode;
                await context.Response.WriteAsync($"Backend returned: {response.StatusCode}");
                return;
            }
        }
        catch (Exception ex)
        {
            context.Response.StatusCode = 502; // Bad Gateway
            await context.Response.WriteAsync($"Proxy error: {ex.Message}");
            return;
        }
    }
    
    await next();
});

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();


# ==================================================================================================
# FILE: appsettings.json
# ==================================================================================================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ApiSettings": {
    "BaseUrl": "http://localhost:5117"
  }
}


# ==================================================================================================
# FILE: appsettings.Development.json
# ==================================================================================================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}


# ==================================================================================================
# FILE: Models/User.cs
# ==================================================================================================
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace MusicApp.Models
{
    public class User
    {
        public int Id { get; set; }

        [Required]
        [StringLength(50)]
        public string FirstName { get; set; }

        [Required]
        [StringLength(50)]
        public string LastName { get; set; }

        [Required]
        [StringLength(50)]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        [StringLength(100)]
        public string Email { get; set; }

        [Required]
        [StringLength(100)]
        public string PasswordHash { get; set; }

        public string ProfileImageUrl { get; set; }

        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? LastLoginAt { get; set; }

        // Navigation properties
        public ICollection<Playlist> Playlists { get; set; } = new List<Playlist>();
        public ICollection<UserRole> UserRoles { get; set; } = new List<UserRole>();
        public ICollection<UserFollower> Followers { get; set; } = new List<UserFollower>();
        public ICollection<UserFollower> Following { get; set; } = new List<UserFollower>();
        public ICollection<UserFavorite> Favorites { get; set; } = new List<UserFavorite>();
    }
} 

# ==================================================================================================
# FILE: Models/DTOs/CommonDTOs.cs
# ==================================================================================================
using System;
using System.Collections.Generic;

namespace MusicApp.Models.DTOs
{
    public class PagedResponse<T>
    {
        public List<T> Data { get; set; } = new List<T>();
        public int TotalCount { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
    }
    
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public T? Data { get; set; }
    }
      public class ArtistDto
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Bio { get; set; }
        public string? ImageUrl { get; set; }
        public string? Country { get; set; }
        public string? Genre { get; set; }
        public DateTime? FormedDate { get; set; }
        public int? MonthlyListeners { get; set; }
        public bool IsActive { get; set; } // Added for admin edit
        public bool IsPrimaryArtist { get; set; } = false; // Added for multiple artist support
        public List<AlbumDto> Albums { get; set; } = new List<AlbumDto>();
        public List<SongDto> Songs { get; set; } = new List<SongDto>();
        public int FollowersCount { get; set; }
    }
    
    public class ArtistDetailDto : ArtistDto
    {
        public new List<AlbumDto> Albums { get; set; } = new List<AlbumDto>();
    }    public class AlbumDto
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public int ArtistId { get; set; }
        public string? ArtistName { get; set; } // Made nullable
        public string? CoverImageUrl { get; set; }
        public int? Year { get; set; }
        public string? Genre { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public int? TotalTracks { get; set; }
        public string? Description { get; set; } // Added
        public TimeSpan? Duration { get; set; } // Added
        public bool IsLiked { get; set; } // Added to store like status
        public List<SongDto> Songs { get; set; } = new List<SongDto>();
        // Additional properties for compatibility
        public int TrackCount => TotalTracks ?? 0;
        public double TotalDuration => Duration?.TotalMinutes ?? 0.0;
    }
      public class AlbumUpdateDTO
    {
        public string? Title { get; set; }
        public int? ArtistId { get; set; }
        public int? Year { get; set; }
        public string? Description { get; set; }
        public string? Genre { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public int? TotalTracks { get; set; }
        public TimeSpan? Duration { get; set; }
    }public class SongDto
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public int? ArtistId { get; set; } // Keep for backward compatibility
        public string? ArtistName { get; set; } // Keep for backward compatibility
        public List<ArtistDto>? Artists { get; set; } = new List<ArtistDto>(); // New field for multiple artists
        public int? AlbumId { get; set; }
        public string? AlbumTitle { get; set; }
        public TimeSpan? Duration { get; set; }
        public string? AudioUrl { get; set; }
        public string? CoverImageUrl { get; set; }
        public int? TrackNumber { get; set; }
        public string? Genre { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public int PlayCount { get; set; }
        public bool IsFavorited { get; set; } = false;
    }    public class SongUpdateDTO
    {
        public string? Title { get; set; }
        public int? ArtistId { get; set; } // Keep for backward compatibility
        public List<int>? ArtistIds { get; set; } // New field for multiple artists
        public int? PrimaryArtistId { get; set; } // To designate primary artist
        public int? AlbumId { get; set; }
        public TimeSpan? Duration { get; set; }
        public string? AudioUrl { get; set; }
        public string? CoverImageUrl { get; set; }
        public int? TrackNumber { get; set; }
        public string? Genre { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public int? PlayCount { get; set; }
    }

    public class SongCreateDTO
    {
        public string Title { get; set; } = string.Empty;
        public int? ArtistId { get; set; } // Keep for backward compatibility
        public List<int>? ArtistIds { get; set; } // New field for multiple artists
        public int? PrimaryArtistId { get; set; } // To designate primary artist
        public int? AlbumId { get; set; }
        public TimeSpan Duration { get; set; }
        public int? TrackNumber { get; set; }
        public string? Genre { get; set; }
        public DateTime? ReleaseDate { get; set; }
    }
      public class PlaylistDto
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public int UserId { get; set; }
        public string? Username { get; set; }
        public string? CoverImageUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public int SongCount { get; set; }
        public bool IsPublic { get; set; }
        public List<SongDto> Songs { get; set; } = new List<SongDto>();
    }
    
    public class PlaylistDetailDto : PlaylistDto
    {
        public new List<PlaylistSongDto> Songs { get; set; } = new List<PlaylistSongDto>();
    }      public class PlaylistSongDto
    {
        public int SongId { get; set; }
        public string? Title { get; set; }
        public string? ArtistName { get; set; }
        public string? AlbumTitle { get; set; }
        public TimeSpan? Duration { get; set; }
        public string DurationString => Duration.HasValue ? $"{(int)Duration.Value.TotalMinutes}:{Duration.Value.Seconds:D2}" : "--:--";
        public string? CoverImageUrl { get; set; }
        public string? AudioUrl { get; set; }
        public int Order { get; set; }
        public DateTime AddedAt { get; set; }
    }
    
    public class SearchResultsDto
    {
        public List<SongDto> Songs { get; set; } = new List<SongDto>();
        public List<ArtistDto> Artists { get; set; } = new List<ArtistDto>();
        public List<AlbumDto> Albums { get; set; } = new List<AlbumDto>();
        public List<PlaylistDto> Playlists { get; set; } = new List<PlaylistDto>();
    }
      public class UserDto
    {
        public int Id { get; set; }
        public string? Username { get; set; }
        public string? Email { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? ProfileImageUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public int PlaylistsCount { get; set; }
        public int FollowersCount { get; set; }
        public int FollowingCount { get; set; }
        public List<string> Roles { get; set; } = new List<string>();
    }
    
    public class SongListItemDto
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string ArtistName { get; set; }
        public string AlbumTitle { get; set; }
        public int Duration { get; set; }
        public string CoverImageUrl { get; set; }
    }
      public class ArtistCreateDTO
    {
        public string Name { get; set; } = string.Empty;
        public string? Bio { get; set; }
        public string? Country { get; set; }
        public string? Genre { get; set; }
        public DateTime? FormedDate { get; set; }
        public int? MonthlyListeners { get; set; }
        public bool? IsActive { get; set; }
    }

    public class ArtistUpdateDTO
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Bio { get; set; }
        public string? Country { get; set; }
        public string? Genre { get; set; }
        public DateTime? FormedDate { get; set; }
        public int? MonthlyListeners { get; set; }
        public string? ImageUrl { get; set; }
        public bool? IsActive { get; set; }
    }
}
