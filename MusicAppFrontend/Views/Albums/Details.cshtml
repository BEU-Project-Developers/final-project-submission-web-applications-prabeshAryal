@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Html
@using System.Text.Json
@model MusicApp.Models.DTOs.AlbumDto
@{
    ViewData["Title"] = $"{Model.Title} - Album";
}

@Html.AntiForgeryToken()

<style>
    .album-header {
        display: flex;
        margin-bottom: 2rem;
        border-radius: 12px;
        overflow: hidden;
        background-color: var(--ytm-bg-secondary);
    }

    .album-cover {
        flex: 0 0 300px;
        height: 300px;
        object-fit: cover;
    }

    .album-info {
        flex: 1;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .album-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--ytm-text-primary);
        margin-bottom: 0.5rem;
    }

    .album-artist {
        font-size: 1.2rem;
        color: var(--ytm-text-secondary);
        margin-bottom: 1rem;
    }

    .album-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        color: var(--ytm-text-secondary);
        font-size: 0.9rem;
    }

    .album-description {
        color: var(--ytm-text-secondary);
        margin-bottom: 1.5rem;
        max-width: 80ch;
        line-height: 1.6;
    }

    .album-actions {
        display: flex;
        gap: 1rem;
    }

    .btn-play {
        background-color: var(--ytm-accent-red);
        color: var(--ytm-text-primary);
        border: none;
        border-radius: 20px;
        padding: 0.4rem 1.2rem;
        font-weight: 500;
    }

    .btn-play:hover {
        background-color: #cc0000;
        color: var(--ytm-text-primary);
    }

    .btn-action {
        color: var(--ytm-text-secondary);
        border: 1px solid var(--ytm-border-color);
        background: transparent;
        border-radius: 20px;
        padding: 0.4rem 1.2rem;
    }

    .btn-action:hover {
        background-color: var(--ytm-bg-tertiary);
        color: var(--ytm-text-primary);
    }

    /* Track list styling */
    .tracks-section {
        background-color: var(--ytm-bg-secondary);
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid var(--ytm-border-color);
    }

    .tracks-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--ytm-border-color);
    }

    .tracks-header h3 {
        color: var(--ytm-text-primary);
        margin-bottom: 0;
        font-weight: 500;
    }

    .track-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .track-item {
        display: flex;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--ytm-border-color);
    }

    .track-item:last-child {
        border-bottom: none;
    }

    .track-number {
        flex: 0 0 40px;
        color: var(--ytm-text-secondary);
        text-align: center;
    }

    .track-info {
        flex: 1;
    }

    .track-title {
        color: var(--ytm-text-primary);
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .track-artist {
        color: var(--ytm-text-secondary);
        font-size: 0.9rem;
    }

    .track-duration {
        flex: 0 0 60px;
        color: var(--ytm-text-secondary);
        text-align: right;
    }

    .track-actions {
        flex: 0 0 100px;
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .track-actions .btn {
        color: var(--ytm-text-secondary);
        background: none;
        border: none;
        font-size: 1.1rem;
        padding: 0.25rem;
    }

    .track-actions .btn:hover {
        color: var(--ytm-text-primary);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .album-header {
            flex-direction: column;
        }

        .album-cover {
            width: 100%;
            height: auto;
            max-height: 300px;
            flex: none;
        }

        .album-info {
            padding: 1.5rem;
        }

        .album-title {
            font-size: 2rem;
        }
    }
</style>

<div class="album-header">
    <img src="@Model.CoverImageUrl" alt="@Model.Title cover" class="album-cover">
    <div class="album-info">
        <div>
            <h1 class="album-title">@Model.Title</h1>
            <div class="album-artist">
                <a asp-controller="Artists" asp-action="Details" asp-route-id="@Model.ArtistId">
                    @Model.ArtistName
                </a>
            </div>
            
            <div class="album-meta">
                <span class="meta-item">
                    <i class="bi bi-calendar3"></i> 
                    @(Model.ReleaseDate?.Year.ToString() ?? "Unknown")
                </span>
                <span class="meta-item">
                    <i class="bi bi-music-note-list"></i> 
                    @Model.TrackCount songs
                </span>
                <span class="meta-item">
                    <i class="bi bi-clock"></i> 
                    @{
                        // Convert TotalDuration (in minutes) to a TimeSpan
                        var duration = TimeSpan.FromMinutes(Model.TotalDuration);
                        var formattedDuration = duration.ToString(@"h\:mm\:ss").TrimStart('0', ':');
                        if (string.IsNullOrEmpty(formattedDuration)) {
                            formattedDuration = "0:00";
                        }
                    }
                    @formattedDuration
                </span>
                <span class="meta-item">
                    <i class="bi bi-vinyl"></i> 
                    @Model.Genre
                </span>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p class="album-description">@Model.Description</p>
            }
        </div>
          <div class="album-actions">
            <button class="btn btn-play" 
                    data-play-album='@Html.Raw(JsonSerializer.Serialize(Model.Songs.Select(s => new { 
                        id = s.Id, 
                        title = s.Title, 
                        artistName = s.ArtistName, 
                        audioUrl = s.AudioUrl, 
                        coverImageUrl = s.CoverImageUrl 
                    })))'
                    title="Play all songs from this album">
                <i class="bi bi-play-fill"></i> Play All
            </button>
            <button class="btn btn-action" id="albumLikeButton" data-album-id="@Model.Id">
                <i class="bi bi-heart"></i> Like
            </button>
            <button class="btn btn-action" id="albumAddToPlaylistButton" data-album-id="@Model.Id">
                <i class="bi bi-plus"></i> Add to Playlist
            </button>
        </div>
    </div>
</div>

<div class="tracks-section">
    <div class="tracks-header">
        <h3>Songs</h3>
    </div>
    
    @if (Model.Songs != null && Model.Songs.Any())
    {
        <ul class="track-list">
            @for (int i = 0; i < Model.Songs.Count; i++)
            {
                var song = Model.Songs[i];
                <li class="track-item">
                    <div class="track-number">@(i+1)</div>
                    <div class="track-info">
                        <div class="track-title">@song.Title</div>
                        <div class="track-artist">@song.ArtistName</div>
                    </div>
                    <div class="track-duration">
                        @(song.Duration?.ToString("m':'ss") ?? "--:--")
                    </div>
                    <div class="track-actions">
                        <button class="btn play-btn" 
                                data-play-song='@Html.Raw(JsonSerializer.Serialize(new { 
                                    id = song.Id, 
                                    title = song.Title, 
                                    artistName = song.ArtistName, 
                                    audioUrl = song.AudioUrl, 
                                    coverImageUrl = song.CoverImageUrl 
                                }))'
                                data-playlist='@Html.Raw(JsonSerializer.Serialize(Model.Songs.Select(s => new { 
                                    id = s.Id, 
                                    title = s.Title, 
                                    artistName = s.ArtistName, 
                                    audioUrl = s.AudioUrl, 
                                    coverImageUrl = s.CoverImageUrl 
                                })))'
                                data-index="@i"
                                title="Play">
                            <i class="bi bi-play-fill"></i>
                        </button>
                        <button class="btn" title="Like">
                            <i class="bi bi-heart"></i>
                        </button>
                        <button class="btn" title="Add to playlist">
                            <i class="bi bi-plus"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-center" style="color: var(--ytm-text-secondary);">No songs available for this album.</p>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const albumLikeButton = document.getElementById('albumLikeButton');
            
            // Check if album is already liked on page load using the isLiked property from the model
            if (albumLikeButton) {
                // Always use the model's IsLiked property, no fallback to API call
                updateLikeButtonUI(@(Model.IsLiked ? "true" : "false"));

                albumLikeButton.addEventListener('click', function () {
                    const albumId = this.dataset.albumId;
                    // Disable button to prevent multiple clicks
                    this.disabled = true;
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i class="bi bi-spinner-border"></i> Processing...';
                    // Create form data for the request
                    const formData = new FormData();
                    formData.append('id', albumId);
                    formData.append('__RequestVerificationToken', getAntiForgeryToken());
                    fetch('/Albums/ToggleLike', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                    })
                    .then(data => {
                        // Update UI based on the response
                        if (data && typeof data.isLiked !== 'undefined') {
                            updateLikeButtonUI(data.isLiked);
                            if (data.message) {
                                console.log(data.message);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error toggling album like:', error);
                        this.innerHTML = originalText;
                    })
                    .finally(() => {
                        this.disabled = false;
                    });
                });
            }

            const albumAddToPlaylistButton = document.getElementById('albumAddToPlaylistButton');
            if (albumAddToPlaylistButton) {
                albumAddToPlaylistButton.addEventListener('click', function() {
                    const albumId = this.dataset.albumId;
                    showPlaylistModal(albumId);
                });
            }        
        });
        
        // Function to update like button UI based on like status
        function updateLikeButtonUI(isLiked) {
            const albumLikeButton = document.getElementById('albumLikeButton');
            if (!albumLikeButton) return;
            
            if (isLiked) {
                albumLikeButton.innerHTML = '<i class="bi bi-heart-fill"></i> Liked';
                albumLikeButton.classList.remove('btn-action');
                albumLikeButton.classList.add('btn-primary');
            } else {
                albumLikeButton.innerHTML = '<i class="bi bi-heart"></i> Like';
                albumLikeButton.classList.remove('btn-primary');
                albumLikeButton.classList.add('btn-action');
            }
        }

        function getAntiForgeryToken() {
            const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenField ? tokenField.value : '';
        }

        function showPlaylistModal(albumId) {
            // Fetch user playlists
            fetch('/Playlists/GetUserPlaylists', {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                const playlists = data.data || [];
                
                if (playlists.length === 0) {
                    alert('You don\'t have any playlists yet. Create a playlist first!');
                    return;
                }

                // Create modal HTML
                const modalHtml = `
                    <div id="playlistModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
                        <div style="background: var(--ytm-bg-primary); border-radius: 8px; padding: 2rem; max-width: 400px; width: 90%; max-height: 80vh; overflow-y: auto;">
                            <h3 style="color: var(--ytm-text-primary); margin-bottom: 1rem;">Add Album to Playlist</h3>
                            <p style="color: var(--ytm-text-secondary); margin-bottom: 1.5rem;">Select a playlist to add all songs from this album:</p>
                            <div id="playlistList" style="max-height: 300px; overflow-y: auto; margin-bottom: 1.5rem;">
                                ${playlists.map(playlist => `
                                    <div class="playlist-item" data-playlist-id="${playlist.id}" style="
                                        display: flex; align-items: center; padding: 0.75rem; margin-bottom: 0.5rem; 
                                        border: 1px solid var(--ytm-border-color); border-radius: 4px; cursor: pointer;
                                        background: var(--ytm-bg-secondary); transition: background-color 0.2s;
                                    " onmouseover="this.style.backgroundColor='var(--ytm-bg-tertiary)'" onmouseout="this.style.backgroundColor='var(--ytm-bg-secondary)'">
                                        ${playlist.coverImageUrl ? `<img src="${playlist.coverImageUrl}" alt="${playlist.name}" style="width: 40px; height: 40px; border-radius: 4px; margin-right: 0.75rem;">` : '<div style="width: 40px; height: 40px; background: var(--ytm-bg-tertiary); border-radius: 4px; margin-right: 0.75rem; display: flex; align-items: center; justify-content: center;"><i class="bi bi-music-note-list" style="color: var(--ytm-text-secondary);"></i></div>'}
                                        <div>
                                            <div style="color: var(--ytm-text-primary); font-weight: 500;">${playlist.name}</div>
                                            <div style="color: var(--ytm-text-secondary); font-size: 0.9rem;">${playlist.songCount} songs</div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                                <button id="cancelPlaylistModal" style="
                                    background: transparent; border: 1px solid var(--ytm-border-color); color: var(--ytm-text-secondary); 
                                    padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;
                                ">Cancel</button>
                            </div>
                        </div>
                    </div>
                `;

                // Add modal to page
                document.body.insertAdjacentHTML('beforeend', modalHtml);

                // Add event listeners
                document.getElementById('cancelPlaylistModal').addEventListener('click', closePlaylistModal);
                
                // Add click listeners to playlist items
                document.querySelectorAll('.playlist-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const playlistId = this.dataset.playlistId;
                        const playlistName = this.querySelector('div div').textContent;
                        addAlbumToPlaylist(albumId, playlistId, playlistName);
                    });
                });

                // Close modal when clicking outside
                document.getElementById('playlistModal').addEventListener('click', function(e) {
                    if (e.target === this) {
                        closePlaylistModal();
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching playlists:', error);
                alert('Error loading playlists. Please try again.');
            });
        }

        function closePlaylistModal() {
            const modal = document.getElementById('playlistModal');
            if (modal) {
                modal.remove();
            }
        }        function addAlbumToPlaylist(albumId, playlistId, playlistName) {
            // Get all song IDs from the album
            const songIds = @Html.Raw(Json.Serialize(Model.Songs.Select(s => s.Id.ToString()).ToArray()));
            
            // Create form data for the request
            const formData = new FormData();
            formData.append('playlistId', playlistId);
            formData.append('albumSongs.SongIds', JSON.stringify(songIds));
            formData.append('__RequestVerificationToken', getAntiForgeryToken());
            
            fetch(`/Playlists/AddAlbumToPlaylist?playlistId=${playlistId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ SongIds: songIds })
            })
            .then(response => {
                if (response.ok) {
                    alert(`All album songs added to "${playlistName}" playlist!`);
                    closePlaylistModal();
                } else {
                    response.text().then(text => alert('Failed to add album to playlist: ' + text));
                }
            })
            .catch(error => {
                console.error('Error adding album to playlist:', error);
                alert('Error adding album to playlist: ' + error);
            });
        }
    </script>
}