@model MusicApp.Models.DTOs.AlbumDto
@{
    ViewData["Title"] = $"{Model.Title} - Album";
}

<style>
    .album-header {
        display: flex;
        margin-bottom: 2rem;
        border-radius: 12px;
        overflow: hidden;
        background-color: var(--ytm-bg-secondary);
    }

    .album-cover {
        flex: 0 0 300px;
        height: 300px;
        object-fit: cover;
    }

    .album-info {
        flex: 1;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .album-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--ytm-text-primary);
        margin-bottom: 0.5rem;
    }

    .album-artist {
        font-size: 1.2rem;
        color: var(--ytm-text-secondary);
        margin-bottom: 1rem;
    }

    .album-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        color: var(--ytm-text-secondary);
        font-size: 0.9rem;
    }

    .album-description {
        color: var(--ytm-text-secondary);
        margin-bottom: 1.5rem;
        max-width: 80ch;
        line-height: 1.6;
    }

    .album-actions {
        display: flex;
        gap: 1rem;
    }

    .btn-play {
        background-color: var(--ytm-accent-red);
        color: var(--ytm-text-primary);
        border: none;
        border-radius: 20px;
        padding: 0.4rem 1.2rem;
        font-weight: 500;
    }

    .btn-play:hover {
        background-color: #cc0000;
        color: var(--ytm-text-primary);
    }

    .btn-action {
        color: var(--ytm-text-secondary);
        border: 1px solid var(--ytm-border-color);
        background: transparent;
        border-radius: 20px;
        padding: 0.4rem 1.2rem;
    }

    .btn-action:hover {
        background-color: var(--ytm-bg-tertiary);
        color: var(--ytm-text-primary);
    }

    /* Track list styling */
    .tracks-section {
        background-color: var(--ytm-bg-secondary);
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid var(--ytm-border-color);
    }

    .tracks-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--ytm-border-color);
    }

    .tracks-header h3 {
        color: var(--ytm-text-primary);
        margin-bottom: 0;
        font-weight: 500;
    }

    .track-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .track-item {
        display: flex;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--ytm-border-color);
    }

    .track-item:last-child {
        border-bottom: none;
    }

    .track-number {
        flex: 0 0 40px;
        color: var(--ytm-text-secondary);
        text-align: center;
    }

    .track-info {
        flex: 1;
    }

    .track-title {
        color: var(--ytm-text-primary);
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .track-artist {
        color: var(--ytm-text-secondary);
        font-size: 0.9rem;
    }

    .track-duration {
        flex: 0 0 60px;
        color: var(--ytm-text-secondary);
        text-align: right;
    }

    .track-actions {
        flex: 0 0 100px;
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .track-actions .btn {
        color: var(--ytm-text-secondary);
        background: none;
        border: none;
        font-size: 1.1rem;
        padding: 0.25rem;
    }

    .track-actions .btn:hover {
        color: var(--ytm-text-primary);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .album-header {
            flex-direction: column;
        }

        .album-cover {
            width: 100%;
            height: auto;
            max-height: 300px;
            flex: none;
        }

        .album-info {
            padding: 1.5rem;
        }

        .album-title {
            font-size: 2rem;
        }
    }
</style>

<div class="album-header">
    <img src="@Model.CoverImageUrl" alt="@Model.Title cover" class="album-cover">
    <div class="album-info">
        <div>
            <h1 class="album-title">@Model.Title</h1>
            <div class="album-artist">
                <a asp-controller="Artists" asp-action="Details" asp-route-id="@Model.ArtistId">
                    @Model.ArtistName
                </a>
            </div>
            
            <div class="album-meta">
                <span class="meta-item">
                    <i class="bi bi-calendar3"></i> 
                    @(Model.ReleaseDate?.Year.ToString() ?? "Unknown")
                </span>
                <span class="meta-item">
                    <i class="bi bi-music-note-list"></i> 
                    @Model.TrackCount songs
                </span>
                <span class="meta-item">
                    <i class="bi bi-clock"></i> 
                    @(TimeSpan.FromSeconds(Model.TotalDuration).ToString(@"h\:mm\:ss").TrimStart('0', ':'))
                </span>
                <span class="meta-item">
                    <i class="bi bi-vinyl"></i> 
                    @Model.Genre
                </span>
            </div>
            
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p class="album-description">@Model.Description</p>
            }
        </div>
          <div class="album-actions">
            <button class="btn btn-play" 
                    data-play-album='@Html.Raw(Json.Serialize(Model.Songs.Select(s => new { 
                        id = s.Id, 
                        title = s.Title, 
                        artistName = s.ArtistName, 
                        audioUrl = s.AudioUrl, 
                        coverImageUrl = s.CoverImageUrl 
                    })))'
                    title="Play all songs from this album">
                <i class="bi bi-play-fill"></i> Play All
            </button>
            <button class="btn btn-action" id="albumLikeButton" data-album-id="@Model.Id">
                <i class="bi bi-heart"></i> Like
            </button>
            <button class="btn btn-action" id="albumAddToPlaylistButton" data-album-id="@Model.Id">
                <i class="bi bi-plus"></i> Add to Playlist
            </button>
        </div>
    </div>
</div>

<div class="tracks-section">
    <div class="tracks-header">
        <h3>Songs</h3>
    </div>
    
    @if (Model.Songs != null && Model.Songs.Any())
    {
        <ul class="track-list">            @for (int i = 0; i < Model.Songs.Count; i++)
            {
                var song = Model.Songs[i];
                <li class="track-item">
                    <div class="track-number">@(i+1)</div>
                    <div class="track-info">
                        <div class="track-title">@song.Title</div>
                        <div class="track-artist">@song.ArtistName</div>
                    </div>
                    <div class="track-duration">
                        @(song.Duration?.ToString(@"m\:ss") ?? "--:--")
                    </div>
                    <div class="track-actions">
                        <button class="btn play-btn" 
                                data-play-song='@Html.Raw(Json.Serialize(new { 
                                    id = song.Id, 
                                    title = song.Title, 
                                    artistName = song.ArtistName, 
                                    audioUrl = song.AudioUrl, 
                                    coverImageUrl = song.CoverImageUrl 
                                }))'
                                data-playlist='@Html.Raw(Json.Serialize(Model.Songs.Select(s => new { 
                                    id = s.Id, 
                                    title = s.Title, 
                                    artistName = s.ArtistName, 
                                    audioUrl = s.AudioUrl, 
                                    coverImageUrl = s.CoverImageUrl 
                                })))'
                                data-index="@i"
                                title="Play">
                            <i class="bi bi-play-fill"></i>
                        </button>
                        <button class="btn" title="Like">
                            <i class="bi bi-heart"></i>
                        </button>
                        <button class="btn" title="Add to playlist">
                            <i class="bi bi-plus"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="text-center" style="color: var(--ytm-text-secondary);">No songs available for this album.</p>
    }
</div>

<div class="mt-4">
    <a asp-action="Index" class="btn btn-action">
        <i class="bi bi-arrow-left"></i> Back to Albums
    </a>
</div>

<!-- Playlist Selection Modal -->
<div id="playlistModal" class="modal" tabindex="-1" style="display:none; position:fixed; z-index:1050; left:0; top:0; width:100vw; height:100vh; background:rgba(0,0,0,0.4); align-items:center; justify-content:center;">
    <div class="modal-dialog" style="background:#222; border-radius:12px; max-width:400px; width:90vw; margin:auto; padding:1.5rem; box-shadow:0 2px 16px #0008;">
        <h5 style="color:#fff; margin-bottom:1rem;">Select Playlist</h5>
        <div id="playlistList" style="max-height:250px; overflow-y:auto; margin-bottom:1rem;"></div>
        <div style="display:flex; justify-content:flex-end; gap:0.5rem;">
            <button id="playlistModalCancel" class="btn btn-action">Cancel</button>
            <button id="playlistModalConfirm" class="btn btn-play" disabled>Add</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const backendBaseUrl = 'http://localhost:5117';
            const albumLikeButton = document.getElementById('albumLikeButton');
            if (albumLikeButton) {
                albumLikeButton.addEventListener('click', function () {
                    const albumId = this.dataset.albumId;
                    fetch(`@Url.Action("Like", "Albums")/${albumId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': getAntiForgeryToken(),
                            // 'Content-Type': 'application/json' // Add if your controller expects JSON
                        },
                        // body: JSON.stringify({}) // Add if your controller expects a body
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.text();
                        } else {
                            return response.text().then(text => { throw new Error(text); });
                        }
                    })
                    .then(message => {
                        alert(message || 'Album liked!');
                        this.innerHTML = '<i class="bi bi-heart-fill"></i> Liked';
                        this.classList.add('liked');
                    })
                    .catch(error => {
                        alert('Error liking album: ' + error.message);
                    });
                });
            }
            const albumAddToPlaylistButton = document.getElementById('albumAddToPlaylistButton');
            const playlistModal = document.getElementById('playlistModal');
            const playlistList = document.getElementById('playlistList');
            const playlistModalCancel = document.getElementById('playlistModalCancel');
            const playlistModalConfirm = document.getElementById('playlistModalConfirm');
            let selectedPlaylistId = null;
            if (albumAddToPlaylistButton) {
                albumAddToPlaylistButton.addEventListener('click', function () {
                    // Show modal and fetch playlists
                    playlistModal.style.display = 'flex';
                    playlistList.innerHTML = '<div style="color:#aaa;">Loading playlists...</div>';
                    playlistModalConfirm.disabled = true;
                    selectedPlaylistId = null;
                    fetch(`${backendBaseUrl}/api/Playlists/user`)
                        .then(res => res.json())
                        .then(result => {
                            const playlists = result.Data || result; // handle paged or array
                            if (!playlists.length) {
                                playlistList.innerHTML = '<div style="color:#aaa;">No playlists found.</div>';
                                return;
                            }
                            playlistList.innerHTML = playlists.map(p =>
                                `<div class="playlist-option" data-id="${p.id}" tabindex="0" style="padding:0.5rem 1rem; border-radius:8px; margin-bottom:0.25rem; background:#333; color:#fff; cursor:pointer; outline:none;">`
                                + `<i class='bi bi-music-note-list'></i> ${p.name}` +
                                `</div>`
                            ).join('');
                            Array.from(playlistList.children).forEach(opt => {
                                opt.addEventListener('click', function () {
                                    Array.from(playlistList.children).forEach(o => o.style.background = '#333');
                                    this.style.background = '#444';
                                    selectedPlaylistId = this.dataset.id;
                                    playlistModalConfirm.disabled = false;
                                });
                                opt.addEventListener('keydown', function(e) {
                                    if (e.key === 'Enter' || e.key === ' ') {
                                        this.click();
                                    }
                                });
                            });
                        })
                        .catch(() => {
                            playlistList.innerHTML = '<div style="color:#faa;">Failed to load playlists.</div>';
                        });
                });
            }
            playlistModalCancel.addEventListener('click', function () {
                playlistModal.style.display = 'none';
            });
            playlistModalConfirm.addEventListener('click', function () {
                if (!selectedPlaylistId) return;
                playlistModalConfirm.disabled = true;
                const songIds = @Html.Raw(Json.Serialize(Model.Songs.Select(s => s.Id).ToList()));

                fetch('@Url.Action("AddAlbumToPlaylist", "Playlists")?playlistId=' + selectedPlaylistId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ songIds: songIds })
                })
                .then(response => {
                    if (response.ok) {
                        return response.text(); // Or response.json() if your controller returns JSON
                    } else {
                        return response.text().then(text => { throw new Error(text); });
                    }
                })
                .then(message => {
                    alert(message || 'All album songs added to playlist!');
                    playlistModal.style.display = 'none';
                })
                .catch(error => {
                    alert('Error adding album songs to playlist: ' + error.message);
                    playlistModal.style.display = 'none';
                })
                .finally(() => {
                    playlistModalConfirm.disabled = false; // Re-enable button
                });
            });
            // Close modal on outside click
            playlistModal.addEventListener('click', function(e) {
                if (e.target === playlistModal) playlistModal.style.display = 'none';
            });
        });
        function getAntiForgeryToken() {
            const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenField ? tokenField.value : '';
        }
    </script>
}