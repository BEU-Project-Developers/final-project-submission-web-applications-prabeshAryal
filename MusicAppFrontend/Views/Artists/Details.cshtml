@* Add Model Directive *@
@model MusicApp.Models.DTOs.ArtistDto
@{
    ViewData["Title"] = $"{Model.Name} - Details"; // Use artist name in title

    // Banner image - Using the artist's ImageUrl from the model 
    Random randomGen = new Random();
    string GetRandomImageUrl(int width, int height)
    {
        int randomId = randomGen.Next(1, 1085);
        return $"https://picsum.photos/id/{randomId}/{width}/{height}";
    }    var bannerImageUrl = string.IsNullOrEmpty(Model.ImageUrl) ? GetRandomImageUrl(1200, 400) : Model.ImageUrl;
}

@* Add specific styles for this page *@
<style>
    .artist-banner {
        position: relative;
        height: 350px; /* Adjust height as needed */
        overflow: hidden;
        border-radius: 12px; /* Rounded corners */
        margin-bottom: 2rem;
    }

    .artist-banner-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    .artist-banner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.8) 100%);
        display: flex;
        flex-direction: column;
        justify-content: flex-end; /* Align text to bottom */
        padding: 2rem;
    }    .artist-banner-title {
        font-size: 3rem;
        font-weight: 700;
        color: #ffffff;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }    .artist-banner-details {
        font-size: 1rem;
        color: #aaaaaa;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

        .artist-banner-details span {
            margin-right: 1rem; /* Spacing between details */
        }    /* Section Styling */
    .details-section {
        background-color: #212121;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        border: 1px solid #383838;
    }

        .details-section h3 {
            color: #ffffff;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .details-section p {
            color: #aaaaaa;
            line-height: 1.6;
            font-size: 0.95rem;
        }

    /* Social Buttons */
    .social-buttons .btn {
        color: #aaaaaa;
        border-color: #383838;
        border-radius: 50%; /* Circular */
        width: 40px;
        height: 40px;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        padding: 0;
        transition: all 0.2s ease;
    }        .social-buttons .btn:hover {
            color: #ffffff;
            background-color: #383838;
            border-color: #383838;
        }

    /* Top Songs List */
    .song-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .song-list-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0; /* Padding top/bottom, no horizontal padding needed if section has padding */
        border-bottom: 1px solid var(--ytm-border-color);
        transition: background-color 0.2s ease;
        margin: 0 -1.5rem; /* Extend hover effect to edges of section padding */
        padding-left: 1.5rem;
        padding-right: 1.5rem;
    }

        .song-list-item:last-child {
            border-bottom: none;
        }

        .song-list-item:hover {
            background-color: var(--ytm-bg-tertiary);
        }

    .song-info {
        display: flex;
        align-items: center;
        color: var(--ytm-text-primary);
    }

    .song-index {
        color: var(--ytm-text-secondary);
        width: 25px; /* Fixed width for alignment */
        text-align: right;
        margin-right: 1rem;
    }

    .song-title {
        font-weight: 500;
    }

    .song-actions {
        display: flex;
        align-items: center;
    }

    .song-duration {
        color: var(--ytm-text-secondary);
        font-size: 0.9rem;
        margin-right: 1rem;
    }

    .song-actions .btn {
        color: var(--ytm-text-secondary);
        border: none; /* No border for cleaner look */
        background: none;
        padding: 0.3rem;
        line-height: 1;
        font-size: 1.2rem; /* Icon size */
    }

        .song-actions .btn:hover {
            color: var(--ytm-text-primary);
        }

    /* Play All Button */
    .btn-play-all {
        background-color: var(--ytm-accent-red);
        color: var(--ytm-text-primary);
        border: none;
        border-radius: 20px; /* Pill shape */
        padding: 0.4rem 1.2rem;
        font-weight: 500;
    }

        .btn-play-all:hover {
            background-color: #cc0000; /* Darker red */
            color: var(--ytm-text-primary);
        }

    /* Album Card Styling (similar to artist index but square) */
    .album-grid-item {
        text-align: left; /* Align text left for albums */
        margin-bottom: 1.5rem;
        position: relative;
        border-radius: 8px;
        transition: background-color 0.2s ease-in-out;
        background-color: var(--ytm-bg-secondary); /* Album bg */
        overflow: hidden; /* Clip image corners */
    }

        .album-grid-item:hover {
            background-color: var(--ytm-bg-tertiary);
        }

    .album-image {
        display: block;
        width: 100%;
        aspect-ratio: 1 / 1; /* Force square aspect ratio */
        object-fit: cover;
        border-top-left-radius: 8px; /* Match container */
        border-top-right-radius: 8px;
        transition: transform 0.3s ease;
    }

    .album-grid-item:hover .album-image {
        transform: scale(1.03);
    }

    .album-info {
        padding: 0.75rem 1rem; /* Padding for text */
    }

    .album-title {
        font-size: 1rem;
        font-weight: 500;
        color: var(--ytm-text-primary);
        margin-bottom: 0.1rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .album-details {
        font-size: 0.8rem;
        color: var(--ytm-text-secondary);
    }

    .album-link { /* Similar to artist link */
        text-decoration: none;
        color: inherit;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
    }

    /* Alert Box Styling (reuse from index) */
    .alert-info-themed {
        background-color: var(--ytm-bg-secondary);
        color: var(--ytm-text-primary);
        border: 1px solid var(--ytm-border-color);
        border-left: 5px solid var(--ytm-accent-red); /* Accent border */
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 2rem; /* Consistent margin */
    }

        .alert-info-themed h4 {
            color: var(--ytm-text-primary);
            margin-bottom: 0.5rem;
        }

        .alert-info-themed p {
            color: var(--ytm-text-secondary);
            margin-bottom: 0;
        }

</style>

@* Themed Alert Box *@
<div class="alert alert-info-themed">
    <h4>Artist Details</h4>
    <p>Explore detailed information about @Model.Name, including biography, top songs, and albums.</p>
</div>

@* Artist Banner *@
<div class="artist-banner">
    <img src="@bannerImageUrl" class="artist-banner-img" alt="@Model.Name Banner"
         onerror="this.src='https://placehold.co/1200x400/212121/AAAAAA?text=Artist';">
    <div class="artist-banner-overlay">
        <h1 class="artist-banner-title">@Model.Name</h1>
        <p class="artist-banner-details">
            <span>Genre: @Model.Genre</span>
            <span>Albums: @Model.Albums.Count</span>            @if (Model.MonthlyListeners.HasValue && Model.MonthlyListeners > 0)
            {
                <span>Monthly Listeners: @Model.MonthlyListeners.Value.ToString("N0")</span>
            }
        </p>
    </div>
</div>

@* Main Content Grid *@
<div class="row">
    @* Biography Column *@
    <div class="col-lg-4">
        <div class="details-section">
            <h3>Biography</h3>
            @if (!string.IsNullOrEmpty(Model.Bio))
            {
                <p>@Model.Bio</p>
            }
            else
            {
                <p>
                    Discover the unique sound of @Model.Name, known for their captivating @Model.Genre tracks.
                    With a growing discography of @Model.Albums.Count albums, they continue to push musical boundaries.
                </p>
            }
            <div class="d-flex gap-2 mt-3 social-buttons">
                <a href="#" class="btn" title="Facebook"><i class="bi bi-facebook"></i></a>
                <a href="#" class="btn" title="Twitter"><i class="bi bi-twitter"></i></a>
                <a href="#" class="btn" title="Instagram"><i class="bi bi-instagram"></i></a>
                <a href="#" class="btn" title="Website"><i class="bi bi-globe"></i></a>
            </div>
        </div>
    </div>

    @* Top Songs & Albums Column *@
    <div class="col-lg-8">
        @* Top Songs Section *@
        <div class="details-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="mb-0">Top Songs</h3>
                <div>
                    <button class="btn btn-play-all" onclick="playAllArtistSongs()">
                        <i class="bi bi-play-fill me-1"></i> Play All
                    </button>
                </div>
            </div>
            <ul class="song-list">
                @if (Model.Songs != null && Model.Songs.Any())
                {
                    for (int i = 0; i < Model.Songs.Count(); i++)
                    {
                        var song = Model.Songs.ElementAt(i);
                        <li class="song-list-item">
                            <div class="song-info">
                                <span class="song-index">@(i+1)</span>
                                <div>
                                    <div class="song-title">@song.Title</div>
                                    @if (song.Artists != null && song.Artists.Count > 1)
                                    {
                                        <small class="text-muted">
                                            feat. @string.Join(", ", song.Artists.Where(a => a.Id != Model.Id).Select(a => a.Name))
                                        </small>
                                    }
                                </div>
                            </div>
                            <div class="song-actions">
                                <span class="song-duration">@(song.Duration?.ToString(@"m\:ss") ?? "--:--")</span>
                                <button class="btn play-btn" title="Play Song" onclick="playSingleArtistSong(@i)">
                                    <i class="bi bi-play-fill"></i>
                                </button>
                                <button class="btn" title="Add to Playlist" data-song-id="@song.Id" data-song-title="@song.Title" onclick="showAddToPlaylistModal(@song.Id, '@song.Title')">
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </li>
                    }
                }
                else
                {
                    <li class="song-list-item">
                        <div class="song-info">
                            <span>No songs available for this artist.</span>
                        </div>
                    </li>
                }
            </ul>
        </div>

        @* Albums Section *@
        <div class="details-section">
            <h3>Albums</h3>
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                @if (Model.Albums != null && Model.Albums.Any())
                {
                    @foreach (var album in Model.Albums)
                    {
                        <div class="col">
                            <div class="album-grid-item">
                                <a href="/Albums/Details/@album.Id" class="album-link" aria-label="View details for @album.Title"></a>
                                <img src="@(album.CoverImageUrl ?? GetRandomImageUrl(300, 300))" alt="@album.Title cover" 
                                     class="album-image" onerror="this.src='https://placehold.co/300x300/212121/AAAAAA?text=Album';">
                                <div class="album-info">
                                    <div class="album-title" title="@album.Title">@album.Title</div>
                                    <div class="album-details">@(album.ReleaseDate?.Year.ToString() ?? "Unknown")</div>
                                </div>                                <div class="album-actions">
                                    <button class="btn btn-play" 
                                            data-play-album='@Html.Raw(Json.Serialize(Model.Songs.Select(s => new { 
                                                id = s.Id, 
                                                title = s.Title, 
                                                artistName = s.Artists != null && s.Artists.Any() ? string.Join(", ", s.Artists.Select(a => a.Name)) : s.ArtistName ?? Model.Name, 
                                                audioUrl = !string.IsNullOrEmpty(s.AudioUrl) ? $"/api/Files/audio/{System.IO.Path.GetFileName(s.AudioUrl)}" : "", 
                                                coverImageUrl = s.CoverImageUrl 
                                            })))' 
                                            title="Play all songs from this album">
                                        <i class="bi bi-play-fill"></i> Play All
                                    </button>
                                    <button class="btn btn-action" id="artistFollowButton" data-artist-id="@Model.Id">
                                        <i class="bi bi-person-plus"></i> Follow
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <p>No albums available for this artist.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Helper: get all songs as JS array
        const artistSongs = @Html.Raw(Json.Serialize(Model.Songs.Select(s => new {
            id = s.Id,
            title = s.Title,
            artistName = s.Artists != null && s.Artists.Any() ? string.Join(", ", s.Artists.Select(a => a.Name)) : Model.Name,
            albumName = s.AlbumTitle ?? "",
            audioUrl = !string.IsNullOrEmpty(s.AudioUrl) ? s.AudioUrl : "",
            coverImageUrl = s.CoverImageUrl,
            duration = s.Duration != null ? s.Duration.ToString() : "--:--"
        })));
        function playAllArtistSongs() {
            if (!window.musicPlayer || typeof window.musicPlayer.playSong !== 'function') {
                alert('Music player not available');
                return;
            }
            if (artistSongs.length > 0) {
                window.musicPlayer.playSong(artistSongs[0], artistSongs, 0);
            } else {
                alert('No songs found for this artist.');
            }
        }
        function playSingleArtistSong(index) {
            if (!window.musicPlayer || typeof window.musicPlayer.playSong !== 'function') {
                alert('Music player not available');
                return;
            }
            if (artistSongs.length > index) {
                window.musicPlayer.playSong(artistSongs[index], artistSongs, index);
            } else {
                alert('Song not found.');
            }
        }
        function showAddToPlaylistModal(songId, songTitle) {
            fetch('/Playlists/GetUserPlaylists', {
                method: 'GET',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                const playlists = data.data || [];
                if (playlists.length === 0) {
                    alert('You don\'t have any playlists yet. Create a playlist first!');
                    return;
                }
                const modalHtml = `
                    <div id="playlistModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
                        <div style="background: var(--ytm-bg-primary); border-radius: 8px; padding: 2rem; max-width: 400px; width: 90%; max-height: 80vh; overflow-y: auto;">
                            <h3 style="color: var(--ytm-text-primary); margin-bottom: 1rem;">Add Song to Playlist</h3>
                            <p style="color: var(--ytm-text-secondary); margin-bottom: 1.5rem;">Select a playlist to add <b>${songTitle}</b>:</p>
                            <div id="playlistList" style="max-height: 300px; overflow-y: auto; margin-bottom: 1.5rem;">
                                ${playlists.map(playlist => `
                                    <div class="playlist-item" data-playlist-id="${playlist.id}" style="
                                        display: flex; align-items: center; padding: 0.75rem; margin-bottom: 0.5rem; 
                                        border: 1px solid var(--ytm-border-color); border-radius: 4px; cursor: pointer;
                                        background: var(--ytm-bg-secondary); transition: background-color 0.2s;
                                    " onmouseover="this.style.backgroundColor='var(--ytm-bg-tertiary)'" onmouseout="this.style.backgroundColor='var(--ytm-bg-secondary)'">
                                        ${playlist.coverImageUrl ? `<img src="${playlist.coverImageUrl}" alt="${playlist.name}" style="width: 40px; height: 40px; border-radius: 4px; margin-right: 0.75rem;">` : '<div style="width: 40px; height: 40px; background: var(--ytm-bg-tertiary); border-radius: 4px; margin-right: 0.75rem; display: flex; align-items: center; justify-content: center;"><i class="bi bi-music-note-list" style="color: var(--ytm-text-secondary);"></i></div>'}
                                        <div>
                                            <div style="color: var(--ytm-text-primary); font-weight: 500;">${playlist.name}</div>
                                            <div style="color: var(--ytm-text-secondary); font-size: 0.9rem;">${playlist.songCount} songs</div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                                <button id="cancelPlaylistModal" style="
                                    background: transparent; border: 1px solid var(--ytm-border-color); color: var(--ytm-text-secondary); 
                                    padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Cancel</button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.insertAdjacentHTML('beforeend', modalHtml);
                document.getElementById('cancelPlaylistModal').addEventListener('click', closePlaylistModal);
                document.querySelectorAll('.playlist-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const playlistId = this.dataset.playlistId;
                        addSongToPlaylist(songId, playlistId, songTitle);
                    });
                });
                document.getElementById('playlistModal').addEventListener('click', function(e) {
                    if (e.target === this) {
                        closePlaylistModal();
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching playlists:', error);
                alert('Error loading playlists. Please try again.');
            });
        }
        function closePlaylistModal() {
            const modal = document.getElementById('playlistModal');
            if (modal) {
                modal.remove();
            }
        }
        function addSongToPlaylist(songId, playlistId, songTitle) {
            fetch('/Playlists/AddSongToPlaylistAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ playlistId: playlistId, songId: songId })
            })
            .then(response => {
                if (response.ok) {
                    alert(`'${songTitle}' added to playlist!`);
                    closePlaylistModal();
                } else {
                    response.text().then(text => alert('Failed to add song to playlist: ' + text));
                }
            })
            .catch(error => alert('Error adding to playlist: ' + error));
        }
        document.addEventListener('DOMContentLoaded', function () {
            const artistFollowButton = document.getElementById('artistFollowButton');
            if (artistFollowButton) {
                artistFollowButton.addEventListener('click', function () {
                    const artistId = this.dataset.artistId;
                    fetch(`/api/Artists/${artistId}/follow`, {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': getAntiForgeryToken() }
                    })
                    .then(response => {
                        if (response.ok) {
                            alert('You are now following this artist!');
                            this.innerHTML = '<i class="bi bi-person-check"></i> Following';
                            this.classList.add('followed');
                        } else {
                            response.text().then(text => alert('Failed to follow artist: ' + text));
                        }
                    })
                    .catch(error => alert('Error following artist: ' + error));
                });
            }
        });
        function getAntiForgeryToken() {
            const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenField ? tokenField.value : '';
        }
    </script>
}
