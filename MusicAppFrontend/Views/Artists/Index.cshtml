@model PagedResponse<MusicApp.Models.DTOs.ArtistDto>
@using MusicApp.Helpers
@{
    ViewData["Title"] = "Artists";
    Random randomGen = new Random();
    string GetRandomImageUrl(int width, int height)
    {
        int randomId = randomGen.Next(1, 1085);
        return $"https://picsum.photos/id/{randomId}/{width}/{height}";
    }
    int currentPage = Model?.CurrentPage ?? 1;
    int totalPages = Model?.TotalPages ?? 1;
    int pageSize = Model?.PageSize ?? 20;
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="mb-4 px-4 py-3 rounded-lg bg-[var(--ytm-accent-red)] bg-opacity-20 text-[var(--ytm-accent-red)] border border-[var(--ytm-accent-red)]">
        @TempData["ErrorMessage"]
    </div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="mb-4 px-4 py-3 rounded-lg bg-green-600 bg-opacity-20 text-green-500 border border-green-600">
        @TempData["SuccessMessage"]
    </div>
}

@if (User.IsInRole("Admin"))
{
    <!-- Admin Table View - YouTube Music Dark Theme -->
    <div class="min-h-screen bg-[var(--ytm-bg-primary)] text-[var(--ytm-text-primary)] p-6">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-[var(--ytm-text-primary)]">Artists Management</h1>
            <a asp-action="Create" class="bg-[var(--ytm-accent-red)] hover:bg-[var(--ytm-accent-red-hover)] text-white px-4 py-2 rounded-lg transition-colors flex items-center">
                <i class="fas fa-plus mr-2"></i>Add New Artist
            </a>
        </div>

        <div class="bg-[var(--ytm-bg-secondary)] rounded-lg shadow-xl overflow-hidden border border-[var(--ytm-border-color)]">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-[var(--ytm-bg-tertiary)]">
                        <tr>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-[var(--ytm-text-secondary)]">Image</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-[var(--ytm-text-secondary)]">Name</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-[var(--ytm-text-secondary)]">Genre</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-[var(--ytm-text-secondary)]">Albums</th>
                            <th class="px-6 py-4 text-center text-sm font-semibold text-[var(--ytm-text-secondary)]">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-[var(--ytm-border-color)]">
                        @foreach (var artist in Model.Data)
                        {
                            <tr class="hover:bg-[var(--ytm-bg-tertiary)] transition-colors">
                                <td class="px-6 py-4">
                                    <img src="@(string.IsNullOrEmpty(artist.ImageUrl) ? GetRandomImageUrl(48, 48) : artist.ImageUrl)" 
                                         class="w-12 h-12 rounded-full object-cover" 
                                         alt="@artist.Name" />
                                </td>
                                <td class="px-6 py-4">
                                    <div class="font-medium text-[var(--ytm-text-primary)]">@artist.Name</div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="text-[var(--ytm-text-secondary)]">@artist.Genre</div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="text-[var(--ytm-text-secondary)]">@(artist.Albums != null ? artist.Albums.Count : 0)</div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex justify-center space-x-2">
                                        <a asp-action="Details" asp-route-id="@artist.Id" 
                                           class="bg-[var(--ytm-accent-red)] hover:bg-[var(--ytm-accent-red-hover)] text-white px-3 py-1 rounded text-sm transition-colors">
                                            <i class="fas fa-eye mr-1"></i>View
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@artist.Id" 
                                           class="bg-[var(--ytm-accent-yellow)] hover:bg-yellow-700 text-white px-3 py-1 rounded text-sm transition-colors">
                                            <i class="fas fa-edit mr-1"></i>Edit
                                        </a>
                                        <form asp-action="DeleteConfirmed" asp-route-id="@artist.Id" method="post" style="display: inline;" 
                                              onsubmit="return confirm('Are you sure you want to delete this artist?');">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" 
                                                    class="bg-[var(--ytm-accent-red)] hover:bg-[var(--ytm-accent-red-hover)] text-white px-3 py-1 rounded text-sm transition-colors">
                                                <i class="fas fa-trash mr-1"></i>Delete
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination Controls -->
        @if (totalPages > 1)
        {
            <nav class="flex justify-center mt-10">
                <ul class="inline-flex -space-x-px">
                    <li>
                        <a asp-action="Index" asp-route-page="@(currentPage - 1)" asp-route-pageSize="@pageSize" class="px-3 py-2 ml-0 leading-tight text-[var(--ytm-text-secondary)] bg-[var(--ytm-bg-tertiary)] border border-[var(--ytm-border-color)] rounded-l-lg @(currentPage == 1 ? "pointer-events-none opacity-50" : "hover:bg-[var(--ytm-bg-secondary)]")">Prev</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li>
                            <a asp-action="Index" asp-route-page="@i" asp-route-pageSize="@pageSize" class="px-3 py-2 leading-tight border border-[var(--ytm-border-color)] @(i == currentPage ? "bg-[var(--ytm-accent-red)] text-white" : "bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-secondary)] hover:bg-[var(--ytm-bg-secondary)]")">@i</a>
                        </li>
                    }
                    <li>
                        <a asp-action="Index" asp-route-page="@(currentPage + 1)" asp-route-pageSize="@pageSize" class="px-3 py-2 leading-tight text-[var(--ytm-text-secondary)] bg-[var(--ytm-bg-tertiary)] border border-[var(--ytm-border-color)] rounded-r-lg @(currentPage == totalPages ? "pointer-events-none opacity-50" : "hover:bg-[var(--ytm-bg-secondary)]")">Next</a>
                    </li>
                </ul>
            </nav>
        }
        @if (!(Model.Data?.Any() ?? false))
        {
            <div class="text-center py-12">
                <i class="fas fa-user-music text-6xl text-[var(--ytm-bg-tertiary)] mb-4"></i>
                <h3 class="text-xl text-[var(--ytm-text-secondary)] mb-2">No artists found</h3>
                <p class="text-[var(--ytm-text-tertiary)]">Start by adding your first artist!</p>
            </div>
        }
    </div>
}
else
{
    <!-- User Artist Grid View - YouTube Music Style -->
    <div class="min-h-screen bg-[var(--ytm-bg-primary)] text-[var(--ytm-text-primary)]">
        <div class="container mx-auto px-4 py-8">
            <div class="flex justify-between items-center mb-8">
                <h1 class="text-4xl font-bold text-[var(--ytm-text-primary)]">Artists</h1>
                <div class="flex space-x-2">
                    <button class="px-4 py-2 text-sm bg-[var(--ytm-accent-red)] text-white rounded-lg hover:bg-[var(--ytm-accent-red-hover)] transition-colors">All</button>
                    <button class="px-4 py-2 text-sm bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-secondary)] rounded-lg hover:bg-[var(--ytm-bg-secondary)] transition-colors">Popular</button>
                    <button class="px-4 py-2 text-sm bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-secondary)] rounded-lg hover:bg-[var(--ytm-bg-secondary)] transition-colors">New</button>
                </div>
            </div>

            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
                @foreach (var artist in Model.Data)
                {
                    <div class="group cursor-pointer" onclick="window.location.href='@Url.Action("Details", new { id = artist.Id })'">
                        <div class="text-center">
                            <div class="relative w-36 h-36 mx-auto mb-4">
                                <img src="@(string.IsNullOrEmpty(artist.ImageUrl) ? GetRandomImageUrl(300, 300) : artist.ImageUrl)" 
                                     class="w-full h-full object-cover rounded-full group-hover:scale-105 transition-transform duration-300" 
                                     alt="@artist.Name"
                                     onerror="this.src='https://placehold.co/300x300/374151/9CA3AF?text=Artist';" />
                                  <!-- Play button overlay -->
                                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-full flex items-center justify-center">
                                    <button class="w-12 h-12 bg-[var(--ytm-accent-red)] rounded-full flex items-center justify-center hover:bg-[var(--ytm-accent-red-hover)] transition-colors play-artist-btn"
                                            data-artist-id="@artist.Id"
                                            data-artist-name="@artist.Name"
                                            title="Play all songs by @artist.Name"
                                            onclick="event.stopPropagation(); playArtistSongs(@artist.Id, '@artist.Name')">
                                        <i class="fas fa-play text-white ml-1"></i>
                                    </button>
                                    <button class="w-12 h-12 bg-[var(--ytm-accent-red)] rounded-full flex items-center justify-center hover:bg-[var(--ytm-accent-red-hover)] transition-colors add-to-playlist-btn ml-2"
                                            data-artist-id="@artist.Id"
                                            data-artist-name="@artist.Name"
                                            title="Add all songs by @artist.Name to playlist"
                                            onclick="event.stopPropagation(); showAddArtistSongsToPlaylistModal(@artist.Id, '@artist.Name')">
                                        <i class="bi bi-plus text-white ml-1"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="text-center">
                                <h3 class="font-semibold text-[var(--ytm-text-primary)] text-lg mb-1" title="@artist.Name">@artist.Name</h3>
                                <p class="text-sm text-[var(--ytm-text-secondary)]">@artist.Genre</p>
                                @if (artist.Albums != null && artist.Albums.Any())
                                {
                                    <p class="text-xs text-[var(--ytm-text-tertiary)] mt-1">@artist.Albums.Count @(artist.Albums.Count == 1 ? "album" : "albums")</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination Controls -->
            @if (totalPages > 1)
            {
                <nav class="flex justify-center mt-10">
                    <ul class="inline-flex -space-x-px">
                        <li>
                            <a asp-action="Index" asp-route-page="@(currentPage - 1)" asp-route-pageSize="@pageSize" class="px-3 py-2 ml-0 leading-tight text-[var(--ytm-text-secondary)] bg-[var(--ytm-bg-tertiary)] border border-[var(--ytm-border-color)] rounded-l-lg @(currentPage == 1 ? "pointer-events-none opacity-50" : "hover:bg-[var(--ytm-bg-secondary)]")">Prev</a>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li>
                                <a asp-action="Index" asp-route-page="@i" asp-route-pageSize="@pageSize" class="px-3 py-2 leading-tight border border-[var(--ytm-border-color)] @(i == currentPage ? "bg-[var(--ytm-accent-red)] text-white" : "bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-secondary)] hover:bg-[var(--ytm-bg-secondary)]")">@i</a>
                            </li>
                        }
                        <li>
                            <a asp-action="Index" asp-route-page="@(currentPage + 1)" asp-route-pageSize="@pageSize" class="px-3 py-2 leading-tight text-[var(--ytm-text-secondary)] bg-[var(--ytm-bg-tertiary)] border border-[var(--ytm-border-color)] rounded-r-lg @(currentPage == totalPages ? "pointer-events-none opacity-50" : "hover:bg-[var(--ytm-bg-secondary)]")">Next</a>
                        </li>
                    </ul>
                </nav>
            }
            @if (!(Model.Data?.Any() ?? false))
            {
                <div class="text-center py-12">
                    <i class="fas fa-user-music text-6xl text-[var(--ytm-bg-tertiary)] mb-4"></i>
                    <h3 class="text-xl text-[var(--ytm-text-secondary)] mb-2">No artists available</h3>
                    <p class="text-[var(--ytm-text-tertiary)]">Check back later for new artists!</p>
                </div>
            }
        </div>
    </div>
}

@section Scripts {
<script>
    async function playArtistSongs(artistId, artistName) {
        try {
            const response = await fetch(`/api/Artists/${artistId}/songs`);
            if (!response.ok) throw new Error('Could not fetch songs for artist');
            const songs = await response.json();
            if (!window.musicPlayer || typeof window.musicPlayer.playSong !== 'function') {
                alert('Music player not available');
                return;
            }
            if (songs.length > 0) {
                window.musicPlayer.playSong(songs[0], songs, 0);
            } else {
                alert('No songs found for this artist.');
            }
        } catch (err) {
            alert('Error playing artist songs: ' + err.message);
        }
    }
    function showAddArtistSongsToPlaylistModal(artistId, artistName) {
        fetch(`/api/Artists/${artistId}/songs`)
            .then(response => response.json())
            .then(songs => {
                if (!songs.length) {
                    alert('No songs found for this artist.');
                    return;
                }
                fetch('/Playlists/GetUserPlaylists', {
                    method: 'GET',
                    headers: { 'RequestVerificationToken': getAntiForgeryToken() }
                })
                .then(response => response.json())
                .then(data => {
                    const playlists = data.data || [];
                    if (!playlists.length) {
                        alert('You don\'t have any playlists yet. Create a playlist first!');
                        return;
                    }
                    const modalHtml = `
                        <div id="playlistModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
                            <div style="background: var(--ytm-bg-primary); border-radius: 8px; padding: 2rem; max-width: 400px; width: 90%; max-height: 80vh; overflow-y: auto;">
                                <h3 style="color: var(--ytm-text-primary); margin-bottom: 1rem;">Add All Songs by ${artistName} to Playlist</h3>
                                <div id="playlistList" style="max-height: 300px; overflow-y: auto; margin-bottom: 1.5rem;">
                                    ${playlists.map(playlist => `
                                        <div class="playlist-item" data-playlist-id="${playlist.id}" style="display: flex; align-items: center; padding: 0.75rem; margin-bottom: 0.5rem; border: 1px solid var(--ytm-border-color); border-radius: 4px; cursor: pointer; background: var(--ytm-bg-secondary); transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='var(--ytm-bg-tertiary)'" onmouseout="this.style.backgroundColor='var(--ytm-bg-secondary)'">
                                            ${playlist.coverImageUrl ? `<img src="${playlist.coverImageUrl}" alt="${playlist.name}" style="width: 40px; height: 40px; border-radius: 4px; margin-right: 0.75rem;">` : '<div style="width: 40px; height: 40px; background: var(--ytm-bg-tertiary); border-radius: 4px; margin-right: 0.75rem; display: flex; align-items: center; justify-content: center;"><i class="bi bi-music-note-list" style="color: var(--ytm-text-secondary);"></i></div>'}
                                            <div>
                                                <div style="color: var(--ytm-text-primary); font-weight: 500;">${playlist.name}</div>
                                                <div style="color: var(--ytm-text-secondary); font-size: 0.9rem;">${playlist.songCount} songs</div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                                    <button id="cancelPlaylistModal" style="background: transparent; border: 1px solid var(--ytm-border-color); color: var(--ytm-text-secondary); padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Cancel</button>
                                </div>
                            </div>
                        </div>`;
                    document.body.insertAdjacentHTML('beforeend', modalHtml);
                    document.getElementById('cancelPlaylistModal').addEventListener('click', closePlaylistModal);
                    document.querySelectorAll('.playlist-item').forEach(item => {
                        item.addEventListener('click', function() {
                            const playlistId = this.dataset.playlistId;
                            addAllArtistSongsToPlaylist(artistId, playlistId, artistName);
                        });
                    });
                    document.getElementById('playlistModal').addEventListener('click', function(e) {
                        if (e.target === this) closePlaylistModal();
                    });
                });
            });
    }
    function closePlaylistModal() {
        const modal = document.getElementById('playlistModal');
        if (modal) modal.remove();
    }
    function addAllArtistSongsToPlaylist(artistId, playlistId, artistName) {
        fetch(`/api/Artists/${artistId}/songs`)
            .then(response => response.json())
            .then(songs => {
                if (!songs.length) {
                    alert('No songs found for this artist.');
                    closePlaylistModal();
                    return;
                }
                Promise.all(songs.map(song => fetch(`/api/Playlists/${playlistId}/songs`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ songId: song.id })
                })))
                .then(() => {
                    alert(`All songs by ${artistName} added to playlist!`);
                    closePlaylistModal();
                })
                .catch(error => {
                    alert('Error adding songs to playlist: ' + error.message);
                    closePlaylistModal();
                });
            });
    }
    function getAntiForgeryToken() {
        const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenField ? tokenField.value : '';
    }
</script>
}
