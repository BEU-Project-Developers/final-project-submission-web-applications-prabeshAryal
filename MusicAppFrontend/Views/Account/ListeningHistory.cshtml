@model MusicApp.ViewModels.ListeningHistoryViewModel
@{
    ViewData["Title"] = "Listening History";
}

<div class="container mt-4">
    <div class="row">
        <!-- Profile Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body text-center">
                    <img src="@(string.IsNullOrEmpty(User?.Identity?.Name) ? "/assets/default-profile.png" : "/assets/default-profile.png")" 
                         class="rounded-circle mb-3" width="120" height="120" alt="Profile Image"
                         onerror="this.onerror=null; this.src='/assets/default-profile.png';">
                    <h4>@User.Identity?.Name</h4>
                    <p class="text-muted">Music Lover</p>

                    <div class="d-grid gap-2 mt-3">
                        <a href="@Url.Action("Profile", "Account")" class="btn btn-primary">
                            <i class="bi bi-pencil"></i> Edit Profile
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Navigation Menu -->
            <div class="list-group mt-4 shadow-sm">
                <a href="@Url.Action("Dashboard", "Account")" class="list-group-item list-group-item-action">
                    <i class="bi bi-speedometer2 me-2"></i> Dashboard
                </a>
                <a href="@Url.Action("Profile", "Account")" class="list-group-item list-group-item-action">
                    <i class="bi bi-person me-2"></i> Profile Overview
                </a>
                <a href="#" class="list-group-item list-group-item-action active">
                    <i class="bi bi-clock-history me-2"></i> Listening History
                </a>
                <a href="@Url.Action("Index", "Playlists")" class="list-group-item list-group-item-action">
                    <i class="bi bi-music-note-list me-2"></i> My Playlists
                </a>
                <form asp-controller="Account" asp-action="Logout" method="post">
                    <button type="submit" class="list-group-item list-group-item-action w-100 text-start border-0">
                        <i class="bi bi-box-arrow-right me-2"></i> Logout
                    </button>
                </form>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-lg-9">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="bi bi-clock-history text-primary me-2"></i>
                        Listening History
                    </h1>
                    <p class="text-muted mb-0">Your complete music listening journey</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary btn-sm" onclick="exportHistory()">
                        <i class="bi bi-download me-1"></i> Export
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="bi bi-funnel me-1"></i> Filter
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="filterHistory('today')">Today</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterHistory('week')">This Week</a></li>
                            <li><a class="dropdown-item" href="#" onclick="filterHistory('month')">This Month</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="filterHistory('all')">All Time</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Summary Cards -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card bg-gradient-primary text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-white-50 mb-1">Total Plays</h6>
                                    <h4 class="mb-0">@Model.TotalCount</h4>
                                </div>
                                <i class="bi bi-music-note-beamed fs-1 text-white-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-gradient-success text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-white-50 mb-1">Songs Played</h6>
                                    <h4 class="mb-0">@Model.History.Select(h => h.Song.Id).Distinct().Count()</h4>
                                </div>
                                <i class="bi bi-collection-play fs-1 text-white-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-gradient-info text-white h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-white-50 mb-1">Total Listen Time</h6>
                                    <h4 class="mb-0">
                                        @{
                                            var totalMinutes = Model.History
                                                .Where(h => h.ListenDuration.HasValue)
                                                .Sum(h => h.ListenDuration.Value.TotalMinutes);
                                            var hours = (int)(totalMinutes / 60);
                                            var minutes = (int)(totalMinutes % 60);
                                        }
                                        @if (hours > 0)
                                        {
                                            @($"{hours}h {minutes}m")
                                        }
                                        else
                                        {
                                            @($"{minutes}m")
                                        }
                                    </h4>
                                </div>
                                <i class="bi bi-stopwatch fs-1 text-white-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- History List -->
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-list-ul me-2"></i>
                            Recent Activity
                        </h5>
                        <small class="text-muted">
                            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) - @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount)) of @Model.TotalCount plays
                        </small>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (Model.History.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var item in Model.History)
                            {
                                <div class="list-group-item border-0 p-3 listening-history-item" data-song-id="@item.Song.Id">
                                    <div class="row align-items-center">
                                        <!-- Album Art -->
                                        <div class="col-auto">
                                            <div class="position-relative">
                                                <img src="@item.Song.CoverImageUrl" 
                                                     class="rounded shadow-sm" 
                                                     width="60" height="60" 
                                                     alt="@item.Song.Title"
                                                     onerror="this.onerror=null; this.src='/images/default-cover.png';">
                                                <button class="btn btn-primary btn-sm position-absolute top-50 start-50 translate-middle play-button opacity-0" 
                                                        onclick="playSong(@item.Song.Id)" 
                                                        style="transition: opacity 0.2s;">
                                                    <i class="bi bi-play-fill"></i>
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <!-- Song Info -->
                                        <div class="col">
                                            <div class="row">
                                                <div class="col-md-8">
                                                    <h6 class="mb-1 text-truncate">@item.Song.Title</h6>
                                                    <p class="mb-1 text-muted small">@item.Song.Artist</p>
                                                    @if (!string.IsNullOrEmpty(item.Song.Album))
                                                    {
                                                        <p class="mb-0 text-muted small">@item.Song.Album</p>
                                                    }
                                                </div>
                                                <div class="col-md-4 text-md-end">
                                                    <small class="text-muted d-block">@item.FormattedPlayedAt</small>
                                                    <small class="text-muted d-block">
                                                        <i class="bi bi-clock me-1"></i>@item.FormattedListenDuration
                                                    </small>
                                                    @if (item.ListenPercentage > 0)
                                                    {
                                                        <div class="progress mt-1" style="height: 4px;">
                                                            <div class="progress-bar bg-success" 
                                                                 role="progressbar" 
                                                                 style="width: @(item.ListenPercentage)%"
                                                                 title="@(item.ListenPercentage.ToString("F1"))% completed">
                                                            </div>
                                                        </div>
                                                        <small class="text-success">@(item.ListenPercentage.ToString("F1"))% played</small>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- Actions -->
                                        <div class="col-auto">
                                            <div class="dropdown">
                                                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="dropdown">
                                                    <i class="bi bi-three-dots"></i>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="#" onclick="playSong(@item.Song.Id)">
                                                        <i class="bi bi-play me-2"></i>Play
                                                    </a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="addToQueue(@item.Song.Id)">
                                                        <i class="bi bi-plus-circle me-2"></i>Add to Queue
                                                    </a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="addToPlaylist(@item.Song.Id)">
                                                        <i class="bi bi-music-note-list me-2"></i>Add to Playlist
                                                    </a></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item" href="#" onclick="viewSongDetails(@item.Song.Id)">
                                                        <i class="bi bi-info-circle me-2"></i>Song Details
                                                    </a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-5">
                            <i class="bi bi-music-note display-1 text-muted"></i>
                            <h4 class="mt-3 text-muted">No listening history yet</h4>
                            <p class="text-muted">Start playing some music to see your listening history here!</p>
                            <a href="@Url.Action("Index", "Songs")" class="btn btn-primary">
                                <i class="bi bi-music-note-beamed me-2"></i>Browse Music
                            </a>
                        </div>
                    }
                </div>
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Listening history pagination" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="@Url.Action("ListeningHistory", new { page = Model.CurrentPage - 1, pageSize = Model.PageSize })">
                                <i class="bi bi-chevron-left"></i> Previous
                            </a>
                        </li>
                        
                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("ListeningHistory", new { page = i, pageSize = Model.PageSize })">@i</a>
                            </li>
                        }
                        
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="@Url.Action("ListeningHistory", new { page = Model.CurrentPage + 1, pageSize = Model.PageSize })">
                                Next <i class="bi bi-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

<style>
.listening-history-item:hover .play-button {
    opacity: 1 !important;
}

.listening-history-item:hover img {
    filter: brightness(0.7);
}

.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #667eea 0%, #667eea 100%);
}

.bg-gradient-info {
    background: linear-gradient(135deg, #667eea 0%, #f093fb 100%);
}

.progress {
    border-radius: 2px;
}

.listening-history-item:hover {
    background-color: #f8f9fa;
}
</style>

<script>
// Music Player Integration Functions
function playSong(songId) {
    if (typeof musicPlayer !== 'undefined') {
        // Get song details and play
        fetch(`/api/Songs/${songId}`)
            .then(response => response.json())
            .then(song => {
                musicPlayer.playSong(song);
                showNotification('Playing song', 'success');
            })
            .catch(error => {
                console.error('Error playing song:', error);
                showNotification('Error playing song', 'error');
            });
    } else {
        showNotification('Music player not available', 'warning');
    }
}

function addToQueue(songId) {
    if (typeof musicPlayer !== 'undefined') {
        fetch(`/api/Songs/${songId}`)
            .then(response => response.json())
            .then(song => {
                musicPlayer.addToQueue(song);
                showNotification('Added to queue', 'success');
            })
            .catch(error => {
                console.error('Error adding to queue:', error);
                showNotification('Error adding to queue', 'error');
            });
    } else {
        showNotification('Music player not available', 'warning');
    }
}

function addToPlaylist(songId) {
    // TODO: Implement add to playlist modal
    showNotification('Add to playlist feature coming soon!', 'info');
}

function viewSongDetails(songId) {
    window.location.href = `/Songs/Details/${songId}`;
}

function exportHistory() {
    showNotification('Export feature coming soon!', 'info');
}

function filterHistory(period) {
    showNotification(`Filtering by ${period}...`, 'info');
    // TODO: Implement filtering logic
}

// Notification function
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    console.log('Listening History page loaded');
    
    // Add smooth scroll behavior for pagination
    document.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', function(e) {
            // Scroll to top smoothly when changing pages
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    });
});
</script>
