@model MusicApp.ViewModels.ProfileViewModel
@{
    ViewData["Title"] = "Profile";
}

<div class="container mx-auto p-4 max-w-4xl">
    <!-- Profile Header -->
    <div class="sleek-card mb-8 flex flex-col sm:flex-row items-center space-y-6 sm:space-y-0 sm:space-x-8">
        <img src="@(string.IsNullOrEmpty(Model.ProfileImageUrl) ? "/assets/default-profile.png" : Model.ProfileImageUrl)"
            alt="Profile Picture"
            class="profile-avatar w-24 h-24 sm:w-32 sm:h-32 rounded-full border-4 border-ytm-accent-red object-cover shadow-md flex-shrink-0"
            onerror="this.onerror=null; this.src='/assets/default-profile.png';">
        <div class="text-center sm:text-left">
            <h1 class="text-3xl lg:text-4xl font-bold text-ytm-text-primary">@Model.FullName</h1>
            <p class="text-lg text-ytm-accent-red font-medium mt-1">@@@Model.Username</p>
            <div class="mt-3 flex items-center justify-center sm:justify-start text-ytm-text-secondary">
                <i class="bi bi-envelope me-2"></i>
                <span>@Model.Email</span>
            </div>
            <div class="mt-4 flex flex-wrap gap-2 justify-center sm:justify-start">
                @if (User.IsInRole("Admin"))
                {
                    <span class="badge bg-danger">Admin</span>
                }
                else
                {
                    <span class="badge bg-primary">Member</span>
                }
                <span class="badge bg-secondary">Joined @Model.User?.CreatedAt.ToString("MMM yyyy")</span>
            </div>
            @if (!string.IsNullOrWhiteSpace(Model.Bio))
            {
                <div class="mt-4 text-ytm-text-secondary italic text-base max-w-xl">@Model.Bio</div>
            }            <div class="mt-4">
                <button id="editProfileBtn" class="button-primary py-2 px-5 rounded-lg font-semibold">
                    <i class="bi bi-gear me-1"></i> Edit Profile / Settings
                </button>
            </div>
        </div>
    </div>

    <!-- Statistics Row -->
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8">
        <div class="sleek-card text-center">
            <div class="text-ytm-text-secondary mb-1">Total Listening Time</div>
            <div class="text-2xl font-bold">@Model.TotalListeningTime</div>
        </div>
        <div class="sleek-card text-center">
            <div class="text-ytm-text-secondary mb-1">Top Genre</div>
            <div class="text-2xl font-bold">@Model.TopGenre</div>
        </div>
        <div class="sleek-card text-center">
            <div class="text-ytm-text-secondary mb-1">Favorite Artist</div>
            <div class="text-2xl font-bold">@Model.FavoriteArtist</div>
        </div>
    </div>

    <!-- Recently Played -->
    <div class="sleek-card mb-8">
        <h2 class="text-xl font-semibold mb-4 flex items-center">
            <i class="bi bi-clock-history me-2 text-accent"></i> Recently Played
        </h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">            @foreach (var track in Model.RecentlyPlayedTracks.Take(6))
            {
                <div class="flex items-center gap-4 bg-ytm-bg-tertiary rounded-lg p-3">
                    <img src="@(string.IsNullOrEmpty(track.AlbumCoverUrl) ? "/assets/default-cover.png" : track.AlbumCoverUrl)"
                        width="56" height="56" class="rounded shadow" alt="Song Cover"
                        onerror="this.src='/assets/default-cover.png';">
                    <div>
                        <div class="font-semibold">@track.SongTitle</div>
                        <div class="text-ytm-text-secondary text-sm">@track.ArtistName</div>
                        <div class="text-ytm-text-secondary text-xs">@track.Duration</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Top Artists -->
    <div class="sleek-card mb-8">
        <h2 class="text-xl font-semibold mb-4 flex items-center">
            <i class="bi bi-stars me-2 text-accent"></i> Top Artists
        </h2>
        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
            @foreach (var artist in Model.TopArtists.Take(4))
            {
                <div class="text-center">
                    <img src="@(string.IsNullOrEmpty(artist.ArtistImageUrl) ? "/assets/default-artist.png" : artist.ArtistImageUrl)"
                        width="64" height="64" class="rounded-full mx-auto mb-2 shadow" alt="Artist"
                        onerror="this.src='/assets/default-artist.png';">
                    <div class="font-semibold">@artist.ArtistName</div>
                    <div class="text-ytm-text-secondary text-sm">@artist.PlayCount plays</div>
                </div>
            }
        </div>
    </div>

    <!-- Activity Feed -->
    <div class="sleek-card mb-8">
        <h2 class="text-xl font-semibold mb-4 flex items-center">
            <i class="bi bi-activity me-2 text-accent"></i> Recent Activity
        </h2>
        <div class="divide-y divide-ytm-border">
            @foreach (var activity in Model.ActivityFeedItems.Take(6))
            {
                <div class="py-3 flex items-center gap-3">
                    <span class="badge rounded-circle p-2 bg-secondary">
                        <i class="@(activity.IconClass)"></i>
                    </span>
                    <div>
                        <div>@Html.Raw(activity.Description)</div>
                        <div class="text-ytm-text-secondary text-xs">@activity.TimeAgo</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Playlists Preview -->
    <div class="sleek-card mb-8">
        <h2 class="text-xl font-semibold mb-4 flex items-center">
            <i class="bi bi-music-note-list me-2 text-accent"></i> My Playlists
        </h2>
        <div class="playlist-grid">
            @foreach (var playlist in Model.User?.Playlists?.OrderByDescending(p => p.CreatedAt).Take(3) ??
                        Enumerable.Empty<MusicApp.Models.Playlist>())
            {
                <div class="playlist-card group" data-playlist-id="@playlist.Id">
                    <a href="@Url.Action("Details", "Playlists", new { id = playlist.Id })" class="playlist-link">
                        <div class="playlist-cover-container">
                            <img src="@(string.IsNullOrEmpty(playlist.CoverImageUrl) ? "/assets/default-cover.png" : playlist.CoverImageUrl)"
                                class="playlist-cover" alt="@playlist.Name" onerror="this.src='/assets/default-cover.png';">
                            <div class="playlist-overlay">
                                <div class="overlay-actions">
                                    <button class="play-button primary"
                                        onclick="event.preventDefault(); playPlaylist(@playlist.Id)"><i
                                            class="bi bi-play-fill"></i></button>
                                    <button class="shuffle-button"
                                        onclick="event.preventDefault(); shufflePlaylist(@playlist.Id)" title="Shuffle"><i
                                            class="bi bi-shuffle"></i></button>
                                </div>
                            </div>
                            <div class="playlist-shadow"></div>
                        </div>
                        <div class="playlist-info">
                            <h3 class="playlist-title">@playlist.Name</h3>
                            @if (!string.IsNullOrEmpty(playlist.Description))
                            {
                                <p class="playlist-description">@playlist.Description</p>
                            }
                            <div class="playlist-meta">
                                <div class="flex items-center space-x-4 text-sm">
                                    <span class="flex items-center space-x-1">
                                        <i class="bi bi-music-note-list text-xs"></i>
                                        <span>@(playlist.Songs?.Count ?? 0) songs</span>
                                    </span>
                                    <span class="flex items-center space-x-1">
                                        <i class="bi bi-person text-xs"></i>
                                        <span>@playlist.User?.Username</span>
                                    </span>
                                </div>
                                <div class="flex items-center justify-between mt-2">
                                    <span class="playlist-date">@playlist.CreatedAt.ToString("MMM d, yyyy")</span>
                                    <span class="playlist-privacy-badge @(playlist.IsPublic ? "public" : "private")">
                                        <i class="bi bi-@(playlist.IsPublic ? "globe" : "lock")"></i>
                                        @(playlist.IsPublic ? "Public" : "Private")
                                    </span>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
        <div class="mt-6 text-center">
            <a href="@Url.Action("Index", "Playlists")"
                class="button-primary font-semibold py-2 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center mx-auto hover:bg-opacity-90">
                View All Playlists <i class="bi bi-arrow-right ms-2"></i>
            </a>
        </div>
    </div>
</div>

<style>
    .sleek-card {
        background-color: var(--ytm-bg-secondary);
        border-radius: 0.75rem;
        box-shadow: 0 0 0 1px var(--ytm-border-color), 0px 5px 15px rgba(0, 0, 0, 0.2);
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .profile-avatar {
        min-width: 8rem;
        min-height: 8rem;
    }

    .button-primary {
        background-color: var(--ytm-accent-red);
        color: var(--ytm-text-primary);
        border: none;
    }

    .button-primary:hover {
        background-color: #D60000;
    }

    .playlist-card-image {
        aspect-ratio: 1 / 1;
        object-fit: cover;
    }

    .text-accent {
        color: var(--ytm-accent-red);
    }

    .playlist-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1rem;
    }

    .playlist-card {
        position: relative;
        background-color: var(--ytm-bg-tertiary);
        border-radius: 0.5rem;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .playlist-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .playlist-cover-container {
        position: relative;
        width: 100%;
        padding-top: 100%;
        /* 1:1 Aspect Ratio */
    }

    .playlist-cover {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .playlist-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s;
    }

    .playlist-card:hover .playlist-overlay {
        opacity: 1;
    }

    .overlay-actions {
        display: flex;
        gap: 0.5rem;
    }

    .play-button,
    .shuffle-button {
        background: var(--ytm-accent-red);
        color: white;
        border: none;
        padding: 0.5rem;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    .play-button:hover,
    .shuffle-button:hover {
        background: #D60000;
    }

    .playlist-info {
        padding: 1rem;
    }

    .playlist-title {
        font-size: 1.125rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--ytm-text-primary);
    }

    .playlist-description {
        font-size: 0.875rem;
        color: var(--ytm-text-secondary);
        margin-bottom: 0.5rem;
    }

    .playlist-meta {
        font-size: 0.875rem;
        color: var(--ytm-text-secondary);
    }

    .playlist-date {
        white-space: nowrap;
    }

    .playlist-privacy-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.125rem 0.5rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        margin-left: auto;
    }

    .playlist-privacy-badge.public {
        background: rgba(0, 128, 0, 0.1);
        color: green;
    }    .playlist-privacy-badge.private {
        background: rgba(255, 0, 0, 0.1);
        color: red;
    }
</style>

<!-- Profile Edit Modal -->
<div id="profileEditModal" class="modal fade" tabindex="-1" aria-labelledby="profileEditModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="background: var(--ytm-bg-primary); border: 1px solid var(--ytm-border-color);">
            <div class="modal-header" style="border-bottom: 1px solid var(--ytm-border-color);">
                <h5 class="modal-title" id="profileEditModalLabel" style="color: var(--ytm-text-primary);">
                    <i class="bi bi-person-gear me-2"></i>Edit Profile
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="profileEditForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    
                    <!-- Profile Image Section -->
                    <div class="row mb-4">
                        <div class="col-md-4 text-center">
                            <div class="profile-image-section">
                                <img id="currentProfileImage" 
                                     src="@(string.IsNullOrEmpty(Model.ProfileImageUrl) ? "/assets/default-profile.png" : Model.ProfileImageUrl)" 
                                     alt="Profile Picture" 
                                     class="rounded-circle mb-3" 
                                     style="width: 120px; height: 120px; object-fit: cover; border: 3px solid var(--ytm-accent-red);"
                                     onerror="this.onerror=null; this.src='/assets/default-profile.png';">
                                
                                <div>
                                    <label for="profileImageInput" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-camera me-1"></i>Change Photo
                                    </label>
                                    <input type="file" id="profileImageInput" name="ProfileImage" accept="image/*" style="display: none;">
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-8">
                            <!-- Full Name -->
                            <div class="mb-3">
                                <label for="fullName" class="form-label" style="color: var(--ytm-text-primary);">Full Name</label>
                                <input type="text" class="form-control" id="fullName" name="FullName" value="@Model.FullName" 
                                       style="background: var(--ytm-bg-secondary); border: 1px solid var(--ytm-border-color); color: var(--ytm-text-primary);">
                            </div>
                            
                            <!-- Username -->
                            <div class="mb-3">
                                <label for="username" class="form-label" style="color: var(--ytm-text-primary);">Username</label>
                                <input type="text" class="form-control" id="username" name="Username" value="@Model.Username" 
                                       style="background: var(--ytm-bg-secondary); border: 1px solid var(--ytm-border-color); color: var(--ytm-text-primary);">
                            </div>
                            
                            <!-- Email (Read-only) -->
                            <div class="mb-3">
                                <label for="email" class="form-label" style="color: var(--ytm-text-primary);">Email</label>
                                <input type="email" class="form-control" id="email" value="@Model.Email" readonly 
                                       style="background: var(--ytm-bg-tertiary); border: 1px solid var(--ytm-border-color); color: var(--ytm-text-secondary);">
                                <small class="form-text" style="color: var(--ytm-text-secondary);">Email cannot be changed</small>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Bio Section -->
                    <div class="mb-3">
                        <label for="bio" class="form-label" style="color: var(--ytm-text-primary);">Bio</label>
                        <textarea class="form-control" id="bio" name="Bio" rows="3" placeholder="Tell us about yourself..." 
                                  style="background: var(--ytm-bg-secondary); border: 1px solid var(--ytm-border-color); color: var(--ytm-text-primary);">@Model.Bio</textarea>
                        <small class="form-text" style="color: var(--ytm-text-secondary);">Maximum 1000 characters</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="border-top: 1px solid var(--ytm-border-color);">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveProfileBtn" class="btn btn-primary">
                    <i class="bi bi-check2 me-1"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const editProfileBtn = document.getElementById('editProfileBtn');
    const profileEditModal = new bootstrap.Modal(document.getElementById('profileEditModal'));
    const profileImageInput = document.getElementById('profileImageInput');
    const currentProfileImage = document.getElementById('currentProfileImage');
    const saveProfileBtn = document.getElementById('saveProfileBtn');
    
    // Open modal when edit button is clicked
    editProfileBtn.addEventListener('click', function() {
        profileEditModal.show();
    });
    
    // Handle profile image preview
    profileImageInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                currentProfileImage.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    });
    
    // Handle form submission
    saveProfileBtn.addEventListener('click', function() {
        const form = document.getElementById('profileEditForm');
        const formData = new FormData(form);
        
        // Show loading state
        saveProfileBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Saving...';
        saveProfileBtn.disabled = true;
        
        // Send AJAX request to update profile
        fetch('@Url.Action("UpdateProfile", "Account")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the dashboard display
                document.querySelector('.profile-avatar').src = data.profileImageUrl || currentProfileImage.src;
                document.querySelector('h1').textContent = data.fullName || document.getElementById('fullName').value;
                document.querySelector('.text-ytm-accent-red').textContent = '@@' + (data.username || document.getElementById('username').value);
                
                // Update bio if it exists
                const bioElement = document.querySelector('.mt-4.text-ytm-text-secondary.italic');
                const newBio = document.getElementById('bio').value;
                if (newBio.trim()) {
                    if (bioElement) {
                        bioElement.textContent = newBio;
                    } else {
                        // Create bio element if it doesn't exist
                        const bioDiv = document.createElement('div');
                        bioDiv.className = 'mt-4 text-ytm-text-secondary italic text-base max-w-xl';
                        bioDiv.textContent = newBio;
                        document.querySelector('.mt-4').parentNode.insertBefore(bioDiv, document.querySelector('.mt-4'));
                    }
                } else if (bioElement) {
                    bioElement.remove();
                }
                
                profileEditModal.hide();
                
                // Show success message
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show mt-3';
                alertDiv.innerHTML = `
                    <i class="bi bi-check-circle me-2"></i>Profile updated successfully!
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.querySelector('.container').prepend(alertDiv);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    alertDiv.remove();
                }, 5000);
            } else {
                alert('Error updating profile: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating your profile. Please try again.');
        })
        .finally(() => {
            // Reset button state
            saveProfileBtn.innerHTML = '<i class="bi bi-check2 me-1"></i>Save Changes';
            saveProfileBtn.disabled = false;
        });
    });
});
</script>