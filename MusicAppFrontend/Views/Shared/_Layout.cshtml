@* Views/Shared/_Layout.cshtml *@
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
@* Default to dark theme *@
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Music App</title>

    @* Bootstrap CSS *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    @* Bootstrap Icons *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    @* Font Awesome Icons *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    @* Tailwind CSS *@
    <script src="https://cdn.tailwindcss.com"></script>

    @* Google Font (Roboto) *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

    @* Link to your site.css (Contains all styles below) *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    @await RenderSectionAsync("Styles", required: false)
    
    @* Add custom styles for auth modal *@
    <style>
        /* Modal backdrop blur */
        .modal-backdrop.show {
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            background-color: rgba(0, 0, 0, 0.85);
        }

        .auth-modal .modal-dialog {
            max-width: 450px;
        }

        .auth-modal .modal-content {
            background: var(--bs-body-bg);
            border: none;
            border-radius: 16px;
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }

        .auth-modal .modal-header {
            border-bottom: 1px solid var(--bs-border-color);
            padding: 1.5rem 2rem 1rem;
            background: linear-gradient(135deg, var(--bs-body-bg) 0%, rgba(255, 0, 0, 0.02) 100%);
        }

        .auth-modal .modal-body {
            padding: 1rem 2rem 2rem;
        }

        .auth-modal .modal-title {
            font-weight: 600;
            font-size: 1.5rem;
            color: var(--bs-body-color);
        }

        /* Enhanced tab styling */
        .auth-modal .nav-tabs {
            border: none;
            margin-bottom: 1.5rem;
        }

        .auth-modal .nav-tabs .nav-link {
            border: none;
            border-radius: 12px;
            margin: 0 0.25rem;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            color: var(--bs-secondary);
            background: transparent;
            transition: all 0.3s ease;
            position: relative;
        }

        .auth-modal .nav-tabs .nav-link:hover {
            color: #ff0000;
            background: rgba(255, 0, 0, 0.05);
            border: none;
        }

        .auth-modal .nav-tabs .nav-link.active {
            color: #ffffff;
            background: linear-gradient(135deg, #ff0000 0%, #cc0000 100%);
            border: none;
            box-shadow: 0 4px 12px rgba(255, 0, 0, 0.3);
        }

        .auth-modal .nav-tabs .nav-link.active:hover {
            color: #ffffff;
            background: linear-gradient(135deg, #cc0000 0%, #aa0000 100%);
        }

        /* Form styling */
        .auth-modal .form-control {
            background: var(--bs-body-bg);
            border: 2px solid var(--bs-border-color);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            transition: all 0.2s ease;
        }

        .auth-modal .form-control:focus {
            border-color: #ff0000;
            box-shadow: 0 0 0 0.2rem rgba(255, 0, 0, 0.15);
            background: var(--bs-body-bg);
        }

        .auth-modal .form-label {
            color: var(--bs-body-color);
            font-weight: 500;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        /* Button styling */
        .auth-modal .btn-primary {
            background: linear-gradient(135deg, #ff0000 0%, #cc0000 100%);
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(255, 0, 0, 0.3);
        }

        .auth-modal .btn-primary:hover {
            background: linear-gradient(135deg, #cc0000 0%, #aa0000 100%);
            box-shadow: 0 6px 16px rgba(255, 0, 0, 0.4);
            transform: translateY(-1px);
        }

        .auth-modal .btn-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(255, 0, 0, 0.3);
        }

        .auth-modal .btn-primary:focus {
            box-shadow: 0 0 0 0.2rem rgba(255, 0, 0, 0.25), 0 4px 12px rgba(255, 0, 0, 0.3);
        }

        /* Remember me checkbox */
        .auth-modal .form-check-input {
            border: 2px solid var(--bs-border-color);
            border-radius: 4px;
        }

        .auth-modal .form-check-input:checked {
            background-color: #ff0000;
            border-color: #ff0000;
        }

        .auth-modal .form-check-input:focus {
            border-color: #ff0000;
            box-shadow: 0 0 0 0.2rem rgba(255, 0, 0, 0.15);
        }

        /* Switch links */
        .auth-modal .auth-switch {
            color: #ff0000;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .auth-modal .auth-switch:hover {
            color: #cc0000;
            text-decoration: underline;
        }

        /* Alert styling */
        .auth-modal .alert {
            border-radius: 8px;
            border: none;
            margin-bottom: 1.5rem;
        }

        .auth-modal .alert-danger {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-left: 4px solid #dc3545;
        }

        .auth-modal .alert-success {
            background: rgba(25, 135, 84, 0.1);
            color: #198754;
            border-left: 4px solid #198754;
        }

        /* Loading spinner */
        .auth-modal .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }        /* Responsive adjustments */
        @@media (max-width: 576px) {
            .auth-modal .modal-dialog {
                max-width: 95%;
                margin: 1rem;
            }
            
            .auth-modal .modal-header,
            .auth-modal .modal-body {
                padding-left: 1.5rem;
                padding-right: 1.5rem;
            }
            
            .auth-modal .nav-tabs .nav-link {
                padding: 0.6rem 1rem;
                font-size: 0.9rem;
            }
        }

        /* Sticky Music Player */
        .sticky-music-player {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--bs-body-bg);
            border-top: 1px solid var(--bs-border-color);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
            z-index: 1030;
        }

        .music-player-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.5rem 1rem;
        }

        .player-info {
            display: flex;
            align-items: center;
        }

        .player-album-art {
            width: 50px;
            height: 50px;
            border-radius: 5px;
            object-fit: cover;
            margin-right: 0.75rem;
        }

        .player-song-title {
            font-weight: 500;
            color: var(--bs-body-color);
        }

        .player-artist-name {
            font-size: 0.875rem;
            color: var(--bs-muted);
        }

        .player-controls {
            display: flex;
            align-items: center;
        }

        .control-buttons {
            display: flex;
            align-items: center;
            margin-right: 1rem;
        }

        .control-btn {
            background: transparent;
            border: none;
            color: var(--bs-body-color);
            font-size: 1.25rem;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .control-btn:hover {
            color: #ff0000;
        }

        .progress-container {
            display: flex;
            align-items: center;
            flex-grow: 1;
        }

        .time-display {
            font-size: 0.875rem;
            color: var(--bs-muted);
            min-width: 40px;
        }

        .progress-bar-container {
            flex-grow: 1;
            margin: 0 0.5rem;
        }

        .progress-bar {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 4px;
            border-radius: 2px;
            background: var(--bs-border-color);
            outline: none;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        .progress-bar:hover {
            opacity: 1;
        }

        /* Webkit (Chrome/Safari) styles for progress bar */
        .progress-bar::-webkit-slider-track {
            width: 100%;
            height: 4px;
            cursor: pointer;
            background: var(--bs-border-color);
            border-radius: 2px;
            border: none;
        }

        .progress-bar::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            height: 12px;
            width: 12px;
            border-radius: 50%;
            background: #ff0000;
            cursor: pointer;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }

        .progress-bar::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }

        /* Firefox styles for progress bar */
        .progress-bar::-moz-range-track {
            width: 100%;
            height: 4px;
            cursor: pointer;
            background: var(--bs-border-color);
            border-radius: 2px;
            border: none;
        }

        .progress-bar::-moz-range-thumb {
            height: 12px;
            width: 12px;
            border-radius: 50%;
            background: #ff0000;
            cursor: pointer;
            border: none;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }

        .progress-bar::-moz-range-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }

        /* Progress fill effect using gradient */
        .progress-bar {
            background: linear-gradient(to right, #ff0000 0%, #ff0000 var(--progress, 0%), var(--bs-border-color) var(--progress, 0%), var(--bs-border-color) 100%);
        }

        .volume-container {
            display: flex;
            align-items: center;
        }

        .volume-bar {
            -webkit-appearance: none;
            appearance: none;
            width: 100px;
            height: 4px;
            border-radius: 2px;
            background: var(--bs-border-color);
            outline: none;
            margin-left: 0.5rem;
        }

        /* Hide audio element */
        audio {
            display: none;
        }
    </style>

</head>
<body class="sidebar-collapsed">
    @* Start with sidebar collapsed on larger screens by default *@

    @* Top Bar: Fixed navigation header *@
    <header class="top-bar">
        @* Sidebar Toggle Buttons (Desktop and Mobile) *@
        <button id="sidebar-toggle" class="sidebar-toggle-btn d-none d-lg-block" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>
        <button id="mobile-sidebar-toggle" class="mobile-sidebar-toggle d-lg-none" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>

        @* Brand/Logo *@
        <a class="navbar-brand" href="/">
            <i class="bi bi-music-note-beamed"></i>
            <span class="d-none d-sm-inline ms-2">Music App</span>
        </a>

        @* Search Bar Container *@
        <div class="search-container">
            <form method="get" action="@Url.Action("SearchResults", "Home")">
            <div class="input-group">
                    <input type="text" name="q" class="form-control search-box" placeholder="Search" aria-label="Search">
                    <button class="btn search-btn" type="submit" aria-label="Search button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
            </form>
        </div>

        @* Profile Button *@
        <div class="nav-item">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="dropdown">
                    <a href="#" class="btn btn-link nav-link dropdown-toggle" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="@(string.IsNullOrEmpty(ViewData["UserProfileImage"] as string) ? "/assets/default-profile.png" : ViewData["UserProfileImage"] as string)" 
                             class="rounded-circle profile-image" width="32" height="32" alt="Profile"
                             onerror="this.onerror=null; this.src='/assets/default-profile.png';">
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li><a class="dropdown-item" href="@Url.Action("Dashboard", "Account")">Dashboard</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Profile", "Account")">Edit Profile</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form class="form-inline" asp-area="" asp-controller="Account" asp-action="Logout" method="post">
                                <button type="submit" class="dropdown-item">Logout</button>
                            </form>
                        </li>
                    </ul>
                </div>
            }            else
            {
                <button type="button" class="btn btn-link nav-link" data-bs-toggle="modal" data-bs-target="#authModal" data-auth-mode="login">
                    <i class="bi bi-person-circle" style="font-size: 2rem;"></i>
                </button>
            }
        </div>
    </header>    @* Auth Modal *@
    <div class="modal fade auth-modal" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">Welcome</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs nav-justified mb-4" id="authTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="login-tab" data-bs-toggle="tab" data-bs-target="#login-tab-pane" 
                                    type="button" role="tab" aria-controls="login-tab-pane" aria-selected="true">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Sign In
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="register-tab" data-bs-toggle="tab" data-bs-target="#register-tab-pane" 
                                    type="button" role="tab" aria-controls="register-tab-pane" aria-selected="false">
                                <i class="bi bi-person-plus me-2"></i>Create Account
                            </button>
                        </li>
                    </ul>                    <div class="tab-content" id="authTabsContent">
                        <div class="tab-pane fade show active" id="login-tab-pane" role="tabpanel" aria-labelledby="login-tab" tabindex="0">
                            @await Html.PartialAsync("_LoginPartial", new MusicApp.ViewModels.LoginViewModel { UserIdentifier = "", Password = "" })
                        </div>
                        <div class="tab-pane fade" id="register-tab-pane" role="tabpanel" aria-labelledby="register-tab" tabindex="0">
                            @await Html.PartialAsync("_RegisterPartial", new MusicApp.ViewModels.RegisterViewModel { FirstName = "", LastName = "", Username = "", Email = "", Password = "", ConfirmPassword = "" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Sidebar Navigation *@
    <aside class="sidebar" id="sidebar">
        @* Scrollable Navigation Area *@
        <div class="sidebar-sticky-content">
            <ul class="nav flex-column">
                @* Navigation Links - dynamically set active state *@
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "active" : "")" href="/">
                        <i class="bi bi-house-door-fill"></i> <span class="sidebar-text">Home</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Artists" ? "active" : "")" href="/Artists">
                        <i class="bi bi-people-fill"></i> <span class="sidebar-text">Artists</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Albums" ? "active" : "")" href="/Albums">
                        <i class="bi bi-disc-fill"></i> <span class="sidebar-text">Albums</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Playlists" ? "active" : "")" href="/Playlists">
                        <i class="bi bi-music-note-list"></i> <span class="sidebar-text">Playlists</span>
                    </a>
                </li>

                @if (User.Identity?.IsAuthenticated == true)
                {
                    <li><hr class="mx-3 sidebar-divider"></li>
                    <li class="nav-item">
                        <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")" href="@Url.Action("Dashboard", "Account")">
                            <i class="bi bi-speedometer2"></i> <span class="sidebar-text">Dashboard</span>
                        </a>
                    </li>
                    @if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "AdminDashboard" ? "active" : "")" href="@Url.Action("AdminDashboard", "Account")">
                                <i class="bi bi-shield-lock"></i> <span class="sidebar-text">Admin Panel</span>
                            </a>
                        </li>
                    }
                }

                @* Divider *@
                <li><hr class="mx-3 sidebar-divider"></li>

                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "About" ? "active" : "")" href="/Home/About">
                        <i class="bi bi-info-circle-fill"></i> <span class="sidebar-text">About</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Privacy" ? "active" : "")" href="/Home/Privacy">
                        <i class="bi bi-shield-check"></i> <span class="sidebar-text">Privacy</span>
                    </a>
                </li>
            </ul>
        </div>

        @* Non-scrolling bottom part (for theme toggle) *@
        <div class="mt-auto pb-2 sidebar-bottom-section">
            <hr class="mx-3 sidebar-divider">

            @* --- Theme Toggle Area --- *@
            @* Slider Toggle (Visible when sidebar is expanded) *@
            <div class="theme-switch-wrapper" id="theme-switch-expanded">
                <label class="theme-switch" for="theme-toggle-checkbox" aria-label="Toggle theme slider">
                    <input type="checkbox" id="theme-toggle-checkbox">
                    <span class="slider round"></span>
                </label>
                <span class="sidebar-text ms-2 theme-switch-label" id="theme-switch-label">Theme</span>
            </div>

            @* Icon Button Toggle (Visible when sidebar is collapsed) *@
            <button type="button" class="btn nav-link theme-toggle-icon-btn" id="theme-toggle-collapsed" aria-label="Toggle theme">
                @* Icon (e.g., bi-sun-fill or bi-moon-fill) will be set by JavaScript *@
                <i id="theme-toggle-icon" class="bi"></i>
            </button>
            @* --- End Theme Toggle Area --- *@
        </div>
    </aside>

    @* Main Content Wrapper *@
    <div class="content-wrapper" id="content-wrapper">
        <main role="main" class="p-4">
            @* Add padding directly to main *@
            @RenderBody()
        </main>
    </div>

    @* Sticky Music Player *@
    <div id="sticky-music-player" class="sticky-music-player d-none">
        <div class="music-player-container">
            @* Song Information *@
            <div class="player-info">
                <img id="player-album-art" src="" alt="Album Art" class="player-album-art">
                <div class="player-song-details">
                    <div id="player-song-title" class="player-song-title">Song Title</div>
                    <div id="player-artist-name" class="player-artist-name">Artist Name</div>
                </div>
            </div>

            @* Player Controls *@
            <div class="player-controls">
                <div class="control-buttons">
                    <button id="player-prev" class="control-btn" title="Previous">
                        <i class="bi bi-skip-start-fill"></i>
                    </button>
                    <button id="player-play-pause" class="control-btn play-pause-btn" title="Play/Pause">
                        <i class="bi bi-play-fill"></i>
                    </button>
                    <button id="player-next" class="control-btn" title="Next">
                        <i class="bi bi-skip-end-fill"></i>
                    </button>
                </div>
                
                <div class="progress-container">
                    <span id="player-current-time" class="time-display">0:00</span>
                    <div class="progress-bar-container">
                        <input type="range" id="player-progress" class="progress-bar" min="0" max="100" value="0">
                    </div>
                    <span id="player-duration" class="time-display">0:00</span>
                </div>
            </div>

            @* Volume and Additional Controls *@
            <div class="player-extras">
                <button id="player-queue" class="control-btn" title="Queue">
                    <i class="bi bi-list-ul"></i>
                </button>
                <div class="volume-container">
                    <button id="player-volume-btn" class="control-btn" title="Volume">
                        <i class="bi bi-volume-up-fill"></i>
                    </button>
                    <input type="range" id="player-volume" class="volume-bar" min="0" max="100" value="70">
                </div>
                <button id="player-repeat" class="control-btn" title="Repeat">
                    <i class="bi bi-arrow-repeat"></i>
                </button>
                <button id="player-shuffle" class="control-btn" title="Shuffle">
                    <i class="bi bi-shuffle"></i>
                </button>
                <button id="player-minimize" class="control-btn" title="Hide Player">
                    <i class="bi bi-chevron-down"></i>
                </button>
            </div>
        </div>

        @* Hidden Audio Element *@
        <audio id="music-audio" preload="metadata"></audio>
    </div>

    @* Bootstrap JS Bundle *@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @* API Utilities *@
    <script src="~/js/api-utils.js" asp-append-version="true"></script>
    @* Music Player JS *@
    <script src="~/js/music-player.js" asp-append-version="true"></script>
    @* Site Specific JS (Contains all script logic below) *@
    <script src="~/js/site.js" asp-append-version="true"></script>

    @* Render section for page-specific scripts *@
    @await RenderSectionAsync("Scripts", required: false)
    
    @* Auth modal JavaScript *@
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const authModal = document.getElementById('authModal');
            const loginForm = document.getElementById('loginForm');
            const registerForm = document.getElementById('registerForm');

            // Handle modal opening with specific tab
            authModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                const mode = button.dataset.authMode || 'login'; // Default to login
                
                if (mode === 'register') {
                    // Switch to register tab
                    const registerTab = new bootstrap.Tab(document.getElementById('register-tab'));
                    registerTab.show();
                } else {
                    // Switch to login tab
                    const loginTab = new bootstrap.Tab(document.getElementById('login-tab'));
                    loginTab.show();
                }
                
                // Clear any existing alerts
                clearAlerts();
            });

            // Reset forms when modal is closed
            authModal.addEventListener('hidden.bs.modal', function() {
                if (loginForm) {
                    loginForm.reset();
                }
                if (registerForm) {
                    registerForm.reset();
                }
                clearAlerts();
                resetButtons();
            });

            function clearAlerts() {
                const alerts = authModal.querySelectorAll('.alert');
                alerts.forEach(alert => alert.classList.add('d-none'));
            }

            function resetButtons() {
                // Reset login buttons
                const loginSubmitBtn = document.getElementById('loginSubmitBtn');
                const loginLoadingBtn = document.getElementById('loginLoadingBtn');
                if (loginSubmitBtn && loginLoadingBtn) {
                    loginSubmitBtn.classList.remove('d-none');
                    loginLoadingBtn.classList.add('d-none');
                }

                // Reset register buttons
                const registerSubmitBtn = document.getElementById('registerSubmitBtn');
                const registerLoadingBtn = document.getElementById('registerLoadingBtn');
                if (registerSubmitBtn && registerLoadingBtn) {
                    registerSubmitBtn.classList.remove('d-none');
                    registerLoadingBtn.classList.add('d-none');
                }
            }

            function showAlert(alertElement, message, type = 'danger') {
                if (alertElement) {
                    alertElement.textContent = message;
                    alertElement.className = `alert alert-${type}`;
                    alertElement.classList.remove('d-none');
                }
            }

            // Handle login form submission
            if (loginForm) {
                loginForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    // Instead of AJAX, submit the form as a normal POST so the server can set the auth cookie and redirect
                    loginForm.submit();
                });
            }

            // Handle register form submission
            if (registerForm) {
                registerForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const registerSubmitBtn = document.getElementById('registerSubmitBtn');
                    const registerLoadingBtn = document.getElementById('registerLoadingBtn');
                    const registerFormAlert = document.getElementById('registerFormAlert');
                    
                    // Validate password match
                    const password = document.getElementById('registerPassword').value;
                    const confirmPassword = document.getElementById('registerConfirmPassword').value;
                    if (password !== confirmPassword) {
                        showAlert(registerFormAlert, 'Passwords do not match.', 'danger');
                        return;
                    }
                    
                    // Switch to loading state
                    registerSubmitBtn.classList.add('d-none');
                    registerLoadingBtn.classList.remove('d-none');
                    registerFormAlert.classList.add('d-none');
                    
                    const formData = new FormData(this);
                    
                    try {
                        const response = await fetch('@Url.Action("Register", "Account")', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        let data;
                        try {
                            const responseText = await response.text();
                            data = responseText ? JSON.parse(responseText) : { success: false, message: 'Empty response from server' };
                        } catch (jsonError) {
                            data = { success: false, message: 'Error processing server response' };
                        }

                        if (response.ok && data && data.success) {
                            showAlert(registerFormAlert, 'Registration successful! Redirecting...', 'success');
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            let errorMsg = 'Registration failed. ';
                            if (data && data.message) {
                                errorMsg += data.message;
                            } else if (!response.ok) {
                                errorMsg += `Server returned ${response.status} ${response.statusText}`;
                            } else {
                                errorMsg += 'Please try again.';
                            }
                            
                            showAlert(registerFormAlert, errorMsg, 'danger');
                            
                            // Reset buttons
                            registerSubmitBtn.classList.remove('d-none');
                            registerLoadingBtn.classList.add('d-none');
                        }
                    } catch (error) {
                        showAlert(registerFormAlert, 'An error occurred. Please try again.', 'danger');
                        
                        // Reset buttons
                        registerSubmitBtn.classList.remove('d-none');
                        registerLoadingBtn.classList.add('d-none');
                    }
                });
            }
        });
    </script>
</body>
</html>
