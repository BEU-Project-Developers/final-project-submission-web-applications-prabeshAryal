@model MusicApp.Models.DTOs.SongDto
@{
    ViewData["Title"] = $"{Model.Title} - Song";

    Random randomGen = new Random();
    string GetRandomImageUrl(int width, int height)
    {
        int randomId = randomGen.Next(1, 1085);
        return $"https://picsum.photos/id/{randomId}/{width}/{height}";
    }
}

<style>
    .song-container {
        background-color: #1f1f1f;
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .song-header {
        display: flex;
        padding: 2rem;
    }

    .song-cover {
        width: 300px;
        height: 300px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        margin-right: 2rem;
    }

    .song-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .song-title-section {
        margin-bottom: 1rem;
    }

    .song-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #ffffff;
        margin-bottom: 0.5rem;
    }

    .song-artist {
        font-size: 1.3rem;
        color: #aaaaaa;
        margin-bottom: 1rem;
    }

    .song-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        color: #aaaaaa;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
    }

    .meta-item i {
        margin-right: 0.5rem;
    }

    .song-actions {
        display: flex;
        gap: 1rem;
        margin-top: auto;
    }

    .btn-play {
        background-color: #ff0000;
        color: #ffffff;
        border: none;
        border-radius: 20px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        display: flex;
        align-items: center;
    }

    .btn-play i {
        margin-right: 0.5rem;
        font-size: 1.1rem;
    }

    .btn-play:hover {
        background-color: #cc0000;
        color: #ffffff;
    }

    .btn-action {
        color: #aaaaaa;
        border: 1px solid #444444;
        background: transparent;
        border-radius: 20px;
        padding: 0.5rem 1.5rem;
        display: flex;
        align-items: center;
    }

    .btn-action i {
        margin-right: 0.5rem;
    }

    .btn-action:hover {
        background-color: #333333;
        color: #ffffff;
    }

    .song-player {
        padding: 1rem 2rem;
        border-top: 1px solid #444444;
    }

    .player-container {
        width: 100%;
        background-color: #333333;
        padding: 1rem;
        border-radius: 8px;
    }

    .audio-player {
        width: 100%;
    }    .related-section {
        margin-top: 2rem;
    }

    .section-title {
        color: #ffffff;
        margin-bottom: 1.5rem;
        font-weight: 500;
    }

    .related-tracks {
        background-color: #1f1f1f;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #444444;
    }

    .track-item {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #444444;
        transition: background-color 0.2s ease;
    }

    .track-item:last-child {
        border-bottom: none;
    }

    .track-item:hover {
        background-color: #333333;
    }

    .track-cover {
        width: 40px;
        height: 40px;
        border-radius: 4px;
        margin-right: 1rem;
        object-fit: cover;
    }

    .track-info {
        flex: 1;
    }

    .track-title {
        color: #ffffff;
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .track-artist {
        color: #aaaaaa;
        font-size: 0.85rem;
    }

    .track-duration {
        color: #aaaaaa;
        margin-left: 1rem;
        font-size: 0.9rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .song-header {
            flex-direction: column;
        }

        .song-cover {
            margin-right: 0;
            margin-bottom: 1.5rem;
            width: 100%;
            max-width: 300px;
            align-self: center;
        }
    }
</style>

<div class="song-container">
    <div class="song-header">
        <img src="@(Model.CoverImageUrl ?? GetRandomImageUrl(300, 300))" alt="@Model.Title cover" class="song-cover"
            onerror="this.src='https://placehold.co/300x300/212121/AAAAAA?text=Song';">
        
        <div class="song-info">            <div class="song-title-section">
                <div class="song-title">@Model.Title</div>
                <div class="song-artist">
                    @if (Model.Artists != null && Model.Artists.Any())
                    {
                        @for (int i = 0; i < Model.Artists.Count; i++)
                        {
                            var artist = Model.Artists[i];
                            <a asp-controller="Artists" asp-action="Details" asp-route-id="@artist.Id" class="hover:text-white">
                                @artist.Name
                            </a>@(i < Model.Artists.Count - 1 ? ", " : "")
                        }
                    }
                    else if (!string.IsNullOrEmpty(Model.ArtistName))
                    {
                        <a asp-controller="Artists" asp-action="Details" asp-route-id="@Model.ArtistId" class="hover:text-white">
                            @Model.ArtistName
                        </a>
                    }
                    else
                    {
                        <span>Unknown Artist</span>
                    }
                </div>
                
                <div class="song-meta">
                    @if (Model.AlbumId.HasValue)
                    {
                        <div class="meta-item">
                            <i class="bi bi-disc"></i>
                            <a asp-controller="Albums" asp-action="Details" asp-route-id="@Model.AlbumId">
                                @Model.AlbumTitle
                            </a>
                        </div>
                    }                    <div class="meta-item">
                        <i class="bi bi-clock"></i>
                        @(Model.Duration?.ToString(@"m\:ss") ?? "--:--")
                    </div>
                    <div class="meta-item">
                        <i class="bi bi-calendar3"></i>
                        @(Model.ReleaseDate?.ToString("yyyy") ?? "Unknown")
                    </div>
                    <div class="meta-item">
                        <i class="bi bi-vinyl"></i>
                        @Model.Genre
                    </div>
                    <div class="meta-item">
                        <i class="bi bi-play-circle"></i>
                        @Model.PlayCount plays
                    </div>
                </div>
            </div>
              <div class="song-actions">
                <button class="btn btn-play" 
                    data-play-song='@Html.Raw(Json.Serialize(new { 
                        id = Model.Id, 
                        title = Model.Title, 
                        artistName = Model.Artists != null && Model.Artists.Any() ? string.Join(", ", Model.Artists.Select(a => a.Name)) : Model.ArtistName, 
                        audioUrl = Model.AudioUrl, 
                        coverImageUrl = Model.CoverImageUrl 
                    }))'
                    title="Play">
                    <i class="bi bi-play-fill"></i> Play
                </button>
                <button class="btn btn-action" id="likeButton" data-song-id="@Model.Id">
                    <i class="bi bi-heart"></i> Like
                </button>
                <button class="btn btn-action" id="addToPlaylistButton" data-song-id="@Model.Id" data-song-title="@Model.Title">
                    <i class="bi bi-plus"></i> Add to Playlist
                </button>
                <button class="btn btn-action">
                    <i class="bi bi-share"></i> Share
                </button>
            </div>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(Model.AudioUrl))
    {
        <div class="song-player">
            <div class="player-container">
                <audio controls class="audio-player">
                    <source src="@Model.AudioUrl" type="audio/mpeg">
                    Your browser does not support the audio element.
                </audio>
            </div>
        </div>
    }
</div>

<div class="related-section">
    <h2 class="section-title">Similar Songs</h2>
    
    <div class="related-tracks">
        @{
            var similarSongs = ViewBag.SimilarSongs as List<MusicApp.Models.DTOs.SongDto> ?? new List<MusicApp.Models.DTOs.SongDto>();
        }
        
        @if (similarSongs.Any())
        {
            foreach (var song in similarSongs)
            {
                <a asp-controller="Songs" asp-action="Details" asp-route-id="@song.Id" class="track-item">
                    <img src="@(song.CoverImageUrl ?? GetRandomImageUrl(40, 40))" alt="@song.Title cover" class="track-cover"
                         onerror="this.src='https://placehold.co/40x40/212121/AAAAAA?text=Song';">                    <div class="track-info">
                        <div class="track-title">@song.Title</div>
                        <div class="track-artist">
                            @if (song.Artists != null && song.Artists.Any())
                            {
                                @string.Join(", ", song.Artists.Select(a => a.Name))
                            }
                            else
                            {
                                @song.ArtistName
                            }
                        </div>
                    </div>
                    <div class="track-duration">@(song.Duration?.ToString(@"m\:ss") ?? "--:--")</div>
                </a>
            }
        }
        else
        {
            <p class="text-center p-3">No similar songs found.</p>
        }
    </div>
</div>

<div class="mt-4">
    <a asp-action="Index" class="btn btn-action">
        <i class="bi bi-arrow-left"></i> Back to Songs
    </a>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const likeButton = document.getElementById('likeButton');
        if (likeButton) {
            likeButton.addEventListener('click', function () {
                const songId = this.dataset.songId;
                fetch(`/api/Songs/${songId}/like`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        alert('Song liked!');
                        likeButton.classList.add('liked');
                        likeButton.innerHTML = '<i class="bi bi-heart-fill"></i> Liked';
                    } else {
                        response.text().then(text => alert('Failed to like song: ' + text));
                    }
                })
                .catch(error => alert('Error liking song: ' + error));
            });
        }
        const addToPlaylistButton = document.getElementById('addToPlaylistButton');
        if (addToPlaylistButton) {
            addToPlaylistButton.addEventListener('click', function() {
                const songId = this.dataset.songId;
                const songTitle = this.dataset.songTitle;
                showAddToPlaylistModal(songId, songTitle);
            });
        }
    });
    function showAddToPlaylistModal(songId, songTitle) {
        fetch('/Playlists/GetUserPlaylists', {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken()
            }
        })
        .then(response => response.json())
        .then(data => {
            const playlists = data.data || [];
            if (playlists.length === 0) {
                alert('You don\'t have any playlists yet. Create a playlist first!');
                return;
            }
            const modalHtml = `
                <div id="playlistModal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; align-items: center; justify-content: center;">
                    <div style="background: var(--ytm-bg-primary); border-radius: 8px; padding: 2rem; max-width: 400px; width: 90%; max-height: 80vh; overflow-y: auto;">
                        <h3 style="color: var(--ytm-text-primary); margin-bottom: 1rem;">Add Song to Playlist</h3>
                        <p style="color: var(--ytm-text-secondary); margin-bottom: 1.5rem;">Select a playlist to add <b>${songTitle}</b>:</p>
                        <div id="playlistList" style="max-height: 300px; overflow-y: auto; margin-bottom: 1.5rem;">
                            ${playlists.map(playlist => `
                                <div class="playlist-item" data-playlist-id="${playlist.id}" style="
                                    display: flex; align-items: center; padding: 0.75rem; margin-bottom: 0.5rem; 
                                    border: 1px solid var(--ytm-border-color); border-radius: 4px; cursor: pointer;
                                    background: var(--ytm-bg-secondary); transition: background-color 0.2s;
                                " onmouseover="this.style.backgroundColor='var(--ytm-bg-tertiary)'" onmouseout="this.style.backgroundColor='var(--ytm-bg-secondary)'">
                                    ${playlist.coverImageUrl ? `<img src="${playlist.coverImageUrl}" alt="${playlist.name}" style="width: 40px; height: 40px; border-radius: 4px; margin-right: 0.75rem;">` : '<div style="width: 40px; height: 40px; background: var(--ytm-bg-tertiary); border-radius: 4px; margin-right: 0.75rem; display: flex; align-items: center; justify-content: center;"><i class="bi bi-music-note-list" style="color: var(--ytm-text-secondary);"></i></div>'}
                                    <div>
                                        <div style="color: var(--ytm-text-primary); font-weight: 500;">${playlist.name}</div>
                                        <div style="color: var(--ytm-text-secondary); font-size: 0.9rem;">${playlist.songCount} songs</div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button id="cancelPlaylistModal" style="
                                background: transparent; border: 1px solid var(--ytm-border-color); color: var(--ytm-text-secondary); 
                                padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer;">Cancel</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            document.getElementById('cancelPlaylistModal').addEventListener('click', closePlaylistModal);
            document.querySelectorAll('.playlist-item').forEach(item => {
                item.addEventListener('click', function() {
                    const playlistId = this.dataset.playlistId;
                    addSongToPlaylist(songId, playlistId, songTitle);
                });
            });
            document.getElementById('playlistModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closePlaylistModal();
                }
            });
        })
        .catch(error => {
            console.error('Error fetching playlists:', error);
            alert('Error loading playlists. Please try again.');
        });
    }
    function closePlaylistModal() {
        const modal = document.getElementById('playlistModal');
        if (modal) {
            modal.remove();
        }
    }
    function addSongToPlaylist(songId, playlistId, songTitle) {
        fetch(`/api/Playlists/${playlistId}/songs`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({ songId: songId })
        })
        .then(response => {
            if (response.ok) {
                alert(`'${songTitle}' added to playlist!`);
                closePlaylistModal();
            } else {
                response.text().then(text => alert('Failed to add song to playlist: ' + text));
            }
        })
        .catch(error => alert('Error adding to playlist: ' + error));
    }
    function getAntiForgeryToken() {
        const tokenField = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenField ? tokenField.value : '';
    }
</script>
}