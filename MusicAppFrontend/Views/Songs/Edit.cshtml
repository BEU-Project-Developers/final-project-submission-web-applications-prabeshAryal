@model MusicApp.Models.DTOs.SongDto
@{
    ViewData["Title"] = "Edit Song";
}

<div class="min-h-screen bg-[var(--ytm-bg-primary)] py-8">
    <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
            <div class="bg-[var(--ytm-bg-secondary)] rounded-xl shadow-xl border border-[var(--ytm-border-color)] mb-6">
                <div class="px-8 py-6 border-b border-[var(--ytm-border-color)]">
                    <div class="flex items-center justify-between">
                        <div>
                            <h1 class="text-3xl font-bold text-[var(--ytm-text-primary)] mb-2">Edit Song</h1>
                            <p class="text-[var(--ytm-text-secondary)]">Update song information, audio files, and metadata</p>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                        {
                            <div class="w-24 h-24 rounded-lg overflow-hidden shadow-lg">
                                <img src="@Model.CoverImageUrl" alt="@Model.Title" class="w-full h-full object-cover" />
                            </div>
                        }
                    </div>
                </div>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-6" role="alert">
                    <div class="flex items-center">
                        <i class="bi bi-check-circle-fill mr-2"></i>
                        <span>@TempData["SuccessMessage"]</span>
                    </div>
                </div>
            }
            @if (ViewBag.ErrorMessage != null)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
                    <div class="flex items-center">
                        <i class="bi bi-exclamation-triangle-fill mr-2"></i>
                        <span>@ViewBag.ErrorMessage</span>
                    </div>
                </div>
            }

            <form id="songEditForm" asp-action="Edit" method="post" enctype="multipart/form-data" class="space-y-6">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" name="PrimaryArtistId" id="PrimaryArtistId" value="@(Model.Artists?.FirstOrDefault(a => a.IsPrimaryArtist)?.Id ?? Model.ArtistId)" />
                
                <div class="bg-[var(--ytm-bg-secondary)] rounded-xl shadow-lg border border-[var(--ytm-border-color)]">
                    <div class="px-6 py-4 border-b border-[var(--ytm-border-color)]">
                        <h2 class="text-xl font-semibold text-[var(--ytm-text-primary)] flex items-center">
                            <i class="bi bi-asterisk text-[var(--ytm-accent-red)] mr-2 text-sm"></i>
                            Required Information
                        </h2>
                        <p class="text-sm text-[var(--ytm-text-secondary)] mt-1">Essential song details that must be provided</p>
                    </div>
                    <div class="p-6 space-y-4">
                        <div>
                            <label asp-for="Title" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">
                                Song Title <span class="text-[var(--ytm-accent-red)]">*</span>
                            </label>
                            <input asp-for="Title" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] placeholder-[var(--ytm-text-secondary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" placeholder="Enter song title" />
                            <span asp-validation-for="Title" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Artists <span class="text-[var(--ytm-accent-red)]">*</span></label>
                                <div id="artist-selection" class="space-y-3">
                                    <div>
                                        <label asp-for="ArtistId" class="block text-xs font-medium text-[var(--ytm-text-secondary)] mb-1">Primary Artist</label>
                                        <select asp-for="ArtistId" class="w-full px-3 py-2 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition text-sm">
                                            <option value="">Select Primary Artist</option>
                                            @if (ViewBag.Artists != null)
                                            {
                                                @foreach (var artist in ViewBag.Artists)
                                                {
                                                    <option value="@artist.Id" selected="@(Model.ArtistId == artist.Id)">@artist.Name</option>
                                                }
                                            }
                                        </select>
                                        <span asp-validation-for="ArtistId" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                                    </div>
                                    
                                    <div>
                                        <label class="block text-xs font-medium text-[var(--ytm-text-secondary)] mb-1">Additional Artists</label>
                                        <div class="border border-[var(--ytm-border-color)] rounded-lg p-3 bg-[var(--ytm-bg-input)] max-h-32 overflow-y-auto">
                                            @if (ViewBag.Artists != null)
                                            {
                                                @foreach (var artist in ViewBag.Artists)
                                                {
                                                    <div class="flex items-center mb-1">
                                                        <input class="artist-checkbox mr-2 rounded text-[var(--ytm-accent-red)] focus:ring-[var(--ytm-accent-red)]" type="checkbox" 
                                                               name="ArtistIds" value="@artist.Id" id="edit_artist_@artist.Id"
                                                               @(Model.Artists?.Any(a => a.Id == artist.Id) == true ? "checked" : "")>
                                                        <label class="text-xs text-[var(--ytm-text-primary)]" for="edit_artist_@artist.Id">
                                                            @artist.Name
                                                            @if (Model.Artists?.FirstOrDefault(a => a.Id == artist.Id)?.IsPrimaryArtist == true)
                                                            {
                                                                <span class="text-[var(--ytm-accent-red)] ml-1">(Primary)</span>
                                                            }
                                                        </label>
                                                    </div>
                                                }
                                            }
                                        </div>
                                        <p class="text-xs text-[var(--ytm-text-secondary)] mt-1">Select multiple artists if this is a collaboration</p>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label asp-for="AlbumId" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Album</label>
                                <select asp-for="AlbumId" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition">
                                    <option value="">Select an Album (Optional)</option>
                                    @if (ViewBag.Albums != null)
                                    {
                                        @foreach (var album in ViewBag.Albums)
                                        {
                                            <option value="@album.Id" selected="@(Model.AlbumId == album.Id)">@album.Title</option>
                                        }
                                    }
                                </select>
                                <span asp-validation-for="AlbumId" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            </div>
                        </div>

                        <div>
                            <label asp-for="Duration" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">
                                Duration <span class="text-[var(--ytm-accent-red)]">*</span>
                            </label>
                            <input asp-for="Duration" type="text" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] placeholder-[var(--ytm-text-secondary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" placeholder="HH:MM:SS or MM:SS" />
                            <span asp-validation-for="Duration" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            <p class="text-xs text-[var(--ytm-text-secondary)] mt-1">Format: HH:MM:SS (e.g., 00:03:45) or MM:SS (e.g., 3:45)</p>
                        </div>
                    </div>
                </div>

                <div class="bg-[var(--ytm-bg-secondary)] rounded-xl shadow-lg border border-[var(--ytm-border-color)]">
                    <div class="px-6 py-4 border-b border-[var(--ytm-border-color)]">
                        <div class="flex items-center justify-between">
                            <div>
                                <h2 class="text-xl font-semibold text-[var(--ytm-text-primary)] flex items-center">
                                    <i class="bi bi-gear text-[var(--ytm-text-secondary)] mr-2"></i>
                                    Additional Details
                                </h2>
                                <p class="text-sm text-[var(--ytm-text-secondary)] mt-1">Optional fields for enhanced song information</p>
                            </div>
                            <div class="flex items-center space-x-3">
                                <span class="text-sm text-[var(--ytm-text-secondary)]" id="toggleLabel">Show Advanced Options</span>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" id="optionalFieldsToggle" class="sr-only peer">
                                    <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[var(--ytm-accent-red)]"></div>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div id="optionalFields" class="hidden p-6 space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Audio File</label>
                                @if (!string.IsNullOrEmpty(Model.AudioUrl))
                                {
                                    <div class="mb-3 p-3 bg-[var(--ytm-bg-tertiary)] rounded-lg">
                                        <div class="flex items-center space-x-2">
                                            <i class="bi bi-music-note-beamed text-[var(--ytm-accent-red)]"></i>
                                            <span class="text-xs text-[var(--ytm-text-secondary)]">Current audio file available</span>
                                        </div>
                                        <audio controls class="w-full mt-2" style="height: 32px;">
                                            <source src="@Model.AudioUrl" type="audio/mpeg">
                                            Your browser does not support the audio element.
                                        </audio>
                                    </div>
                                }
                                <input type="file" id="audioFile" name="audioFile" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-[var(--ytm-accent-red)] file:text-white hover:file:bg-[var(--ytm-accent-red-hover)] transition" accept="audio/*" />
                                <p class="text-xs text-[var(--ytm-text-secondary)] mt-1">Upload a new audio file (MP3, WAV, etc.) or leave empty to keep current</p>
                                <input type="hidden" asp-for="AudioUrl" />
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Cover Image</label>
                                @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                                {
                                    <div class="mb-3">
                                        <img src="@Model.CoverImageUrl" alt="Current cover" id="currentCoverImage" class="w-32 h-32 object-cover rounded-lg shadow-md" />
                                        <p class="text-xs text-[var(--ytm-text-secondary)] mt-1">Current cover image</p>
                                    </div>
                                }
                                <input type="file" id="coverImage" name="coverImage" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-[var(--ytm-accent-red)] file:text-white hover:file:bg-[var(--ytm-accent-red-hover)] transition" accept="image/*" />
                                <p class="text-xs text-[var(--ytm-text-secondary)] mt-1">Upload a new cover image (JPG, PNG) or leave empty to keep current</p>
                                <input type="hidden" asp-for="CoverImageUrl" />
                                <div id="coverImagePreviewContainer" class="mt-2"></div>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label asp-for="TrackNumber" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Track Number</label>
                                <input asp-for="TrackNumber" type="number" min="1" max="100" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] placeholder-[var(--ytm-text-secondary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" placeholder="Track position in album" />
                                <span asp-validation-for="TrackNumber" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            </div>
                            <div>
                                <label asp-for="Genre" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Genre</label>
                                <input asp-for="Genre" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] placeholder-[var(--ytm-text-secondary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" placeholder="e.g., Rock, Pop, Jazz" />
                                <span asp-validation-for="Genre" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label asp-for="ReleaseDate" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Release Date</label>
                                <input asp-for="ReleaseDate" type="date" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" />
                                <span asp-validation-for="ReleaseDate" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            </div>
                            <div>
                                <label asp-for="PlayCount" class="block text-sm font-medium text-[var(--ytm-text-primary)] mb-2">Play Count</label>
                                <input asp-for="PlayCount" type="number" min="0" class="w-full px-4 py-3 rounded-lg bg-[var(--ytm-bg-input)] border border-[var(--ytm-border-color)] text-[var(--ytm-text-primary)] placeholder-[var(--ytm-text-secondary)] focus:ring-2 focus:ring-[var(--ytm-accent-red)] focus:border-[var(--ytm-accent-red)] transition" placeholder="Number of times played" />
                                <span asp-validation-for="PlayCount" class="text-[var(--ytm-accent-red)] text-sm block mt-1"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex items-center justify-between pt-6">
                    <div class="flex space-x-3">
                        <a asp-action="Index" class="px-6 py-3 rounded-lg bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-primary)] font-medium hover:bg-gray-600 transition flex items-center">
                            <i class="bi bi-arrow-left mr-2"></i>
                            Back to Songs
                        </a>
                        <a asp-action="Details" asp-route-id="@Model.Id" class="px-6 py-3 rounded-lg bg-[var(--ytm-bg-tertiary)] text-[var(--ytm-text-primary)] font-medium hover:bg-gray-600 transition flex items-center">
                            <i class="bi bi-eye mr-2"></i>
                            View Details
                        </a>
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" id="resetForm" class="px-6 py-3 rounded-lg bg-gray-600 text-white font-medium hover:bg-gray-700 transition flex items-center">
                            <i class="bi bi-arrow-clockwise mr-2"></i>
                            Reset Changes
                        </button>
                        <button type="submit" class="px-8 py-3 rounded-lg bg-[var(--ytm-accent-red)] text-white font-medium hover:bg-[var(--ytm-accent-red-hover)] transition flex items-center shadow-lg">
                            <i class="bi bi-check2 mr-2"></i>
                            Save Song
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Placeholder for custom alert
    function showCustomAlert(message, callback) {
        console.warn("Placeholder CustomAlert: " + message);
        // Replace with your actual modal implementation
        alert(message); 
        if (callback) callback();
    }

    // Placeholder for custom confirm
    function showCustomConfirm(message, onConfirm, onCancel) {
        console.warn("Placeholder CustomConfirm: " + message);
        // Replace with your actual modal implementation
        if (confirm(message)) {
            if (onConfirm) onConfirm();
        } else {
            if (onCancel) onCancel();
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        // DOM Element Cache
        const songEditForm = document.getElementById('songEditForm');
        const primaryArtistSelect = document.querySelector('select[name="ArtistId"]');
        const artistCheckboxes = document.querySelectorAll('.artist-checkbox');
        const primaryArtistIdInput = document.getElementById('PrimaryArtistId');
        
        const toggle = document.getElementById('optionalFieldsToggle');
        const optionalFields = document.getElementById('optionalFields');
        const toggleLabel = document.getElementById('toggleLabel');
        const resetButton = document.getElementById('resetForm');
        const coverImageInput = document.getElementById('coverImage');
        const coverImagePreviewContainer = document.getElementById('coverImagePreviewContainer');
        const currentCoverImage = document.getElementById('currentCoverImage'); // Existing server-rendered image

        // --- Artist Selection Logic ---
        function updateArtistLabels() {
            const primaryArtistId = primaryArtistSelect ? primaryArtistSelect.value : null;
            artistCheckboxes.forEach(checkbox => {
                const label = checkbox.nextElementSibling;
                if (label) {
                    let artistName = label.textContent.replace(/\s*\(Primary\)/i, '').trim(); // More robust removal of (Primary)
                    if (checkbox.value === primaryArtistId && primaryArtistId) {
                        label.innerHTML = `${artistName} <span class="text-[var(--ytm-accent-red)] ml-1">(Primary)</span>`;
                    } else {
                        label.textContent = artistName;
                    }
                }
            });
            if (primaryArtistIdInput && primaryArtistId) {
                 primaryArtistIdInput.value = primaryArtistId;
            } else if (primaryArtistIdInput) {
                 primaryArtistIdInput.value = ""; // Clear if no primary artist selected
            }
        }

        function initializeArtistSelectionState() {
            const selectedPrimaryId = primaryArtistSelect ? primaryArtistSelect.value : null;
            artistCheckboxes.forEach(checkbox => {
                if (checkbox.value === selectedPrimaryId && selectedPrimaryId) {
                    checkbox.checked = true;
                    checkbox.disabled = true;
                } else {
                    checkbox.disabled = false;
                }
            });
            updateArtistLabels();
        }

        if (primaryArtistSelect) {
            primaryArtistSelect.addEventListener('change', function() {
                const selectedPrimaryId = this.value;
                artistCheckboxes.forEach(checkbox => {
                    if (checkbox.value === selectedPrimaryId && selectedPrimaryId) {
                        checkbox.checked = true;
                        checkbox.disabled = true;
                    } else {
                        checkbox.disabled = false;
                    }
                });
                updateArtistLabels();
                if (primaryArtistIdInput) primaryArtistIdInput.value = selectedPrimaryId;
            });
        }

        artistCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                // If a primary artist is selected and this checkbox matches it, it shouldn't be uncheckable.
                // This logic is mostly handled by disabling it. If it's somehow enabled and unchecked,
                // the primary select should ideally clear. For simplicity, we rely on the disabled state.
                updateArtistLabels(); // Update labels if a non-primary artist is checked/unchecked
            });
        });
        
        initializeArtistSelectionState(); // Initial setup

        // --- Optional Fields Toggle Functionality ---
        if (toggle && optionalFields && toggleLabel) {
            toggle.addEventListener('change', function() {
                if (this.checked) {
                    optionalFields.classList.remove('hidden');
                    requestAnimationFrame(() => { // Ensure display change is processed before animation
                        optionalFields.classList.add('animate-fadeIn');
                    });
                    toggleLabel.textContent = 'Hide Advanced Options';
                } else {
                    optionalFields.classList.remove('animate-fadeIn');
                    optionalFields.classList.add('hidden');
                    toggleLabel.textContent = 'Show Advanced Options';
                }
            });

            // Auto-expand optional fields if any have values on initial load
            const optionalInputs = optionalFields.querySelectorAll('input:not([type="file"]), textarea, select');
            let hasOptionalValues = false;
            optionalInputs.forEach(input => {
                if (input.value && input.value.trim() !== '') {
                    // For select, check if it's not the default "empty" option if applicable
                    if (input.tagName === 'SELECT') {
                        if (input.selectedIndex > 0 || (input.selectedIndex === 0 && input.options[0] && input.options[0].value !== "")) {
                             hasOptionalValues = true;
                        }
                    } else {
                        hasOptionalValues = true;
                    }
                }
            });

            if (hasOptionalValues) {
                toggle.checked = true;
                optionalFields.classList.remove('hidden');
                requestAnimationFrame(() => {
                    optionalFields.classList.add('animate-fadeIn');
                });
                toggleLabel.textContent = 'Hide Advanced Options';
            }
        }

        // --- Reset Form Functionality ---
        if (resetButton && songEditForm) {
            resetButton.addEventListener('click', function() {
                showCustomConfirm('Are you sure you want to reset all changes? This will revert all fields to their original values.', function() {
                    songEditForm.reset(); // Resets form field values to their initial state

                    // Explicitly reset toggle and optional fields visibility
                    if (toggle) toggle.checked = false;
                    if (optionalFields) {
                        optionalFields.classList.remove('animate-fadeIn');
                        optionalFields.classList.add('hidden');
                    }
                    if (toggleLabel) toggleLabel.textContent = 'Show Advanced Options';

                    // Re-initialize artist selection states
                    initializeArtistSelectionState();
                    if(primaryArtistIdInput && primaryArtistSelect) primaryArtistIdInput.value = primaryArtistSelect.value;


                    // Clear client-side cover image preview
                    if (coverImagePreviewContainer) {
                        coverImagePreviewContainer.innerHTML = ''; // Clear any dynamic preview
                    }
                     // Show the original server-rendered image if it exists and was hidden
                    if (currentCoverImage) {
                        currentCoverImage.style.display = ''; 
                    }


                    // Re-check if optional fields should be auto-expanded after reset (likely not, as values are cleared)
                    // but if there were default values from server that are not empty, this could be re-evaluated.
                    // For simplicity, current reset always hides them.
                });
            });
        }

        // --- Form Validation and Submission ---
        if (songEditForm) {
            songEditForm.addEventListener('submit', function(e) {
                const titleInput = songEditForm.querySelector('input[name="Title"]');
                const durationInput = songEditForm.querySelector('input[name="Duration"]');
                const title = titleInput ? titleInput.value.trim() : '';
                const duration = durationInput ? durationInput.value.trim() : '';
                let isValid = true;

                if (!title) {
                    isValid = false;
                    showCustomAlert('Song title is required.');
                    if (titleInput) titleInput.focus();
                }

                if (isValid && !duration) {
                    isValid = false;
                    showCustomAlert('Song duration is required.');
                    if (durationInput) durationInput.focus();
                }
                
                if (isValid && primaryArtistSelect && !primaryArtistSelect.value) {
                    isValid = false;
                    showCustomAlert('Primary Artist is required.');
                    primaryArtistSelect.focus();
                }

                if (!isValid) {
                    e.preventDefault(); // Stop submission
                    return;
                }

                // Show loading state
                const submitButton = songEditForm.querySelector('button[type="submit"]');
                if (submitButton) {
                    submitButton.dataset.originalText = submitButton.innerHTML; // Store original HTML
                    submitButton.innerHTML = '<i class="bi bi-hourglass-split mr-2 animate-spin"></i>Saving...';
                    submitButton.disabled = true;
                }
                // Server will handle re-enabling or redirecting.
            });
        }

        // --- File Upload Preview Functionality (Cover Image) ---
        if (coverImageInput && coverImagePreviewContainer) {
            coverImageInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                coverImagePreviewContainer.innerHTML = ''; // Clear previous JS preview

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        const img = document.createElement('img');
                        img.id = 'coverImageJsPreview'; // Differentiate from server-rendered
                        img.src = event.target.result;
                        img.alt = 'New cover preview';
                        img.className = 'w-32 h-32 object-cover rounded-lg shadow-md';
                        coverImagePreviewContainer.appendChild(img);
                        
                        // Hide the original server-rendered image if it exists
                        if (currentCoverImage) {
                           currentCoverImage.style.display = 'none'; 
                        }
                    };
                    reader.readAsDataURL(file);
                } else {
                    // No file selected, show the original server-rendered image if it exists
                    if (currentCoverImage) {
                       currentCoverImage.style.display = ''; 
                    }
                }
            });
        }
    }); // End of DOMContentLoaded

    // Add CSS animations (Razor workaround: use .innerHTML for CSS)
    // It's generally better to put this in a .css file if possible.
    const styleTag = document.createElement('style');
    styleTag.innerHTML = `
        .animate-fadeIn {
            animation: fadeIn 0.3s ease-in-out;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Style for file inputs to match Tailwind form elements better */
        input[type="file"] {
            /* Basic styling, can be enhanced */
        }
        input[type="file"]::file-selector-button {
            /* Tailwind-like styling for the button part */
            /* These are now applied directly in the input tag using 'file:' Tailwind prefix */
        }
    `;
    document.head.appendChild(styleTag);
</script>
<partial name="_ValidationScriptsPartial" />
}
