// ER Diagram for MusicApp
// Generated using dbdiagram.io

// Users Table
Table users {
  id int [pk, increment]
  username varchar [not null, unique]
  email varchar [not null, unique]
  password_hash varchar [not null]
  first_name varchar
  last_name varchar
  profile_image_url varchar
  created_at datetime [not null]
  updated_at datetime
}

// Roles Table
Table roles {
  id int [pk, increment]
  name varchar [not null, unique]
  description varchar
}

// UserRoles Table (M:N relationship between Users and Roles)
Table user_roles {
  user_id int [ref: > users.id]
  role_id int [ref: > roles.id]
  created_at datetime [not null]
  
  indexes {
    (user_id, role_id) [pk]
  }
}

// Artists Table
Table artists {
  id int [pk, increment]
  name varchar [not null]
  bio text
  image_url varchar
  genre varchar
  monthly_listeners int [default: 0]
  created_at datetime [not null]
  updated_at datetime
}

// Albums Table
Table albums {
  id int [pk, increment]
  title varchar [not null]
  artist_id int [ref: > artists.id]
  cover_image_url varchar
  release_date date
  genre varchar
  description text
  created_at datetime [not null]
  updated_at datetime
}

// Songs Table
Table songs {
  id int [pk, increment]
  title varchar [not null]
  artist_id int [ref: > artists.id]
  album_id int [ref: > albums.id, null]
  audio_url varchar [not null]
  cover_image_url varchar
  duration int [not null] // in seconds
  track_number int
  genre varchar
  release_date date
  play_count int [default: 0]
  created_at datetime [not null]
  updated_at datetime
}

// Playlists Table
Table playlists {
  id int [pk, increment]
  name varchar [not null]
  user_id int [ref: > users.id]
  description text
  cover_image_url varchar
  is_public boolean [default: true]
  created_at datetime [not null]
  updated_at datetime
}

// PlaylistSongs Table (M:N relationship between Playlists and Songs)
Table playlist_songs {
  playlist_id int [ref: > playlists.id]
  song_id int [ref: > songs.id]
  position int [not null]
  added_at datetime [not null]
  
  indexes {
    (playlist_id, song_id) [pk]
  }
}

// UserFavorites Table (M:N relationship between Users and Songs)
Table user_favorites {
  user_id int [ref: > users.id]
  song_id int [ref: > songs.id]
  created_at datetime [not null]
  
  indexes {
    (user_id, song_id) [pk]
  }
}

// UserFollowers Table (M:N relationship between Users)
Table user_followers {
  follower_id int [ref: > users.id]
  following_id int [ref: > users.id]
  created_at datetime [not null]
  
  indexes {
    (follower_id, following_id) [pk]
  }
} 

import React, { useState, useEffect } from 'react';

const getYouTubeId = (url) => {
  if (!url) return '';
  
  // Handle youtu.be format
  if (url.includes('youtu.be/')) {
    return url.split('youtu.be/')[1].split('?')[0];
  }
  
  // Handle youtube.com format
  if (url.includes('youtube.com/watch?v=')) {
    return url.split('v=')[1].split('&')[0];
  }
  
  // Handle youtube.com/embed format
  if (url.includes('youtube.com/embed/')) {
    return url.split('embed/')[1].split('?')[0];
  }
  
  return '';
};

const MediaViewer = ({ media, onClose }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isOpen, setIsOpen] = useState(true);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        handleClose();
      } else if (e.key === 'ArrowLeft') {
        handlePrev();
      } else if (e.key === 'ArrowRight') {
        handleNext();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [currentIndex]);

  const handleClose = () => {
    setIsOpen(false);
    setTimeout(() => onClose(), 300); // Wait for animation to complete
  };

  const handlePrev = () => {
    setCurrentIndex((prev) => (prev === 0 ? media.length - 1 : prev - 1));
  };

  const handleNext = () => {
    setCurrentIndex((prev) => (prev === media.length - 1 ? 0 : prev + 1));
  };

  const currentItem = media[currentIndex];

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90">
      <div className="relative w-full h-full flex items-center justify-center">
        {/* Close button */}
        <button
          onClick={handleClose}
          className="absolute top-4 right-4 text-white hover:text-gray-300"
        >
          <svg
            className="w-8 h-8"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>

        {/* Navigation buttons */}
        {media.length > 1 && (
          <>
            <button
              onClick={handlePrev}
              className="absolute left-4 text-white hover:text-gray-300"
            >
              <svg
                className="w-8 h-8"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 19l-7-7 7-7"
                />
              </svg>
            </button>
            <button
              onClick={handleNext}
              className="absolute right-4 text-white hover:text-gray-300"
            >
              <svg
                className="w-8 h-8"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </button>
          </>
        )}

        {/* Media content */}
        <div className="max-w-4xl w-full mx-4">
          {currentItem.type === 'image' ? (
            <img
              src={currentItem.urls[0]}
              alt={currentItem.title}
              className="max-h-[80vh] w-auto mx-auto object-contain"
              onError={(e) => {
                console.error('Image failed to load:', currentItem.urls[0]);
                e.target.style.display = 'none';
              }}
            />
          ) : (
            <div className="relative pb-[56.25%]">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src={`https://www.youtube.com/embed/${getYouTubeId(currentItem.urls[0])}`}
                title={currentItem.title}
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              />
            </div>
          )}
        </div>

        {/* Media info */}
        <div className="absolute bottom-4 left-0 right-0 text-center text-white">
          <h3 className="text-xl font-semibold">{currentItem.title}</h3>
          {currentItem.description && (
            <p className="text-sm mt-2">{currentItem.description}</p>
          )}
          {media.length > 1 && (
            <p className="text-sm mt-2">
              {currentIndex + 1} / {media.length}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default MediaViewer; 