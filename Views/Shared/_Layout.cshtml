@* Views/Shared/_Layout.cshtml *@
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
@* Default to dark theme *@
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Music App</title>

    @* Bootstrap CSS *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    @* Bootstrap Icons *@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">

    @* Google Font (Roboto) *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

    @* Link to your site.css (Contains all styles below) *@
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

</head>
<body class="sidebar-collapsed">
    @* Start with sidebar collapsed on larger screens by default *@

    @* Top Bar: Fixed navigation header *@
    <header class="top-bar">
        @* Sidebar Toggle Buttons (Desktop and Mobile) *@
        <button id="sidebar-toggle" class="sidebar-toggle-btn d-none d-lg-block" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>
        <button id="mobile-sidebar-toggle" class="mobile-sidebar-toggle d-lg-none" aria-label="Toggle sidebar">
            <i class="bi bi-list"></i>
        </button>

        @* Brand/Logo *@
        <a class="navbar-brand" href="/">
            <i class="bi bi-music-note-beamed"></i>
            <span class="d-none d-sm-inline ms-2">Music App</span>
        </a>

        @* Search Bar Container *@
        <div class="search-container">
            <form method="get" action="@Url.Action("SearchResults", "Home")">
                <div class="input-group">
                    <input type="text" name="q" class="form-control search-box" placeholder="Search" aria-label="Search">
                    <button class="btn search-btn" type="submit" aria-label="Search button">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </form>
        </div>

        @* Profile Button *@
        <div class="nav-item">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="dropdown">
                    <a href="#" class="btn btn-link nav-link dropdown-toggle" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="@(string.IsNullOrEmpty(ViewBag.UserProfileImage) ? "/assets/default-profile.png" : ViewBag.UserProfileImage)" 
                             alt="Profile" 
                             class="profile-image" 
                             style="width: 32px; height: 32px; object-fit: cover; border-radius: 50%;"
                             onerror="this.onerror=null; this.src='/assets/default-profile.png';">
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li><a class="dropdown-item" href="@Url.Action("Dashboard", "Account")">Dashboard</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Profile", "Account")">Edit Profile</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <form class="form-inline" asp-area="" asp-controller="Account" asp-action="Logout" method="post">
                                <button type="submit" class="dropdown-item">Logout</button>
                            </form>
                        </li>
                    </ul>
                </div>
            }
            else
            {
                <button class="btn btn-link nav-link" type="button" data-bs-toggle="modal" data-bs-target="#authModal">
                    <i class="bi bi-person-circle" style="font-size: 2rem;"></i>
                </button>
            }
        </div>
    </header>

    @* Sidebar Navigation *@
    <aside class="sidebar" id="sidebar">
        @* Scrollable Navigation Area *@
        <div class="sidebar-sticky-content">
            <ul class="nav flex-column">
                @* Navigation Links - dynamically set active state *@
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Index" ? "active" : "")" href="/">
                        <i class="bi bi-house-door-fill"></i> <span class="sidebar-text">Home</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Artists" ? "active" : "")" href="/Artists">
                        <i class="bi bi-people-fill"></i> <span class="sidebar-text">Artists</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Albums" ? "active" : "")" href="/Albums">
                        <i class="bi bi-disc-fill"></i> <span class="sidebar-text">Albums</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Playlists" ? "active" : "")" href="/Playlists">
                        <i class="bi bi-music-note-list"></i> <span class="sidebar-text">Playlists</span>
                    </a>
                </li>

                @if (User.Identity?.IsAuthenticated == true)
                {
                    <li><hr class="mx-3 sidebar-divider"></li>
                    <li class="nav-item">
                        <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "Dashboard" ? "active" : "")" href="@Url.Action("Dashboard", "Account")">
                            <i class="bi bi-speedometer2"></i> <span class="sidebar-text">Dashboard</span>
                        </a>
                    </li>
                    @if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Account" && ViewContext.RouteData.Values["action"]?.ToString() == "AdminDashboard" ? "active" : "")" href="@Url.Action("AdminDashboard", "Account")">
                                <i class="bi bi-shield-lock"></i> <span class="sidebar-text">Admin Panel</span>
                            </a>
                        </li>
                    }
                }

                @* Divider *@
                <li><hr class="mx-3 sidebar-divider"></li>

                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "About" ? "active" : "")" href="/Home/About">
                        <i class="bi bi-info-circle-fill"></i> <span class="sidebar-text">About</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" && ViewContext.RouteData.Values["action"]?.ToString() == "Privacy" ? "active" : "")" href="/Home/Privacy">
                        <i class="bi bi-shield-check"></i> <span class="sidebar-text">Privacy</span>
                    </a>
                </li>
            </ul>
        </div>

        @* Non-scrolling bottom part (for theme toggle) *@
        <div class="mt-auto pb-2 sidebar-bottom-section">
            <hr class="mx-3 sidebar-divider">

            @* --- Theme Toggle Area --- *@
            @* Slider Toggle (Visible when sidebar is expanded) *@
            <div class="theme-switch-wrapper" id="theme-switch-expanded">
                <label class="theme-switch" for="theme-toggle-checkbox" aria-label="Toggle theme slider">
                    <input type="checkbox" id="theme-toggle-checkbox">
                    <span class="slider round"></span>
                </label>
                <span class="sidebar-text ms-2 theme-switch-label" id="theme-switch-label">Theme</span>
            </div>

            @* Icon Button Toggle (Visible when sidebar is collapsed) *@
            <button type="button" class="btn nav-link theme-toggle-icon-btn" id="theme-toggle-collapsed" aria-label="Toggle theme">
                @* Icon (e.g., bi-sun-fill or bi-moon-fill) will be set by JavaScript *@
                <i id="theme-toggle-icon" class="bi"></i>
            </button>
            @* --- End Theme Toggle Area --- *@
        </div>
    </aside>

    @* Main Content Wrapper *@
    <div class="content-wrapper" id="content-wrapper">
        <main role="main" class="p-4">
            @* Add padding directly to main *@
            @RenderBody()
        </main>
    </div>

    @* Bootstrap JS Bundle *@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @* Site Specific JS (Contains all script logic below) *@
    <script src="~/js/site.js" asp-append-version="true"></script>

    @* Render section for page-specific scripts *@
    @await RenderSectionAsync("Scripts", required: false)

    <!-- Auth Modal for Login/Signup -->
    <div class="modal fade" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="background:var(--ytm-bg-secondary);color:var(--ytm-text-primary);border-radius:18px;">
                <div class="modal-header border-0">
                    <h5 class="modal-title" id="authModalLabel">Create Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="filter:invert(1);"></button>
                </div>
                <div class="modal-body p-4" style="overflow: hidden;">
                    <!-- Register Form (Shown by default) -->
                    <div id="registerFormContainer" class="auth-form-container">
                        <form id="registerForm" method="post" action="@Url.Action("Register", "Account")">
                            <input type="hidden" name="ReturnUrl" value="@Url.Action("Dashboard", "Account")" />
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="registerFirstName" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="registerFirstName" name="FirstName" placeholder="Enter first name" required />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="registerLastName" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="registerLastName" name="LastName" placeholder="Enter last name" required />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="registerUsername" class="form-label">Username</label>
                                <input type="text" class="form-control" id="registerUsername" name="Username" placeholder="Choose a username" required />
                            </div>
                            <div class="mb-3">
                                <label for="registerEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="registerEmail" name="Email" placeholder="Enter your email" required />
                            </div>
                            <div class="mb-3">
                                <label for="registerPassword" class="form-label">Password</label>
                                <input type="password" class="form-control" id="registerPassword" name="Password" placeholder="Create a password" required />
                            </div>
                            <div class="mb-3">
                                <label for="registerConfirmPassword" class="form-label">Confirm Password</label>
                                <input type="password" class="form-control" id="registerConfirmPassword" name="ConfirmPassword" placeholder="Confirm your password" required />
                            </div>
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg">Create Account</button>
                            </div>
                        </form>
                        <div class="text-center mt-3">
                            <span>Already have an account? <a href="javascript:void(0);" onclick="switchToLogin();" class="text-decoration-none" style="color:var(--ytm-accent-red);">Sign In</a></span>
                        </div>
                    </div>

                    <!-- Login Form (Hidden by default) -->
                    <div id="loginFormContainer" class="auth-form-container">
                        <form id="loginForm" method="post" action="@Url.Action("Login", "Account")">
                            <input type="hidden" name="ReturnUrl" value="@Url.Action("Dashboard", "Account")" />
                            <div class="mb-3">
                                <label for="loginEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="loginEmail" name="Email" placeholder="Enter your email" required />
                            </div>
                            <div class="mb-3">
                                <label for="loginPassword" class="form-label">Password</label>
                                <input type="password" class="form-control" id="loginPassword" name="Password" placeholder="Enter your password" required />
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="loginRememberMe" name="RememberMe" value="true" />
                                <input type="hidden" name="RememberMe" value="false" />
                                <label class="form-check-label" for="loginRememberMe">Remember me</label>
                            </div>
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg">Sign In</button>
                            </div>
                        </form>
                        <div class="text-center mt-3">
                            <span>Don't have an account? <a href="javascript:void(0);" onclick="switchToRegister();" class="text-decoration-none" style="color:var(--ytm-accent-red);">Sign Up</a></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Smooth transition for auth form containers */
        .auth-form-container {
            transition: opacity 0.3s ease, transform 0.3s ease;
            position: absolute;
            width: 100%;
            left: 0;
            right: 0;
            padding: 0 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            pointer-events: none;
        }
        
        .auth-form-container.active {
            opacity: 1;
            transform: translateY(0);
            position: relative;
            pointer-events: all;
        }
    </style>

    <script>
        // Global functions for switching between login and register forms
        function switchToLogin() {
            const registerForm = document.getElementById('registerFormContainer');
            const loginForm = document.getElementById('loginFormContainer');
            
            // First start the transition
            registerForm.classList.remove('active');
            
            // Wait a moment before showing the other form
            setTimeout(() => {
                loginForm.classList.add('active');
                document.getElementById('authModalLabel').textContent = 'Sign In';
            }, 200);
        }
        
        function switchToRegister() {
            const registerForm = document.getElementById('registerFormContainer');
            const loginForm = document.getElementById('loginFormContainer');
            
            // First start the transition
            loginForm.classList.remove('active');
            
            // Wait a moment before showing the other form
            setTimeout(() => {
                registerForm.classList.add('active');
                document.getElementById('authModalLabel').textContent = 'Create Account';
            }, 200);
        }
        
        // When the modal is opened, show register form by default
        document.addEventListener('DOMContentLoaded', function() {
            var authModal = document.getElementById('authModal');
            if (authModal) {
                // Initialize forms on page load
                const registerForm = document.getElementById('registerFormContainer');
                const loginForm = document.getElementById('loginFormContainer');
                
                // Ensure only register form is active initially
                registerForm.classList.add('active');
                loginForm.classList.remove('active');
                
                authModal.addEventListener('show.bs.modal', function() {
                    // Reset form state each time modal is opened
                    loginForm.classList.remove('active');
                    registerForm.classList.add('active');
                    document.getElementById('authModalLabel').textContent = 'Create Account';
                });
                
                // Check if we should open the auth modal automatically
                @if (TempData["OpenAuthModal"] != null)
                {
                    <text>
                    var myModal = new bootstrap.Modal(authModal);
                    myModal.show();
                    
                    // Switch to the correct form if needed
                    @if (TempData["OpenAuthModal"].ToString() == "login")
                    {
                        <text>
                        // Reset form states first
                        registerForm.classList.remove('active');
                        loginForm.classList.remove('active');
                        
                        // Give modal time to appear before animating the form
                        setTimeout(() => {
                            loginForm.classList.add('active');
                            document.getElementById('authModalLabel').textContent = 'Sign In';
                        }, 150);
                        </text>
                    }
                    else
                    {
                        <text>
                        // Reset form states first
                        registerForm.classList.remove('active');
                        loginForm.classList.remove('active');
                        
                        // Give modal time to appear before animating the form
                        setTimeout(() => {
                            registerForm.classList.add('active');
                            document.getElementById('authModalLabel').textContent = 'Create Account';
                        }, 150);
                        </text>
                    }
                    
                    // Show error message if present
                    @if (TempData["AuthError"] != null)
                    {
                        <text>
                        // Create an error alert
                        var errorDiv = document.createElement('div');
                        errorDiv.className = 'alert alert-danger alert-dismissible fade show';
                        errorDiv.innerHTML = '@TempData["AuthError"]' + 
                                            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
                        
                        // Determine which form container to show the error in
                        var formToShowErrorIn;
                        if ('@TempData["OpenAuthModal"]' === 'login') {
                            formToShowErrorIn = document.getElementById('loginFormContainer');
                        } else {
                            formToShowErrorIn = document.getElementById('registerFormContainer');
                        }
                        
                        // Insert error at the top of the form after a slight delay to ensure the form is visible
                        setTimeout(() => {
                            if (formToShowErrorIn) {
                                // Clear any existing alerts first
                                const existingAlerts = formToShowErrorIn.querySelectorAll('.alert');
                                existingAlerts.forEach(alert => alert.remove());
                                
                                formToShowErrorIn.insertBefore(errorDiv, formToShowErrorIn.firstChild);
                            }
                        }, 300);
                        </text>
                    }
                    
                    // Handle ReturnUrl if present
                    @if (TempData["ReturnUrl"] != null)
                    {
                        <text>
                        // Set ReturnUrl in both forms
                        var loginReturnUrlInput = document.querySelector('#loginForm input[name="ReturnUrl"]');
                        var registerReturnUrlInput = document.querySelector('#registerForm input[name="ReturnUrl"]');
                        
                        if (loginReturnUrlInput) {
                            loginReturnUrlInput.value = '@TempData["ReturnUrl"]';
                        }
                        
                        if (registerReturnUrlInput) {
                            registerReturnUrlInput.value = '@TempData["ReturnUrl"]';
                        }
                        </text>
                    }
                    </text>
                }
            }
        });
    </script>
</body>
</html>
